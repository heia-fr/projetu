%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: HESSO logo quadri fr-all.eps
%%Creator: Adobe Illustrator(R) 14.0
%%For: Administrateur
%%CreationDate: 30.03.10
%%BoundingBox: 0 0 99 51
%%HiResBoundingBox: 0 0 98.1622 50.8555
%%CropBox: 0 0 98.1622 50.8555
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 14.0.0
%AI9_PrintingDataBegin
%ADO_BuildNumber: Adobe Illustrator(R) 14.0.0 x367 R agm 4.4890 ct 5.1541
%ADO_ContainsXMP: MainFirst
%AI7_Thumbnail: 128 68 8
%%BeginData: 10014 Hex Bytes
%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45FD08FFA90D0D0D0E0D0D0DA9FD08FF2F0D0D0E0D0E0D84FD67FF84
%0D0D0D070D0D0D84FD08FF300D0D070D0D0D5AFD67FFA90D0E0D0D0D0E0D
%A9FD08FF2FFD040D0E0D7EFD67FFA80D070D070D070D84FD08FF36070D07
%0D070D5AFD68FF0D0E0D0E0D0E0DA9FD08FF2F0E0D0E0D0E0D84FD67FFA8
%0D070D0D0D070DA8FD08FF5A070D0D0D070D5AFD68FF0D0D0D0E0D0D0DFD
%09FF5A0D0D0E0D0D0D84FD0AFF7E5A2F302F365A84A9FD0DFF7E5A2F362F
%302F5A5AA9AFFD13FFA8A8A7A8A1A8A8FD0DFFA8A8A7A8A1A8A8FD0EFFA8
%0D070D070D070DA8FD08FF5A070D070D070D59FD07FFA85A0D0D070D070D
%070D070D5AFD0AFF5A070D070D070D070D070D075AFD10FFA8A87D7D767D
%7C7D767D7D7DA8FD07FFA8A87D7D767D7C7D767D7DA8A8FD0CFF0D0D0D0E
%0D0D0DFD09FF5A0D0D0E0D0E0D84FD06FFA8360D0D0D0E0D0D0D0E0D0E0D
%0E5AFD08FF5A0D0E0D0E0D0E0D0D0D0E0D0D2FFD0FFFA8A77DA17DA17D7D
%7DA17D7D7DFD07FFA8A77DA17DA17DA17DA17DA17DA7CFFD0AFFA90D0D0D
%070D0D0D7EFFA8A9A8AFA8A9A85A0D0D070D0D0D5AFD05FFA80D070D0D0D
%070D0D0D070D0D0D070D5AFD06FF5A070D070D0D0D072F0D0D070D0D5AFD
%0FFFA17CFD047DCFFD04A87D7DA8FD05FFA87D7C7D7D7DA7FFA8A8FD047D
%7C7DA8FD0AFF0D0E0D0D0D0E0D0D0D0E0D0D0D0E0D0D0D0E0D0D0D0E0D7E
%FD05FF5A0D0D0D0E0D0D7EFFA85A0D0E0D0D0D30AFFD05FF0D0E0D0D0D0E
%0DA9FFFFAFA92F0D5AFD0FFF7D7D7DA1A8FD07FFA8FD06FFA77D7D7DA8FD
%06FFA8A77D7D7DA8FD09FFA90D070D070D070D070D070D070D070D070D07
%0D070D070D5AFD04FF84070D070D070D84FD04FF30070D070D077EFD04FF
%7E0D070D070D077EFD06FF7EA9FD0EFFA7FD047DFD0EFFA8767D7D7DA8FD
%07FFA87D7D7D7CFD0AFF0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E
%0D0E0D84FD04FF360E0D0E0D0E5AFD05FF840E0D0E0D0E30FD04FF850D0E
%0D0E0D0E2FAFFD15FFCF7DA17DA7FD0EFF7DA17D7DA8FD09FF7D7D7DA1A8
%FD09FF2F070D0D0D070D0D0D070D0D0D070D0D0D070D0D0D070D5AFD04FF
%2F070D0D0D0784FFFFA9AFA884070D0D0D0730FD04FF840D070D0D0D070D
%0D367EFD13FFA87D7D7D7CA1A8FD0BFFA8FD047DCFFD09FFA87D7D7CA8FD
%09FF2F0D0D0E0D0D0D36FD085A0D0D0D0E0D0D0D84FD04FF0D0D0D0E0D0D
%0D300D300D0E0D0D0D0E0D0D0DFD05FF0D0D0D0E0D0D0D0E0D0D0D5AA8FD
%08FFA87DA8A8FD05FFFD077DA8A8FD09FF7D7D7DA7FD0AFFA8FD047DFD08
%FFA830070D070D070DA8FD08FF5A070D070D070D59FFFFFF840D070D070D
%070D070D070D070D070D070D070D84FD04FF84070D070D070D070D070D07
%0D2FFD06FFA87C7D767DFD06FFFD047D7C7D7C7D7CA7A8FD05FFA8FD047D
%FD0AFFA87C7D7D7DFD09FF2F0D0D0E0D0D0DFD09FF5A0D0D0E0D0E0D84FF
%FFFFA90D0D0D0E0D0E0D0E0D0D0D0E0D0D0D0E0D0D0DA9FD05FF840D0E0D
%0E0D0E0D0E0D0E0D0D2FFD05FFA87D7DA77DFD07FFA8A17DA17DA17DA77D
%7DA7FD04FFCF7DA17DA7FD0AFFA8A17DA17DFD09FF300D0D070D0D0DA8FD
%08FF7E070D070D0D0D5AFFFFFF840D0D0D07FD0A0D2F0D300D2FA8FD06FF
%A92F0D0D0D070D0D0D070D0D0D5AFD04FFCF7C7D7CA7FD08FFCFA8FD087D
%A1FFFFFFA8FD047DFD0AFFA87C7D7D7DFD09FF2FFD040D0E0DA9FD08FF5A
%FD040D0E0D5AFD04FF0D0EFD040D5AFFAFFFFFFFAFFD0FFFA9842F0D0D0E
%0D0D0D0E0D36FD05FFCF7DA8A8FD0DFF7D7D7DA17D7DCAFFFFFF7DA17D7D
%CFFD09FFA87D7DA17DFD09FF2F070D070D070D84FD08FF7E070D070D070D
%53FD04FF2F070D070D0736FD18FFA830070D070D070D0DFD17FFA17D7C7D
%7CA8FFFFA87D7C7D7CA8FD09FFA87C7D7CA8FD09FF2F0E0D0E0D0E0DA9FD
%08FF5A0E0D0E0D0E0D5AFD04FF5A0E0D0E0D0E0D84FD0AFFA9FD05FFA8FD
%08FF300D0E0D0E0D36FD18FF7DA77D7DA8FFFFFF7DA17D7DA7FD09FF7D7D
%7DA1A8FD08FFAF0D070D0D0D070D84FD08FF5A070D0D0D070D2FFD04FFA9
%070D0D0D070D0D5AA8FD05FF845A077EFD04FFA80D59FD06FFA9070D0D0D
%070D2FFD0DFFA8FD09FFA8FD047DCAFFFFFFA87C7D7D7DA8FD07FFA8FD04
%7DFD0AFF0D0D0D0E0D0D0DA9FD08FF5A0D0D0E0D0D0D5AFD05FF5A0D0E0D
%0D0D0E0D0D0D5A2F36FD040D7EFD04FFA90D0D0D5A7E85847E0D0D0D0E0D
%0D0D85FD0EFF7DA8FD06FFA8A87D7D7DA7FD05FFA77DA77DA1A8FD05FFA8
%7D7DA17DA8FD09FFA80D070D070D070D7EFD08FF5A070D070D070D2FFD06
%FF30070D070D070D070D070D070D070D0784FD04FF7E0D070D070D070D07
%0D0D0D070D072FAFFD0DFFA87D767D7DA8A7A87D7D7C7D7D7DA8FD05FFA8
%7D7CFD047DA8A8A8FD047D76A7FD0BFF0D0D0D0E0D0D0D85FD08FF5A0D0D
%0E0D0D0D5AFD07FF5A0D0D0D0E0D0E0D0E0D0E0D0E0D0D84FD04FF850D0D
%0D0E0D0D0D0E0D0E0D0E0D36A9FD0FFF7DA1FD077DA77D7DA8FD07FFA8A8
%7D7D7DA17D7D7DA17D7D7DA8FD0BFFA80D0D0D070D0D0D5AFD08FF5A070D
%07FD040DFD08FFA92F0D070D0D0D070D0D0D07305AFD05FFA85A0D0D070D
%0D0D07FD040D7EFD10FFCFA8FD047D7CFD047DA8A8FD09FFCFA87D7D7C7D
%7C7D7C7D7DA8FD0DFF84A984A984A984FD09FFA8A9A8A984A984A9FD0AFF
%A985FD055A7E7EAFFD0AFFA884FD055A85A8FD15FFA8FFA8A8A8CAA8FD0F
%FFCACFA8A8A8FFA8FDFCFFFDFCFFFDFCFFFDD6FFA8A8FD1EFFA8FD06FFA8
%A8FFFFA8FD27FFA87DFFFFA8A1FD0CFFA8A8FD09FFA87D7DA7A8FD0BFF7D
%A8FD09FFA87D7D7DFD08FFA87DFD07FFA7FD06FFA87DFFA7CFFD06FFA8A7
%A8FD1EFFA8A8FFFFA8A8FFFFA8CFFFFFCAFD05FF7DA8FFFFA8CFFD05FFCA
%7DFD05FFA8A8FFFFA8A8A8FFFFA8A8FFFFA8A8FD05FF7DFD05FFA8CFA8FF
%FFFFA7A8FD04FFA8FD05FFA8A8A8FFA8A8FD04FFA8CFA8FFFFCAA7FD04FF
%A8A8FD19FFA87DA8A8A7A1FFA8A87DA8FFA8A7FF7DA8A87D7DFFA8A8A1A7
%CAFFFFFFA87DA8A8A8FF7DA8A7FFA87DA87DA8FF7DFFA8A7A87DA7FFFFFF
%A8A77DCAFFFF7D7DA7A1A8FF7DA87DA7FFA87DA8A8FF7DFFA8A87D7DFFA8
%7DFF7DA8A87DA8A8FFA87DA87DFFA8A7A87DA8FD18FFFD04A87DA8FFFFA8
%A87DFFA1CAFFA8A8FF7DFFFFA7A8A87DFD04FFCF7DA8A8FFA8A7FFFFFFA7
%A8FFA8A8FFA8FFA87DCF7DA8FD05FFA87DA8FFA8A8FFA8A8FF7DA8A87DFF
%7DFFFFFFA8A7FFFFA8A87DFFA8A8FFA8A8FF7DA8A8FF7DA8A8A7A8A87DCF
%7DA8FD18FFA87DFFFFA87DFF7DA8A8A1FFA8A7FF7DA8FFA1A8FF7CA8A8FF
%A8FFFFFFA8A8FFFFFFA87DFFFFFF7DA8FFA87DFF7DFFA87DA8FFA8FD07FF
%7CFF7DA8FFA87DFF7DA8A8FFFF7DA8FFFFFF7DFF7DA8A87DA8A87DFF7DA8
%FFFFA77DA8A7A1FFA8FF7DA1A8FFA8FD18FFA8A8FFFFA8A8FFA8A7A87DFF
%A8A8A8A1A8FFA1A8FFCF7DA8A8FD05FF7DA8A7FFFFA87DA8A8FF7DA87DFF
%FFA8A8FF7DA8A8CFFD04FF7DA87DA8FFA87DA87DFFFFA87DCAA8FFA8A7FD
%04A8FFA87DA87DFFA8A8FFA8A8FFA8A87DFFA8A7A8A8FFFF7DA8A8FD1AFF
%A8FFFFFFA8FFCFA8A8FFFFFFA8A8A8FFFFFFA8FFFFFFA8CAFD04FFA8FFA8
%A8A8FFFFA8A8FFFFFFA7FFFFFFA8FFFFFFA8A8CFFD04FFCAA7CAFFFF7DA8
%A8FD04FFA8A8FFFFFFA8A8A8FFA8FFFFA8A8FFFFFFA8FFA8FFFFCAA8FFFF
%FFA8A8A8FFFFFFA8A8FD56FFA8A7FD7EFFA8CFFD4EFFCFFD38FFA8FD1AFF
%CFFD2BFF7DFD0AFFA87DA1A8FD07FF7DFD21FFA7A8FD04FF7DFD0DFFA8FD
%07FF7DFD2AFFA8A7FD0AFF7DFD07FFCAFD05FFA8CFFFFFFFCFA8FFFFFFA8
%FD07FFA8FD05FFA8FFFFFFA8FD07FFA8A1A8FFFFCFA8FFFFFFA8FFFFFFA8
%A7CFFFA8FD04FFA8FD28FFA87DA87DFFA8A7A1A1A8FFFFFFA87D7DFFFFFF
%7DA8FFA7A8FF7DFF7DA7A1A8A87DA1A8FFA87DA87DFD05FF7DA87DA8FFA8
%7DA8A8FF7DA87DFF7DA8FFA87DA87DFFA8A8A77DA8FF7DA77DA7FFA77DA8
%FFA87D7DA8FF7DFFA8A7A1A1A8FD22FF7DFFFFA8FFA87DFF7DA8FD04FFA8
%A87DCAFFA8A8FF7DFFFFA7FFA87DFFFFFF7DA8FFFF7DA8A8A7A8FFFFFFA7
%A8FFFF7DFF7DFFFFFFA8A8FFFFFFA8A8FF7DFFFFA7FFA87DFF7DA8FFA7FF
%FF7DFFA8A8FFFFA8A87DCFFFA8FFA87DFF7DA8FD21FFA8A1FFFF7DFF7DA1
%A8FFA8FD06FFA87DFF7DFFFFA7A8FF7DFFFFCA7DA8FFFF7D7DA87DA8FFA8
%FD04FFA8A7FFA8A7FF7DA8FFFFA87DFFFFFF7DA8A87DFFFF7DFF7DA7A8FF
%A8FF7DFFFFA7FFA87DFFA87DA8A8A8FF7DFF7DA1A8FFA8FD22FF7DA8A87D
%FFFF7DA8A8FD05FFA7A87DA8FFA87DCA7DCFFFA7FFCFA8A8A8FFA8A87DFF
%A7A8A8A8FD04FFA8A7A8A7A8FFA8A7A8FFFFA7A7A8FFA8A7FF7DA8A7A1FF
%FF7DA8A8FFFFA1FFFF7DFFCAA1A8FF7DCF7DCFFF7DFFFF7DA8A8FD24FF7D
%A8A8FFFFFFA1A8A8FFFFFFA8A8A1A8A8FFCFA8A7A8A8FFA8FFA8A8A8FFA8
%A8A7FFFFFFA8A8A8FD05FFA8A8A8FFFFFFA8A8A8FFA8A8A7FFA8FFFFFFA7
%A8A8FFFFFF7DA8A8FFA8FFFFA8A8FFA8A8FFA8A7A8A8FFA8FFFFFFA1A8A8
%FDFCFFFDFCFFFDFCFFFD8FFFA8FD0BFFA7FD05FFA8FD0FFFA8FD0DFFA7FD
%0AFFA8A8FD27FFA8CFFD10FFA8A8A8FD05FFA87DA8A8FD0AFFA7A8FFFFFF
%A8A7FD0EFFA8A8FD0DFFA8A8FD09FFA7A8FD09FFA8CAFF7DA8FFFFA7FD0B
%FFA8FD0AFFA8A8FD11FFA8FD06FF7DFD04FFA8A8FFFFFFA8A8A8FF7DA8A8
%FFFFFF7DA8A8FFFFFFA8A8A8FFFFFFFD04A87DA8A8FFFFFFA8A8FFFFA8A8
%A8FF7DA8A8FFFFFFA8FFA8FFFFA87DFFFFA8A8FD05FF7DA8A8A17DFFA8A8
%FFFFA8FFFFFFA8A8A8FF7DA7FFFFA8A8A8FFA8A8A8FF7DA8A8CFFFFFA8FF
%A8FFFFFFA8FFA8A8A8FD05FFA8A8A8FFA7A8FFFFFFA8A87DFFCAA7A1A8FF
%A87DA87DFFA8A1A8A77DFFA8A1A8A8A8FFA1A8A8FFA8A1A87DA8FF7DA8A8
%FFFFA7A1A8FFA87DA87DFFA8A8FFFF7DFFA8A8FFA8A7A87DFD04FFA8A8FF
%A1A8CAA8A8FF7DA87DFFA87DA8CFCFA77DFFA7A8A8FFFFA87DA8FFA87DA8
%7DFFA8A8FFA87DFFFD05A8A1A8FF7DFFA8A87DA8FF7CA87DFFA8A87D7DFF
%A87DFFFFFF7DCFFF7DA8CF7DFFA87DFFA7A8FFA7A7A87DA8FFFFA87DFFA8
%A1FFA77DCAFFA87DFFFFFF7DA8FFA7A8FF7DFFA8A1FFA87DFF7DA8A77DA8
%FFFFFFA8A8A1A87DA87DFF7DA1A87D7DFF7DA8A8FF7DA8FFA87DA8FFA87D
%FFFFFF7DA8FFA8A7FF7DFF7DA7FD04A87DA87DA8A87DCFFFA8A7FFFFA7FF
%FFFFA8A8FF7DFFA7A8FFFFFFA8A8FF7DFFA8A8FFFF7DFF7DCAFFCAA1FF7D
%FFFFFFA8A8FFCF7DFFFFFF7DFFA8A8FFFFFFA8A8FFA7FFFFA8FFFF7DFFA8
%A8FFA7A8FD07FF7DA8FFFF7DA8FFA87DFD05FFA8A7FFA8A8FFFFFF7DA8A8
%A8FFFFFFA8A8FFA7A8FFA87DCFA8A8A7FFA7A8FD04FF7DFFFFA8FFFFFF7D
%FFFFFF7DA8A77DFFFF7DA87DFF7DCAFFA7A8CF7DFFA87DFFCA7DA87DCFFF
%A87DA8A8A87DFFA8A7FFA8A8A1A8FF7DA87DFF7DA8FFA8A8FF7DA87D7DFF
%A87DFF7DA7A8A8CFFD04FFA17DFFA87DA7FFA8A1A1A8A8FFA8A87DFFA87D
%A8A8A8A7A8FF7DA87DFF7DA8FFA8A7FFA77DA8FF76A8FFFF7DA8A7CFA8A1
%FFA87DA8A8FD06FFA8FFA8FFFFFFA8FD05FFA8FD05FFA8FFFFFFA8FD04FF
%CFA8FD05FFCFFFA8CAFD04FFA8CFFD04FFA8FFFFFFA8FFA8FFA8FFFFFFA8
%A8A8FD05FFA8FFFFFFA8FFFFFFCFCAA8FFFFCFA8FFFFFFA8FFA8CAA8FFFF
%FFA8A8FD04FFA8FFFFFFA8FD07FFA8CFFFFFA8FFA8FFA8FD81FFFF
%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where
{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse
{ userdict /AI11_PDFMark5 /cleartomark load put
userdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}
{ userdict /AI11_PDFMark5 /pdfmark load put
userdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse
[/NamespacePush AI11_PDFMark5
[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5
[{ai_metadata_stream_123}
currentfile 0 (%  &&end XMP packet marker&&)
/SubFileDecode filter AI11_ReadMetadata_PDFMark5
<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.2-c063 53.352624, 2008/07/30-18:05:41        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreatorTool>Adobe Illustrator CS4</xmp:CreatorTool>
         <xmp:CreateDate>2010-03-30T10:42:29+02:00</xmp:CreateDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>136</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAiAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXx1+a8Zj/MbzAp&#xA;BFbtmof8oBq7/POu0J/cx9zx/aA/fy97E8y3CfcPl0k+X9MJ6/VIP+Ta5xWX6z73usf0j3JhlbN8&#xA;qfn/ABlPzMvWJqJILdgPAekF/wCNc6jss/uR8Xle1h+/PuDznNi6x9p+Qf8AlBPLn/bLsv8AqHTO&#xA;N1X97L+sfve20v8AdQ/qj7k+yhvdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirs&#xA;VdirsVdirsVfIv51RNF+Z+uq1KmSF9vB7eNh+BzrOzjeCP46vI9pD9/L4fcGEZmuA+5tIjWLSrKJ&#xA;PspBEq18AgAzichuR973cBsEXkGT5e/5yLjRfzE5KKGSygZ/c1df1AZ03ZJ/c/EvL9sD99/mh5fm&#xA;zdU+0/IH/KCeXP8Atl2X/UOmcbqv72X9Y/e9rpf7qH9Ufcn2UOQw7zd+bPknytK1tf3hnv0+1Y2i&#xA;iWVfZt1RD7MwOZmDQ5cu4G3eXD1GuxYtpHfuDApv+coNMEhEGgTvH2Z7hEb/AIEI/wCvM4djS6y+&#xA;xwD21HpEppon/OSPk68kWLU7W60xmIBlIE8S/MpR/uTKsnZGQfSQW3H2xil9QMXqVhqFjqNnFe2M&#xA;8dzaTLyiniYMjD2IzWSiYmjsXaRkJCxuERkWSF1PVNO0uxlvtRuY7SzhFZJ5WCqPpPc9h3yUIGRo&#xA;CyxnMRFk0Hl2s/8AOSXk60kaPTbS61IrX97RYIj4ULkv96Zs8fZGQ/UQHV5O2MQ5AySlf+cobHkO&#xA;Xl6ULXci5Umny9MZb/Ix/nfY1fy3H+afmyHQf+chvI+p3ENtcxXenzzMqKZYxJHyY0A5RF26/wCT&#xA;lGXsrLEWKLkYu1sUzRsF6hmsdm7FXYq7FUl1fzjoOlu0U8/qXC/aghHNh7HooPsTgMgmkkb80tL5&#xA;0WznKdySgP3VP68jxp4UZZfmP5duGCymW1J7ypVfvQvh4gimTxyJJGskbBkcBkYbggioIySF2KpL&#xA;q3nDQdLcxT3HOdftQxDmw+dPhH0nAZBNJI35paUHolnOU7klAfuqf15HjTwphp35g+XbxxG8j2jt&#xA;sPXAC1/1lLKPpphEgimSKysoZSGVhVWG4IPcZJDeKuxV8l/np/5NPW/+jX/qDhzquzf7iPx+8vJd&#xA;p/4xL4fcGBZnuve2W/8Azk3qENvFCNAiYRoqA/WG34in++80p7HBN8X2O8HbRA+n7f2Kn/Q0Go/9&#xA;S/D/ANJLf9U8H8jD+d9if5bP837f2PNfzC87TectfGry2i2bCBIPRVzIKIWNakL/ADZstLpvBhw3&#xA;brdXqfGnxVWzGcyXEfafkD/lBPLn/bLsv+odM43Vf3sv6x+97XS/3UP6o+5hn55/mRc+WNKh0rSp&#xA;fT1jUlY+spo0FuNi6+DOfhU9qE9aZmdm6QZJcUvpH3uH2nrDijwx+qX2PmFmd3LMSzsasx3JJ7nO&#xA;leXJt6toH/OOnmzU9JS+u7uDTZplDw2cwdpAD09XiPgJHbc+OavL2tjjKgCXbYux8ko2Tw+Tz3zR&#xA;5Y1fyzrM2karEI7qGhDKeSOjfZdG2qp/sO+Z+HNHJHijyddnwSxS4Zc2d/kR59udD8zRaJcyk6Rq&#xA;7iL02O0dy20brXpzNEbx28Mwu09KJw4h9Ufuc/svVGE+A/TL731BnMvUPlz8+vOd9rHnC40ZJWGl&#xA;aQwijgBorThf3kjDuwJKjwA9znTdmacQxiX8Unl+1dQZ5OD+GP3vOtNsLnUdRtdPtVDXV5NHbwKT&#xA;QGSVgiip6bnNjOQiCTyDrYQMpCI5l7XD/wA4u3RtlafzFGlyVq0SWheMN4CQyoSPfh9GaY9si9o7&#xA;e/8AY7sdiGt5/Z+1IE/I/wA56F5s0UywLqGmPfW4mvLQNIscfqryaWMhWUBakn7Pvl/8pY545dJU&#xA;ebQOzMuPJHrHiHJ9OZzT0zsVdiqQ+d9Xm0vQZJYGKTzsII3HVSwJJHvxU0yMjskPLdE0qbV9Uhsk&#xA;cI0xJaRt6BQWY+/TIAWyL0OL8s/L6xcZHnkem78wN/YBcnwhjaWar+V9FL6XdFiP903FN/k6j/jX&#xA;AYJ4meW0Qht4oh0jRU/4EUybFiXn/wA0zafEum2T8LqdeU0o6pGdgB4M34ZGRSAwny15bu9dvWjj&#xA;b04I6NcTkV4g9AB3Y5AC2RLPI/y18urHxYzu1N3LgGvyApk+EMbYj5t8mS6IFuYJDPYu3Hk1OaMe&#xA;gamxr45ExpkCj/y88yzQXiaRcuWtp6i2J/Yk68R7N+vGJQQ9Kyxi7FXyh+fSqPzP1MgAFo7Yk+J+&#xA;roM6nsz+4Hx+95TtX+/Pwee5sHWvTLX/AJx6/MK4gWYCzjVwGUPOakEVB+FWzWy7Vwg9fk7UdkZj&#xA;3fNW/wChcvzC/nsf+R7/APVPI/yth80/yPm/o/j4MI83+UNZ8p6sNL1ZYxcmNZlMTc0KMSoINB3U&#xA;5m4M8cseKPJwdRp5YZcMuaSZe477T8gf8oJ5c/7Zdl/1DpnG6r+9l/WP3va6X+6h/VH3Pmj88NTk&#xA;v/zK1UFqx2npWsI8BHGpYf8AIxmOdH2bDhwjz3ea7TnxZz5bMQ0W+g0/WLG/uLcXcFpPHPJaluAl&#xA;WNwxQtR6BqUO2ZmSJlEgGrDh4piMgSLovapP+co5ChEfloK/Ytelh9wgX9eaYdi/0/s/a7r+W/6H&#xA;2/seb/mR+YUnnfUrW/lsEsZLaH0KI5k5LzLipKr05HNjpNL4MSLu3XazV+OQaqmKW88tvcRXER4y&#xA;wuskbeDKag/eMyiLFOJGRBsPum2nWe3inX7MqK699mFc4gijT3QNh8nfnX5eu9I/MHUpJIyLbUn+&#xA;uWsp6OJd3ofFZOQpnVdnZRPEO8bPJ9p4jDMT0luwWOSSKRZI2KSIQyOpIYMDUEEdCMzSLcAGnqXl&#xA;n/nIjznpipDqkcWs260BaX91PQdvVQcT82QnNZm7Kxy3j6Xa4e18kdper73snkj84fKHmyRLSGVr&#xA;HVG6WNzRS5/4qcfC/wAvte2afU6DJi3O8e8O503aGPLsNpdxZzmE5yQeZ/OFnoTRwtEbi6kXmIg3&#xA;EBa0qzUPUjbbImVJAV/Lfmaz123keFGimhIE0LGtOVaEEdQaYQbUhR876RNqmgyRQKXngYTxoOrF&#xA;QQQPfixpgkNlDyayvbzTr1Lm2cxXMJ+E06HoQQfuOVsmdad+aUZCrqNmQf2pYDUf8A1P+JZMTRws&#xA;q0nzJouq/DZ3KtLSphaqyD/Ynr9GSBtFJnhQ8Z843L3HmbUHY14SmMewjAT+GVHmzDP/AMubVIfL&#xA;UcoA5XMkkjHv8LemP+IZOPJiWT5JCWeZ7VLry/qELCv7h3X/AFoxzX8VwHkkPGLWdre6huE2aF1k&#xA;X5qQR+rKmb3rLmt2KvlH8+//ACZ2pf8AGO2/5MJnU9mf3A+P3vKdq/359weeZsHWvubR5RNpFjKo&#xA;IWS3icA9aMgOcTkFSPve7gbiEXkGT5p/5yX/AOU7sP8Atlxf9RFxnR9j/wB0f636A8z2z/ej+r+k&#xA;vJM2zqH2d+XExl8geXWIpTTrZKf6kSr/AAzjtWKyy/rF7XRn9zD+qPufM/5z2T2n5l62jA0llSdC&#xA;e4liR9vpNM6Ts+V4YvM9pRrPJimlWlveapaWlzcC0t7iaOKa7K8xEjsFaQrVahQa9cypyIiSBbh4&#xA;4iUgCat7d/0K3/383/Tj/wBnGaX+Wv6H2/sd5/In9P7P2ro/+cXIgT6nmRmHYLZhf1ztie2f6P2/&#xA;sSOxB1n9n7VT/oV6y/6mGT/pFX/qrg/lk/zftT/Ikf5x+T2uxtFs7G3tEYslvEkSsepCKFBP3Zpp&#xA;Ssku7iKFJb5q8n+X/NOnfUNZtRPGtTDKPhliY/tRuN1P4HvlmDUTxG4lqz6eGWNSFvEPMv8AzjTr&#xA;Nuzy+XdQjvodyttdfuZgOyhxWNz7njm6w9rxP1ivc6PN2NIfQb97ybXNA1nQr9tP1e0ks7tAGMUg&#xA;6qejKwqrL7qaZtceWMxcTYdTlxSxmpCigoZZYZUmhdo5Y2DxyKSGVlNQQR0IOTItrBINh9nfl9r0&#xA;+v8AkvSNWuP96bmAeuRtWSMmN2p/lMhOcfqsQhklEcgXtNLlOTHGR5kJb538nXurXUV9YFWmVPTk&#xA;hc8agEkFSdu+YsouSCi/JHla50SCeS7dTc3PEGNDVUVK037k8sYilJZPkkJNq/lDQtVYyXEHC4br&#xA;PEeDn5/st9IwGITbEdU/LC8iVpNOuVuANxDKOD/IMKqT86ZEwTxMNZbqzuip5wXMDe6ujqfwIyDJ&#xA;7D5S1iTVtDhuZf79axTHxZO/0ihy0G2BeW+aoTD5j1FCKVnd6f655/8AG2VnmyD0f8vpkk8rWyKd&#xA;4mlR/mZC/wCphk48mJZHkkIHXpUi0PUJH+ytvL/xAgYDyUPEIo2llSNN2dgqj3JoMqbHvuXNbsVf&#xA;Jn57OzfmlrIPRBaqvy+qxH9ZzquzB+4j8fvLyXah/fy+H3BgOZ7r32/5YkWTy1pMi/Zezt2X5GJT&#xA;nFZhUz7y9ziNwHuTLK2x8yf85JTGTz/brSnpadClfGsszf8AG2dJ2QP3R/rfqeY7ZP74f1f0l5Tm&#xA;1dS+xvyplMv5c+X2IpS0RP8AgKr/AAzkNaKzS972eiP7mPueff8AORPkG5voIfNenxGSSzj9HUo0&#xA;FW9EEsk1B14EkN7U7A5n9laoRPhnrydd2vpTIeJHpz9z56zoHnXq/kr/AJyD8w6FYRadqlour2kC&#xA;hIJTIYp1QbBS/Fw4A6VWvvmq1HZcJm4nhP2O303a04DhkOIfaym4/wCcoLIRf6P5fkeUjpJcqqg/&#xA;MRsTmMOxj1l9jlS7bj0j9qRaR+dHnbzT530Ow9VNO02a/txLa2i7ugkBZZJG5OQRUGlBTtl2Ts/F&#xA;ixSPM0ebRj7Sy5csY/TG+j6Oznno3z5r352+Z/LH5i65akJqWjx3PprYyHiYwihT6UgrwJpuCCPb&#xA;N/i7OhkwxPKVc3n83aU8WaQ5xvkymy/5yU8kSwBruzvraYD4owkci18FYOK/SozFl2RlB2ILlR7Y&#xA;xEbgh5P+b35lWnnfUrNrKza1stPSRYXm4+tIZSpYuFJCgcBRanv45tdBozhibNkup7Q1ozyFCgGB&#xA;xRSSypFEhklkYLGiirMzGgAA6knM4mnXgWaD7O/L/QZtA8maRpNx/vRbW6/WB1pLITJItf8AJZyM&#xA;4/VZRPJKQ6l7XS4jjxxieYDIMx292KpX5k1ltH0p75YxKUdFEZNK8mod9+2AmkhBab578uXsYL3A&#xA;tZafFFP8ND/rfZP34BILSKvPN3ly1jLvfwyUFQkLCVj7USuHiC08m13U/wBKavc34T01naqp3CqA&#xA;q1p3oN8rJZB6h5F02ax8uwrMCss7NMyHqA/2f+FAOTiNmJY3+ZWgyLcLrEK1icCO6p+yw2Vj7EbY&#xA;JBIKV+SfNaaLPJb3dTY3BDMVFTG/TlTuCOuCJpJD0ePzHoEkXqrqNvw7kyopHzBIIydhhTC/PHnS&#xA;0vLU6ZprmSNyDc3ABCkKahFrud+pyMpMgEs8haDJqGrpduv+iWTCR2PRpBuij6dzgiEkvWMsYOxV&#xA;4x+YP5Fa15p84ahrsGpW1tDdmH04XWRmAigjiNSBTcoc3Gl7SjixiJBNfrdNquy5ZchnxAX+pjv/&#xA;AELF5g/6vNp/wEmZH8sw/mlx/wCRJfzg970LT5NN0PTtOlkEstlbQ27yqOIZoowhYA1oDTNFllxS&#xA;J7y77HHhiB3BHZBm8k/M/wDJjWPOPmf9L22oW9rALeOBY5FcvVCxJPHb9rNto+0I4YcJBO7qdb2d&#xA;LNPiBrZiP/QsXmD/AKvNp/wEmZX8sw/mlxP5El/OD23yP5euPLvlTTtFuJ1uZrKMo0yAhTV2YUB3&#xA;2DUzTanKMmQyG1u602I48YiTdJ4yqylWAKkUIO4IOUN7ynzh/wA48+V9Ymku9HmbRrqQlmiRfUtm&#xA;Y77R1Up/sTQeGbTT9qzgKl6h9rqtR2Tjmbj6T9jz27/5xr88xPS3u9PuI67N6kqNT3DR0+4nNhHt&#xA;fEeYLrpdjZRyMVtv/wA42+fJJKS3Onwp3cyyN9wWI4ntfF3FR2Nl6mP4+D0HyH+QOneXdVtdZ1DU&#xA;pL3ULRhJDFEoihV6U+KvN3p/scwNT2ockTECgXYaXsqOOQkTZD1nNU7Z4954/wCcerbXNWvNY0vV&#xA;Wtru9leea3uUEkRdzU8XTiyiviGzb6btUwiIyFgOn1XZIySMoyolgs//ADjd5+jkKx3GnzJ2dZpB&#xA;+DRDM0dr4u4uAexsvfH8fBXsf+cafOcrj65f2FtHXcq0sr/MKI1X/hsEu2MY5AllDsbIeZAeo+Q/&#xA;yT8r+VLhL+Rm1XVYyDFdTqFSIj9qKIFgre5JPhTNZqe0Z5RX0xdrpezceI39Unoea92DsVdiqX67&#xA;ottrGntZXDvGhYOHjIBDL06g1GAi1BYRdflZfqx+q3sUi9vVVoz/AMLzyPAy4lFPyu1wt8dzbKvc&#xA;q0jH7ii4OBeJkOhfl3plhKtxdv8AXZ03VWXjED/q78vpP0ZIRQSyzJIWyRxyRtHIoeNwVZGFQQeo&#xA;IOKsN1b8stPuHaXT5zaMd/RYc4/o3DL+OQMWVpK35Xa5y+G5tSviWkB+7gcHAvEmOnflaiyB9QvO&#xA;aDrFCtK/7Nv6YRBeJm1lY2llbJbWsSwwIKKi/rPiffJsVfFXYq7FXYq7FXYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FVk88VvBJPM3CKJS&#xA;8jnsqipO3tiqkmo2T2H6QWUGzCGX1qGnBQSTSle2NqqW1xDc28dxA3OGVQ8bioqp6HfFVTFXYqpr&#xA;dWzXDW6yobhAGeIMCyg9CR1FcVVMVdiqUXPm7y5bXElvPeqk0TFJEKuaMNiNlwcQTSZ21xDc28dx&#xA;A3OGVQ8bioqp6HfChUxV2KoHRdXg1ay+twRvHHzZAsgAaqmh6Fh+OAG1R2FVO5uYLaB57iRYoYxy&#xA;eRjQAYqgNP8AM2iahcC3s7n1JiCwQpItQOpBZVBwAppM8KFk00cMMk0rcYolLux6BVFSfuxVTsb2&#xA;C+tI7q35GGUcoyylSR40O+IVWZuKlqE0FaDrtiqhp96l7aR3KRyQrJWkcy8HHFiu69q0xCqlzcJb&#xA;20tw4JSFGkYL1ooqaVp4YqgIdft5bSwukgnZNQYLGFTlw5GlZKGij3wWmkzwoQ2o6jaadaNdXT8I&#xA;UIBIBYksaAADc9cSVRCMGRWAIDAGhFCK+IOKt4q7FXYq7FXYq7FUv8w/8cDU/wDmEn/5NtgPJQxa&#xA;2TzMvko8Hsjp/wBSkJBWX1vTKEsKg8eVMjvTLqivryw+WdDtFkuVurqNPQisyqyScE+JS77KvxAk&#xA;49EKOnapq6aL5giuJZRcaeCYWldXlSqEgF1ADUIxBSjL/UL+LTvLLJcNzup7RLlwf7wOoLV/1sJP&#xA;JCnp1i589am/1qYemkUhXkvxBxXg3w/YXoMRzXolVtqXmfVbaTUbI3n1n1m9FIzCLVVU/wB2yMQx&#xA;NOpOCyln8LSNCjSLxkKguvgxG4ybFh2jfp4avrp0xbQobxvUNyZA1d6U4A7ZAWlH6xdancaxpmir&#xA;cmy+sRNNdzwfaYoPsRsw23BwlVmttqOnW2n6Zb30rSX90IWvZiGlSNqbA0Ar74lQvsZb7TvNKaS1&#xA;5LeWlxamcfWCGkR1YivIAbHjj1VJoNVu9O8kQPaMUmnvHg9RQCyBpHJI5bVotN8F7J6pvoK+YItX&#xA;KSpdnTJIyWN60Tukg6cWRjsfCmEWgpvr+kjVtJnsPUMRl4lXpWhVgwqPDbCRaAlOnaxq1nqlro+t&#xA;28RlmVhaXsB+FuC7gqRUbD2+WAFKWW/6Uu9O1nUW1a5gewubhbeMMvpUiAYBgRUg9MCV+qa5qN7a&#xA;aHaFJB+lImku1g4CSQKteKGQ8QG64krSrbX3mDSdG1aS5il9G2VW017n0y4DfCVb0yQQm2NkITPS&#xA;dNvorWO/m1S4uZJYC8kblTFydeQKAD4aYQFSuz1qVvJ+nyXVzcte3srxxm24+vI3quAoZ9lFAN8F&#xA;7L1WaVd6pw8x6fetMRb2/OKO4dZZE9SJjQumxqKYhW7S5u4NE8rLBM0Uc1xHHOqmnNSSaH22x7la&#xA;1a71Sz1e6l1We+t9OLqLK5sypgRf+LVpXEpXa5d3uoeYJdNjW4e3tYUmiS0MSv6jAESMZCNl5bUx&#xA;PNAavdX8yWXly1jug8WoXF2LX1v3fqGI1IYb8A5G25xs0lH+Xhr8Wqyx3CXR0t4+SNetG8iSgjYM&#xA;hNQRhFoLJckh2KuxV2KuxVSuraK6tZraWpinRo5KbHi4Kmh+RxVQj0mzj0k6Wob6oYmgpX4uDgg7&#xA;/TgpULceWNMns7O2rLH9Q2tJ45CsqdjRh8saTa6x8uabZxXcSiSVb4UujM5cvsQak778saW0ND5N&#xA;0mKW3k9S4kFpIslrHJMzJGUNQFU7U2wcK2jpNDsW1MamPUjuqAOUkZVcL9kOoNDTDSLQcvk/SXuJ&#xA;ZonuLZbgk3EMEzRxyE9eSjx9seFNp0qhVCjYAUA9hhQksvlHTHuZ7lZbmKS4cySiKZkBY+y4OFNo&#xA;i88u6feW1tDMZedp/vPdLIwmQ9K+p13p3xpbWt5a02TT/qU3qzr6nrevJIzTCWlA4fqCMaW1+l+X&#xA;7HTp5bmNpZ7qYcZLmdzJIVG/Gp7YgLa2Py1pK6W+mGIyWkjGQq5JIZjWoYUIxpbb0zy/a6fN6yT3&#xA;E7KpjjE8rSKikgkKp2HTEBbRWo6fb39q1tPyCMQwZGKMCpqCGHuMJCEFp/lqws7z66ZJ7u7VSkc9&#xA;1IZWRT1C16YAE2k2heV4rj9INqkc4Rr6WSO2Z3SF1PEq5QEBvngAUlP9U0LTdSgiiuIyvoGtvJEe&#xA;Dxnp8BHTphIRbVnoVlbQXELtLdLdALO1zI0rMoBAWp7b40tqOn+V9PsZA0UtwyIGWGCSVmjjDih4&#xA;KemxxpNtP5V0ltLt9OAkSG0cyW0iuRKjli1Q492xpbX2flrTrX62VaaV75BHcySyF3YAFftHvQ40&#xA;trv8O6b6FhCA4TTXElt8W/JTX4vHGltZc+WNOup3kneeSKR/UktDM/oMwINTGDTqMaW12p+XNP1C&#xA;5S7Yy293GvBbm3kMT8fCoxIW1zeXtMk0v9GzK88HIuWkdmk5kk8+fXlvjS27TNBtdPmMyTXE8nD0&#xA;0NxK0nBCQeKg7AVAxAW0ywodirsVdirsVdirsVdiqVal5l0qxuRZyu8l2RX0IEaRwD3PEbYCU0l/&#xA;lnWEg8o2+o6pdM3NpOUshZ2J9VlVR1J6bDADspTTTNf0/UZpbeEvHcwgNJbzI0cgU9+LdsIKKUvN&#xA;OrXGlaNNeW6B5VKqpYEqvJqcmp4Yk0kLNE/S8jLcS6nBqNlIh3ijCEPtQAqTUfPfEKURH5g0yTTp&#xA;9RWRvqtszJM3FqgrQH4aV742tKNxe28uq6VwvZIvrSPJDaqvwzLw51cnpQYq5PNWkyXhtYjLKRKI&#xA;GmSJ2iWRjxClwKdcbWnT+adJhvJbSssskBC3DRRPIkZP87KNsbWlXU/MOm6dKIZi8k/AyNFCjSMs&#xA;Y6u3EfCvzxJWkXY31rfWsd1ayCWCUVRx9x2O4ocKENqmu6dpskUU7M1xP/c28SNJI3uFUYCVpuy1&#xA;zS7yylvIpgIIKicuChjKirBw1CKY2tKWm+ZNM1Gf0rb1d1LpI8bojqpoSrMKYgppZaeatIu7tba3&#xA;aSTmxRJ1icxMw3ID0pja0t0bUbNbC9uX1B7mC3uJBLPOvD0yoWqCoGwrtiCqVTeZo9Q8w6LHp8k6&#xA;2rvN61VeOOUcAV605UwXutJvfeatHsp5IZXkYwEC4kjjd0iLdA7KKDDa0qX/AJk0ix+revMf9LXn&#xA;bmNGk5rQGo4g9aimJK0ojzVpkunXl5AXZrLaaFkcOrtsoZKcqE42tLdG8yxXmi/pC5R42jUGYJFJ&#xA;xqxIUR7MX+jEFaRGna9p+pyTW0BkiuYlq8UqNG4B2DUbEG1pLvLWsxweUbbUdUuWbkZOcshZ2J9V&#xA;lVR1J6bDADspTPTNf0/UZpbeEvHcwgNJbzI0cgU9+LdsIKKTHCrsVdirsVdirsVdirsVYpE9/o3m&#xA;HU5X064vIdRZHgntk504gjg9SOO575HkUpb+hNWfyXpcS28q3VhcmaW2FY5SvqOap35UbbBWyb3T&#xA;fy9bWsmqG7W11KOdYCjT6iW6FgfTXmST3PhhCCnWrXP1ezZzaPeoSFkgiUOxU9TxP2vlhKGM6Jp7&#xA;f4nW80ywuNN00RMLxJ1MSyOQeISMk9CQfDbIgbpQzrqdvoOp6IdMupLmaWZoZY4+ULI7Ahudfwx6&#xA;JTMWF7+mPLMvoP6drbSJcPQ0RjBxAbw32w9yECLS9g1RG0OG/tGlueV5BOv+h8C3xuCajf23+WD3&#xA;Jdqtpex6lcTaHBf2upSTD1BxBs5d95GLHj0/2sSq7VtPvbbzLcX0sV9LZ3kcYD6azh0dFClWVCDT&#xA;av04kboZB5btbe20tUt7ea2jZ3cRXP8Ae7t1bwrSuSClLtTjurDzVHrH1Sa8tHtfqx+rr6kkb8+V&#xA;eA3oRgPNUBHoep6hpGvyiBrSXVZFktraT4XpG3L4vAv03wUtpnZ39xqGnNpY066sZWtniaWWPhEj&#xA;cOA4sftb9KDCqn5avruzs7TSJ9Luop4f3Ukoj/cUqTz9StN/14gqUsfRdUufLGrW6W7JO2oSXEUT&#xA;gqZY6q3enXt8sFbJRL3N7qmvaHOumXVpFZmb12mj4KpdAAB7fD1woQTaXPZ6jqcN9b6lNb3kzzRS&#xA;WDOY3WTqsiqQK9t8FJTV9Pmi1Hyu1tbSrbWsc4lV/iMQkiUBXYdx0w1yQq21leDXPMZ9FhFdxQCC&#xA;QiiuywlSATt1O+PeqXI2uxeT4bS1trq3u7V0jugq0kaKpLmE717bjBvSqvlu0aPzFcXUdpeQ2r2g&#xA;X1b0OXeQOCd2LHp2wjmpQP6E1Z/JWmRLbyrdWFyZ5bYExyFRI5qnQ8qNtgrZN7pt5etrV9UN2trq&#xA;STrAUM+oluhYH015kk+PhhCCybJIdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdir&#xA;sVdirsVdirsVdirsVdirsVdirsVdirsVdirsVUpru1hkiilmSOWclYUZgGcjqFB3PXFVRmVVLMQq&#xA;qKsx2AA7nFVlvcQXEKzQSLLC9eEiEMpoabEYqqYq7FWndERndgqKCzMxoABuSScVWwTwzxLNA6yR&#xA;OKpIpqpHsRiq/FXYqpTXdrA8Uc0qRyTNxhRmALt4KD1xVVxV2KqRurYXItTKn1ll9QQ8hz4Vpy49&#xA;aV74qq4q7FXYq7FXYq7FXYq7FXYqpT3VtbmMTypEZXEcQdgCztsFWvUnFVXFXYq7FXYqsS4geV4k&#xA;kRpY6epGGBZa9OQG4xVfirzryhBoNxaWou7S6mvmkI+sL6/pV5/DVlYJt3ysUyKca75xutLu5APq&#xA;c0MbhWtlkdrnj3JoOC/I5IyQAmeqa1frqsWkaXBHLeNEbiWSdmWNI68RXiCxJOElUp8xS6r9b8uv&#xA;LBEdRE8v7lXPpFtgPiIrSm/TIlQjbXW7+5/S2majbpDeWkLPyhYtGyOpoRXfDapNouu6xpXl3TZ3&#xA;s4n0ot6TOHJm+Jz8XGgUb9sANBNMg1DW9ROsjSNLgjkuFiE9xNOzLGiE0Aou5O+SJRShF5vCaPf3&#xA;d7B6d1pspgngQ1VpKhV4sezE4OJaXvP5il0u+bU7e3hgezldBE7GRW47I4YU6E9Md1SfR9d1jTNF&#xA;0mSazibS5SsAkVyZhyJoxGw8dsAKaTLUfM99Hrs2lWwtYTCit6l5IyCUuAeMdPnTCTuikVqOt6iu&#xA;oW+lafbxyahLD9YmaViIokrTfiCx+LbCStJb5gfVPW0Caa3iOpLcuBCjkRk0oPiI6EAHpgKhMdL1&#xA;zU5bu/0/ULaOK8s0EqNExaJ0bp1+LEFaUJPNF2vlOLWlgQzyED0anj8UhQb9cb2WnS/+TCh/7Zh/&#xA;5PNj1Xolsv5gy8GvIktWs1k4C2aUi7ZAacwv2d/DBxJpmiOksSuu6SKCPcMK5Ni8/heVdCuNAMjC&#xA;Y6qtkGqeXps4fkD/ALA5DyZKllNLc6NpGjOxaZdReC5NTUx27GRx/wACwxVHah54ljuLwWgtfRsX&#xA;MbR3EpSaYp9v0lG1B2r1wmSKRGo+cJEfTUtEhhXUIRP9YvGKRID+ySvfEyWlLzBfeYCuiGIwxvPd&#xA;Rh/Slf03fkSqkgbxMoqf1YklQraj5n1G31SPS1Fpb3AgWWWa6d1iZ26pEQB37nElaRepa5qMM9jp&#xA;1pbxy6pdx+o4Zj6MaqPiJYbkVrTElaSvzPLq31fRXuoIvr6alHwiic+m5BPH4mFV5e+AqEba6/rP&#xA;16+028tIlvoLZrq29JmaN1BoFNfi6mmG1pCXfne4j0jT723tkmlukkknjqQEWEgOfv6Y8S0mc3mR&#xA;U1C4RUDWNpZi8nnFeVWqVQDpuu+G1pKbTz1O9zZGdbU217IsfpQyl54S5opkFKH3pkeJaTKxu3l1&#xA;jXYrO1gju7b0AJmqvql1J/eMoJ2ptQYQreia1q19ql3aTwwCCy+CW4gZ2Uyn9heQX7P7WIKlFeWd&#xA;Il0jSI7GWRZWjZzzUEAhmLd/nhApSkU3k7WPqN7pkN1bCxu5TMZXjczn4w4VmBptx65HhW021PRd&#xA;QbVotX0yeOK8WL6vNFOrNE6V5fskMKHJEK1PoupXc+k3N3cRtPYyySz8FKqwfoqD2A74KVf+gpf0&#xA;vqV96q8L63WBEoaqVXjU4aW0LJ5WuW8rW+jLOnqwsrNKQeJ4uX27jrgrZbRGoaLqQ1f9LaVNElzJ&#xA;D6E8VwrNGyg1DDiQQRhIVDxeUA+i31leXHqXeoyGe4uVFAJOXJeK+AIwcK2iILDzJLbz22oXVu8T&#xA;wSQo0SMHZ3HEPIWNNv8AJw0VUJ/LE8nl/T9LE6CSzljkaShowjJJAH04K2W1+v6FqeqtLAXtPqcg&#xA;AjklhZ54thXgQQNzU4kKC1deXLyG6s77SbhI7u0t1tGW4UsksS9OXEhq1xpbVLjR9Vu5dLnuriEz&#xA;2U7TT8EYKQdgqVJOw8caVER6PKuvXeotIDBc26wekB8QKnrXDW6pHL5S8wNow0Vb63FjG3KKT039&#xA;Y0fmAxrQUPhg4Stp4+kSN5lTV/UX01tfq3pUPKvMvyr4b4a3VKrPy1rmmrJaadc2psWZmia4iZ5Y&#xA;g3ZaHi1PfBS2ykCmw6ZJDHT5Wk/xV+mBMv1UsJWtqGvqLEYw1fprka3Tbdh5WltvMk+qNMrWztLL&#xA;BAAapLPxDt9IXEDdbU/8O6vZX13NpU1sbe8kMzw3UbMUdvtFCtMaW0ZqWmavcW8MCNZzxCIJOt1C&#xA;WBkAoZECmg+WEhUIfKU0Oj6dZ2l0BcabOLmOSRCUdqklSoaoHxdjg4VtV1jRtY1KI28j2TwyRqrv&#xA;JCzPHJSjvF8Xj0qdsSFW3Hli6h/RtxplyqXunQ/Vw04LJLHShDUNR9GNLa+70XVr9NPe9uIfrFpe&#xA;JdOIlYJwT9hakn6TjS2ik0iRfMr6v6i+m1r9W9Kh5V5h+VfDbDW6pXpvkw21xf8AqzLJa3EU0FrE&#xA;Af3cczFmrXv06YBFbV9F8qtaaZe2l9OLiW9URSSoCKRJGI0UV/lGIC21pWi+YLH6vatc2kljbstJ&#xA;fSb6wY1Oy7niNtq4gFbV49Ev7e71q7tp0WbUhF9XJB/dmNSpJ8ftVGGltb5c0fV9KiS1lltntF5M&#xA;7RpIJndt+TMzEH7sAFKX/9k=</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>20.999993</stDim:w>
            <stDim:h>14.799992</stDim:h>
            <stDim:unit>Centimeters</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Groupe de nuances par défaut</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 J=0 N=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 J=0 N=100</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>100.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=10 J=100 N=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>10.000002</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=50 J=0 N=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>50.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=50 J=100 N=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>50.000000</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=100 M=55 J=100 N=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>100.000000</xmpG:cyan>
                           <xmpG:magenta>55.000000</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=100 M=90 J=10 N=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>100.000000</xmpG:cyan>
                           <xmpG:magenta>90.000000</xmpG:magenta>
                           <xmpG:yellow>10.000002</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=15 M=100 J=100 N=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>14.999998</xmpG:cyan>
                           <xmpG:magenta>100.000000</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=45 M=90 J=0 N=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>45.000000</xmpG:cyan>
                           <xmpG:magenta>90.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=50 M=40 J=30 N=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>50.000000</xmpG:cyan>
                           <xmpG:magenta>39.999996</xmpG:magenta>
                           <xmpG:yellow>30.000002</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=50 M=85 J=100 N=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>50.000000</xmpG:cyan>
                           <xmpG:magenta>85.000000</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=75 M=5 J=100 N=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>75.000000</xmpG:cyan>
                           <xmpG:magenta>5.000001</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=75 M=90 J=0 N=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>75.000000</xmpG:cyan>
                           <xmpG:magenta>90.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=80 M=5 J=0 N=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>80.000000</xmpG:cyan>
                           <xmpG:magenta>5.000001</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>PANTONE 3015 CVU</xmpG:swatchName>
                           <xmpG:type>SPOT</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:cyan>100.000000</xmpG:cyan>
                           <xmpG:magenta>22.999998</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>18.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>PANTONE Warm Gray 7 CVU</xmpG:swatchName>
                           <xmpG:type>SPOT</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>6.000000</xmpG:magenta>
                           <xmpG:yellow>11.000000</xmpG:yellow>
                           <xmpG:black>38.000000</xmpG:black>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>
%  &&end XMP packet marker&&
[{ai_metadata_stream_123}
<</Type /Metadata /Subtype /XML>>
/PUT AI11_PDFMark5
[/Document
1 dict begin /Metadata {ai_metadata_stream_123} def
currentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -50.8555 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 50.8555 li
98.1621 50.8555 li
98.1621 0 li
cp
clp
[1 0 0 1 0 0 ]ct
21.9316 31.5918 mo
21.5654 31.5918 21.5381 31.5918 21.1504 31.6113 cv
21.1094 31.5659 li
21.1299 30.8359 21.1504 30.0479 21.1436 29.3765 cv
20.9844 29.3765 20.8115 29.3701 20.4932 29.3701 cv
19.9531 29.3701 19.3584 29.3765 18.8818 29.3833 cv
18.874 30.6211 18.8955 31.0576 18.9297 31.5464 cv
18.8955 31.5918 li
18.5146 31.5918 18.4941 31.5918 18.1133 31.6113 cv
18.0723 31.5659 li
18.0996 30.9272 18.1064 30.5947 18.1064 28.6206 cv
18.1064 27.7412 18.0859 27.4282 18.0654 27.0371 cv
18.1064 26.9917 li
18.46 26.9849 18.542 26.9849 18.874 26.9722 cv
18.9092 27.0176 li
18.9023 27.4023 18.8887 27.9365 18.8887 28.8291 cv
19.248 28.8359 19.4414 28.8423 19.8916 28.8423 cv
20.5273 28.8423 20.8184 28.8359 21.1436 28.8223 cv
21.1299 27.5845 21.1299 27.4414 21.0947 27.0371 cv
21.1299 26.9917 li
21.5029 26.9849 21.5586 26.9849 21.8975 26.9722 cv
21.9316 27.0176 li
21.9111 27.6499 21.9043 28.0605 21.9043 29.2002 cv
21.9043 30.4648 21.9316 30.9468 21.9736 31.5464 cv
21.9316 31.5918 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 .06 .11 .38 cmyk
f
25.8955 29.6045 mo
25.8955 29.3311 25.8955 28.9727 25.8477 28.79 cv
25.7021 28.2817 25.2041 28.1191 24.6924 28.1191 cv
24.2842 28.1191 23.8828 28.2036 23.4951 28.334 cv
23.4541 28.373 li
23.4473 28.5098 23.4473 28.5488 23.4326 28.8486 cv
23.4883 28.8809 li
23.7793 28.7637 24.0898 28.6338 24.54 28.6338 cv
24.8857 28.6338 25.0449 28.7578 25.1143 28.875 cv
25.1768 28.9795 25.1768 29.1025 25.1768 29.2788 cv
25.0586 29.292 li
23.8135 29.4287 23.0391 29.709 23.0391 30.582 cv
23.0391 31.2271 23.5234 31.6699 24.2148 31.6699 cv
24.7402 31.6699 25.0518 31.4355 25.1836 31.3379 cv
25.1768 31.5723 li
25.2041 31.6113 li
25.5225 31.5986 25.5771 31.5918 25.9023 31.5859 cv
25.9375 31.5527 li
25.9023 31.1289 25.8955 31.0576 25.8955 30.25 cv
25.8955 29.6045 li
cp
25.1836 29.7612 mo
25.1836 30.8491 li
25.1074 30.9141 24.8584 31.1357 24.4287 31.1357 cv
23.7725 31.1357 23.7725 30.5757 23.7725 30.543 cv
23.7725 29.9629 24.4219 29.8721 25.1211 29.7739 cv
25.1836 29.7612 li
cp
f
30.2256 28.2236 mo
30.2119 28.7183 30.2051 29.1807 30.2051 29.709 cv
30.2051 30.5103 30.2256 30.9922 30.2402 31.2725 cv
30.2402 31.3643 30.2471 31.4551 30.2539 31.5464 cv
30.2256 31.5859 li
29.8945 31.5918 29.8389 31.5986 29.5205 31.6113 cv
29.4785 31.5723 li
29.4863 31.2988 li
29.334 31.4028 28.9668 31.6699 28.3994 31.6699 cv
28.1299 31.6699 27.833 31.6113 27.6113 31.4482 cv
27.1689 31.1099 27.1689 30.5557 27.1611 30.0479 cv
27.1611 29.6436 li
27.1475 28.7119 27.1475 28.6074 27.127 28.2559 cv
27.1611 28.21 li
27.4863 28.2036 27.5488 28.2036 27.874 28.1777 cv
27.916 28.2236 li
27.8877 29.6504 li
27.8877 29.8262 27.8809 29.9565 27.8877 30.269 cv
27.8945 30.543 27.9092 31.1289 28.6074 31.1289 cv
29.0156 31.1289 29.3057 30.9141 29.4717 30.7905 cv
29.4785 30.4385 29.4785 30.1387 29.4785 29.7612 cv
29.4785 28.855 29.4717 28.6729 29.4307 28.249 cv
29.4717 28.2036 li
29.79 28.1973 29.8662 28.1973 30.1846 28.1777 cv
30.2256 28.2236 li
cp
f
33.0967 31.0771 mo
33.0762 31.292 33.0762 31.3379 33.0693 31.5269 cv
33.0342 31.5659 li
32.8896 31.5986 32.7715 31.6245 32.5156 31.6245 cv
32.3496 31.6245 31.9141 31.6245 31.6992 31.2861 cv
31.5752 31.0967 31.5752 30.9404 31.5752 30.1719 cv
31.5889 28.7383 li
31.3467 28.7383 31.3398 28.7441 31.0908 28.751 cv
31.0635 28.7119 li
31.0771 28.5034 31.0771 28.4512 31.0771 28.2427 cv
31.1182 28.2036 li
31.2705 28.2036 31.3604 28.21 31.5889 28.2036 cv
31.582 28.0664 31.582 27.9238 31.582 27.7866 cv
31.5752 27.6626 31.5684 27.5391 31.5615 27.415 cv
31.5957 27.3696 li
31.9072 27.2979 31.9834 27.2783 32.3018 27.1875 cv
32.3496 27.2197 li
32.3291 27.6499 32.3223 27.7344 32.3223 28.21 cv
32.6123 28.2036 32.6953 28.2036 33.0898 28.1904 cv
33.125 28.2295 li
33.1104 28.3989 33.1035 28.4707 33.1035 28.6924 cv
33.0693 28.7314 li
32.7236 28.7246 32.6816 28.7183 32.3154 28.7183 cv
32.3018 29.9307 li
32.3086 30.0088 32.3086 30.3799 32.3086 30.4717 cv
32.3086 30.9468 32.3701 31.0967 32.7168 31.0967 cv
32.8613 31.0967 32.9727 31.0645 33.0488 31.0381 cv
33.0967 31.0771 li
cp
f
36.8047 30.7646 mo
36.7148 30.8359 36.5625 30.9536 36.3066 31.0508 cv
36.1133 31.1162 35.9053 31.1489 35.7051 31.1489 cv
35.4902 31.1489 35.0957 31.1162 34.8125 30.7969 cv
34.5771 30.5303 34.5566 30.2104 34.5498 29.9824 cv
35.6836 29.9761 35.8711 29.9761 36.9502 29.9824 cv
36.998 29.9434 li
37.0049 29.6567 37.0195 29.0117 36.625 28.5684 cv
36.417 28.334 36.0371 28.1191 35.4902 28.1191 cv
34.584 28.1191 33.8096 28.7119 33.8096 29.9238 cv
33.8096 31.0576 34.5215 31.6699 35.6563 31.6699 cv
36.2715 31.6699 36.6455 31.4814 36.7627 31.4229 cv
36.8047 31.377 li
36.8184 31.123 36.8252 31.0576 36.8594 30.7969 cv
36.8047 30.7646 li
cp
36.2861 29.4805 mo
35.6494 29.4873 35.3867 29.4941 34.5498 29.4873 cv
34.6191 28.8359 35.0752 28.5879 35.4629 28.5879 cv
35.7734 28.5879 36.0781 28.7383 36.2168 29.0962 cv
36.2715 29.2461 36.2783 29.3896 36.2861 29.4805 cv
cp
f
43.4033 31.0576 mo
43.3828 31.2793 43.3828 31.3247 43.3691 31.5464 cv
43.3203 31.5918 li
41.9717 31.5918 41.7578 31.5986 40.4434 31.6113 cv
40.4082 31.5659 li
40.4297 31.0508 40.4502 30.6992 40.4502 29.5068 cv
40.4502 28.4121 40.4502 27.7866 40.4014 27.0371 cv
40.4434 26.9917 li
41.8057 26.9849 42.0752 26.9849 43.3486 26.9722 cv
43.3896 27.0176 li
43.3691 27.2134 43.3555 27.2915 43.3418 27.5259 cv
43.2998 27.5713 li
42.4072 27.5459 42.1104 27.5459 41.2314 27.5391 cv
41.2109 28.1387 41.2109 28.3276 41.2109 28.9268 cv
42.0615 28.9336 42.3252 28.9268 43.1689 28.9141 cv
43.2031 28.959 li
43.1758 29.1875 43.1758 29.2529 43.1689 29.4614 cv
43.127 29.5068 li
42.3252 29.4873 42.1514 29.4873 41.2109 29.4873 cv
41.1973 30.2432 41.2041 30.4258 41.2109 31.0449 cv
42.2559 31.0449 42.4697 31.0449 43.3623 31.0122 cv
43.4033 31.0576 li
cp
f
47.042 30.8164 mo
47.0146 31.0967 47.0078 31.1289 46.9873 31.3965 cv
46.9385 31.4424 li
46.7383 31.5332 46.4678 31.6641 45.9844 31.6641 cv
44.9395 31.6641 44.2617 30.9536 44.2617 29.9365 cv
44.2617 28.9014 44.9258 28.1191 45.998 28.1191 cv
46.4473 28.1191 46.7656 28.2559 46.9453 28.3276 cv
46.9727 28.373 li
46.9453 28.6074 46.9385 28.6924 46.9248 28.8877 cv
46.8691 28.9141 li
46.6416 28.7578 46.3779 28.6602 46.1016 28.6602 cv
45.5273 28.6602 45.0225 29.0767 45.0225 29.9106 cv
45.0225 30.7969 45.5557 31.1162 46.0947 31.1162 cv
46.5654 31.1162 46.8555 30.8882 46.9873 30.7905 cv
47.042 30.8164 li
cp
f
51.165 29.8457 mo
51.1514 29.3896 51.0605 28.9336 50.7432 28.5879 cv
50.4385 28.2622 49.9746 28.1191 49.5049 28.1191 cv
48.8135 28.1191 48.4121 28.3857 48.2178 28.5752 cv
47.7549 29.0117 47.7412 29.6504 47.7412 29.8979 cv
47.7412 30.1128 47.748 30.7773 48.2178 31.2271 cv
48.4395 31.4424 48.834 31.6641 49.457 31.6641 cv
49.9404 31.6641 50.3486 31.5527 50.6533 31.2661 cv
50.8818 31.0508 51.0273 30.7969 51.1025 30.4775 cv
51.1514 30.2822 51.165 30.0674 51.165 29.8457 cv
cp
50.4111 29.8721 mo
50.418 30.0088 50.4111 30.4453 50.252 30.7383 cv
50.0518 31.0967 49.7188 31.1748 49.4629 31.1748 cv
49.3252 31.1748 49.1797 31.1489 49.0557 31.0903 cv
48.5088 30.8291 48.502 30.1719 48.502 29.9106 cv
48.502 29.6367 48.5225 29.2588 48.709 28.9922 cv
48.9512 28.627 49.3389 28.6143 49.4707 28.6143 cv
49.8574 28.6143 50.0791 28.7837 50.2109 28.9854 cv
50.3838 29.2725 50.4111 29.709 50.4111 29.8721 cv
cp
f
53.0117 31.5859 mo
52.6797 31.5918 52.6104 31.5986 52.2852 31.6113 cv
52.251 31.5659 li
52.2646 31.1035 52.2852 30.5166 52.2852 29.2656 cv
52.2852 28.3662 52.2852 27.4023 52.2158 26.5684 cv
52.251 26.5288 li
52.5898 26.4771 52.6592 26.4639 53.0049 26.3921 cv
53.0459 26.4375 li
52.998 27.2915 52.998 28.1514 52.998 29.0049 cv
52.998 30.4321 53.0186 30.9272 53.0537 31.5464 cv
53.0117 31.5859 li
cp
f
57.1211 30.7646 mo
57.0313 30.8359 56.8789 30.9536 56.623 31.0508 cv
56.4297 31.1162 56.2217 31.1489 56.0215 31.1489 cv
55.8066 31.1489 55.4131 31.1162 55.1279 30.7969 cv
54.8936 30.5303 54.8721 30.2104 54.8662 29.9824 cv
56 29.9761 56.1865 29.9761 57.2666 29.9824 cv
57.3145 29.9434 li
57.3213 29.6567 57.335 29.0117 56.9414 28.5684 cv
56.7334 28.334 56.3525 28.1191 55.8066 28.1191 cv
54.9004 28.1191 54.126 28.7119 54.126 29.9238 cv
54.126 31.0576 54.8379 31.6699 55.9727 31.6699 cv
56.5889 31.6699 56.9619 31.4814 57.0791 31.4229 cv
57.1211 31.377 li
57.1348 31.123 57.1416 31.0576 57.1758 30.7969 cv
57.1211 30.7646 li
cp
56.6016 29.4805 mo
55.9658 29.4873 55.7021 29.4941 54.8662 29.4873 cv
54.9346 28.8359 55.3916 28.5879 55.7793 28.5879 cv
56.0898 28.5879 56.3945 28.7383 56.5332 29.0962 cv
56.5889 29.2461 56.5957 29.3896 56.6016 29.4805 cv
cp
f
62.5098 28.9854 mo
63.0146 29.1943 63.6855 29.4678 63.6855 30.3018 cv
63.6855 31.0317 63.1113 31.6895 61.9072 31.6895 cv
61.1738 31.6895 60.7041 31.4814 60.5381 31.4028 cv
60.5107 31.3574 li
60.5381 31.1289 60.5449 31.0054 60.5654 30.7578 cv
60.6348 30.7319 li
60.8076 30.8428 61.209 31.1162 61.8525 31.1162 cv
62.5654 31.1162 62.8623 30.771 62.8623 30.3799 cv
62.8623 29.9238 62.4609 29.748 62.0117 29.585 cv
61.666 29.4414 li
61.1738 29.2266 60.5176 28.9463 60.5176 28.1514 cv
60.5176 27.9102 60.5869 27.6626 60.7314 27.4668 cv
61.0498 27.0371 61.624 26.8936 62.1846 26.8936 cv
62.7314 26.8936 63.0625 26.9917 63.4297 27.1025 cv
63.4639 27.1543 li
63.4365 27.4023 63.4297 27.4932 63.4092 27.728 cv
63.3535 27.7539 li
63.0566 27.6104 62.7314 27.4541 62.2119 27.4541 cv
61.6377 27.4541 61.2783 27.708 61.2783 28.0928 cv
61.2783 28.3857 61.4863 28.5225 61.6309 28.6074 cv
61.7207 28.6602 61.748 28.6729 62.1631 28.8423 cv
62.5098 28.9854 li
cp
f
65.5117 28.1973 mo
65.4629 28.1582 li
65.1523 28.2168 65.0752 28.2363 64.7373 28.2881 cv
64.7021 28.3276 li
64.7861 29.0703 64.7861 29.5264 64.792 30.5361 cv
64.792 30.9209 64.7988 31.3052 64.7988 31.6895 cv
64.7988 32.3545 64.7861 32.7646 64.7715 33.1621 cv
64.8066 33.2012 li
65.0479 33.1948 65.291 33.1885 65.5322 33.1816 cv
65.5742 33.1426 li
65.5391 32.5303 65.5254 32.3608 65.5186 31.5791 cv
65.6162 31.5859 65.6982 31.5918 65.8301 31.5918 cv
67.2891 31.5918 68.002 30.7256 68.002 29.7158 cv
68.002 28.7969 67.3857 28.1191 66.5078 28.1191 cv
65.9688 28.1191 65.6367 28.3662 65.498 28.4707 cv
65.5117 28.1973 li
cp
65.5117 31.0903 mo
65.5049 30.7124 65.498 30.3281 65.498 29.9434 cv
65.498 29.6113 65.5049 29.2788 65.5117 28.9399 cv
65.6709 28.8359 65.9336 28.666 66.3076 28.666 cv
66.8613 28.666 67.2412 29.0835 67.2412 29.7612 cv
67.2412 30.5625 66.7148 31.1099 65.8027 31.1099 cv
65.6846 31.1099 65.6016 31.0967 65.5117 31.0903 cv
cp
f
71.918 30.7646 mo
71.8271 30.8359 71.6748 30.9536 71.4189 31.0508 cv
71.2256 31.1162 71.0186 31.1489 70.8174 31.1489 cv
70.6035 31.1489 70.209 31.1162 69.9248 30.7969 cv
69.6895 30.5303 69.6689 30.2104 69.6621 29.9824 cv
70.7969 29.9761 70.9834 29.9761 72.0625 29.9824 cv
72.1113 29.9434 li
72.1172 29.6567 72.1318 29.0117 71.7373 28.5684 cv
71.5303 28.334 71.1494 28.1191 70.6035 28.1191 cv
69.6973 28.1191 68.9219 28.7119 68.9219 29.9238 cv
68.9219 31.0576 69.6348 31.6699 70.7695 31.6699 cv
71.3848 31.6699 71.7588 31.4814 71.876 31.4229 cv
71.918 31.377 li
71.9307 31.123 71.9385 31.0576 71.9727 30.7969 cv
71.918 30.7646 li
cp
71.3643 26.7568 mo
71.2324 26.7637 71.1006 26.7637 70.9697 26.7637 cv
70.8379 26.7637 70.7139 26.7637 70.5615 26.7568 cv
70.5195 26.79 li
70.3682 27.2134 70.167 27.6299 70.0977 27.7866 cv
70.126 27.832 li
70.3682 27.832 70.4443 27.832 70.6309 27.8389 cv
70.6787 27.8125 li
70.9902 27.3369 71.0527 27.2461 71.3916 26.8096 cv
71.3643 26.7568 li
cp
71.3984 29.4805 mo
70.7627 29.4873 70.499 29.4941 69.6621 29.4873 cv
69.7314 28.8359 70.1885 28.5879 70.5752 28.5879 cv
70.8867 28.5879 71.1904 28.7383 71.3291 29.0962 cv
71.3848 29.2461 71.3916 29.3896 71.3984 29.4805 cv
cp
f
75.7627 30.8164 mo
75.7354 31.0967 75.7295 31.1289 75.708 31.3965 cv
75.6602 31.4424 li
75.459 31.5332 75.1895 31.6641 74.7051 31.6641 cv
73.6602 31.6641 72.9824 30.9536 72.9824 29.9365 cv
72.9824 28.9014 73.6475 28.1191 74.7188 28.1191 cv
75.1689 28.1191 75.4863 28.2559 75.666 28.3276 cv
75.6943 28.373 li
75.666 28.6074 75.6602 28.6924 75.6455 28.8877 cv
75.5908 28.9141 li
75.3623 28.7578 75.0996 28.6602 74.8232 28.6602 cv
74.249 28.6602 73.7441 29.0767 73.7441 29.9106 cv
73.7441 30.7969 74.2764 31.1162 74.8154 31.1162 cv
75.2861 31.1162 75.5762 30.8882 75.708 30.7905 cv
75.7627 30.8164 li
cp
f
77.4102 27.252 mo
77.0566 27.2656 76.9805 27.2715 76.6416 27.3047 cv
76.6006 27.2656 li
76.6074 27.1807 76.6074 27.0894 76.6074 27.0049 cv
76.6074 26.8877 76.6006 26.7832 76.5928 26.6523 cv
76.6416 26.6138 li
77.002 26.5879 77.0645 26.5811 77.4102 26.5488 cv
77.4512 26.5879 li
77.4443 26.855 77.4443 26.9199 77.4512 27.2065 cv
77.4102 27.252 li
cp
77.4023 31.5859 mo
77.043 31.5918 76.9873 31.5918 76.6494 31.6113 cv
76.6143 31.5659 li
76.6348 31.2207 76.6563 30.9209 76.6563 30.1978 cv
76.6563 28.9531 76.6348 28.7183 76.5869 28.334 cv
76.6211 28.2881 li
76.918 28.2427 77.0225 28.2295 77.3682 28.1582 cv
77.4375 28.1973 li
77.417 28.5361 77.3955 28.8877 77.3955 29.7285 cv
77.3955 30.9404 77.4102 31.1035 77.4375 31.5464 cv
77.4023 31.5859 li
cp
f
81.3252 29.6045 mo
81.3252 29.3311 81.3252 28.9727 81.2764 28.79 cv
81.1318 28.2817 80.6328 28.1191 80.1211 28.1191 cv
79.7129 28.1191 79.3125 28.2036 78.9248 28.334 cv
78.8828 28.373 li
78.876 28.5098 78.876 28.5488 78.8623 28.8486 cv
78.918 28.8809 li
79.208 28.7637 79.5195 28.6338 79.9697 28.6338 cv
80.3154 28.6338 80.4736 28.7578 80.543 28.875 cv
80.6055 28.9795 80.6055 29.1025 80.6055 29.2788 cv
80.4883 29.292 li
79.2432 29.4287 78.4678 29.709 78.4678 30.582 cv
78.4678 31.2271 78.9521 31.6699 79.6436 31.6699 cv
80.1699 31.6699 80.4814 31.4355 80.6123 31.3379 cv
80.6055 31.5723 li
80.6328 31.6113 li
80.9512 31.5986 81.0068 31.5918 81.332 31.5859 cv
81.3662 31.5527 li
81.332 31.1289 81.3252 31.0576 81.3252 30.25 cv
81.3252 29.6045 li
cp
80.6123 29.7612 mo
80.6123 30.8491 li
80.5361 30.9141 80.2871 31.1357 79.8584 31.1357 cv
79.2012 31.1357 79.2012 30.5757 79.2012 30.543 cv
79.2012 29.9629 79.8516 29.8721 80.5508 29.7739 cv
80.6123 29.7612 li
cp
f
83.3457 31.5859 mo
83.0127 31.5918 82.9434 31.5986 82.6182 31.6113 cv
82.584 31.5659 li
82.5977 31.1035 82.6182 30.5166 82.6182 29.2656 cv
82.6182 28.3662 82.6182 27.4023 82.5488 26.5684 cv
82.584 26.5288 li
82.9229 26.4771 82.9922 26.4639 83.3379 26.3921 cv
83.3789 26.4375 li
83.3311 27.2915 83.3311 28.1514 83.3311 29.0049 cv
83.3311 30.4321 83.3516 30.9272 83.3867 31.5464 cv
83.3457 31.5859 li
cp
f
85.4063 27.252 mo
85.0537 27.2656 84.9775 27.2715 84.6387 27.3047 cv
84.5967 27.2656 li
84.6035 27.1807 84.6035 27.0894 84.6035 27.0049 cv
84.6035 26.8877 84.5967 26.7832 84.5908 26.6523 cv
84.6387 26.6138 li
84.998 26.5879 85.0605 26.5811 85.4063 26.5488 cv
85.4482 26.5879 li
85.4414 26.855 85.4414 26.9199 85.4482 27.2065 cv
85.4063 27.252 li
cp
85.3994 31.5859 mo
85.04 31.5918 84.9844 31.5918 84.6455 31.6113 cv
84.6113 31.5659 li
84.6318 31.2207 84.6523 30.9209 84.6523 30.1978 cv
84.6523 28.9531 84.6318 28.7183 84.583 28.334 cv
84.6182 28.2881 li
84.915 28.2427 85.0186 28.2295 85.3643 28.1582 cv
85.4336 28.1973 li
85.4131 28.5361 85.3926 28.8877 85.3926 29.7285 cv
85.3926 30.9404 85.4063 31.1035 85.4336 31.5464 cv
85.3994 31.5859 li
cp
f
88.1387 29.6113 mo
88.415 29.6958 89.0449 29.8979 89.0449 30.5884 cv
89.0449 30.8491 88.9414 31.1426 88.6582 31.3574 cv
88.291 31.6504 87.7998 31.6699 87.5508 31.6699 cv
87.1777 31.6699 86.8662 31.605 86.6035 31.5068 cv
86.5684 31.4941 86.5342 31.4814 86.499 31.4683 cv
86.4648 31.4097 li
86.4922 31.1553 86.4922 31.123 86.5068 30.8623 cv
86.5762 30.8428 li
86.7002 30.9336 87.0039 31.1553 87.5371 31.1553 cv
88.084 31.1553 88.2842 30.8687 88.2842 30.667 cv
88.2842 30.3672 87.9873 30.269 87.5645 30.1387 cv
87.3438 30.0674 li
87.0596 29.9824 86.4375 29.7939 86.4375 29.1221 cv
86.4375 28.4512 87.0596 28.1191 87.834 28.1191 cv
88.3457 28.1191 88.7061 28.2559 88.8301 28.3018 cv
88.8652 28.3472 li
88.8379 28.5879 88.8301 28.6143 88.8096 28.8618 cv
88.748 28.8877 li
88.5742 28.7837 88.3047 28.627 87.8555 28.627 cv
87.7588 28.627 87.6621 28.6338 87.5576 28.6602 cv
87.3496 28.7119 87.1777 28.8486 87.1777 29.0508 cv
87.1777 29.3311 87.4609 29.416 87.8896 29.5396 cv
88.1387 29.6113 li
cp
f
92.8291 30.7646 mo
92.7393 30.8359 92.5869 30.9536 92.3311 31.0508 cv
92.1377 31.1162 91.9297 31.1489 91.7295 31.1489 cv
91.5146 31.1489 91.1201 31.1162 90.8359 30.7969 cv
90.6016 30.5303 90.5801 30.2104 90.5742 29.9824 cv
91.708 29.9761 91.8945 29.9761 92.9746 29.9824 cv
93.0225 29.9434 li
93.0293 29.6567 93.0439 29.0117 92.6494 28.5684 cv
92.4414 28.334 92.0605 28.1191 91.5146 28.1191 cv
90.6084 28.1191 89.834 28.7119 89.834 29.9238 cv
89.834 31.0576 90.5469 31.6699 91.6807 31.6699 cv
92.2959 31.6699 92.6699 31.4814 92.7881 31.4229 cv
92.8291 31.377 li
92.8428 31.123 92.8496 31.0576 92.8848 30.7969 cv
92.8291 30.7646 li
cp
92.2754 26.7568 mo
92.1445 26.7637 92.0127 26.7637 91.8809 26.7637 cv
91.75 26.7637 91.625 26.7637 91.4736 26.7568 cv
91.4316 26.79 li
91.2793 27.2134 91.0791 27.6299 91.0098 27.7866 cv
91.0371 27.832 li
91.2793 27.832 91.3555 27.832 91.542 27.8389 cv
91.5908 27.8125 li
91.9014 27.3369 91.9639 27.2461 92.3037 26.8096 cv
92.2754 26.7568 li
cp
92.3096 29.4805 mo
91.6738 29.4873 91.4111 29.4941 90.5742 29.4873 cv
90.6436 28.8359 91.0996 28.5879 91.4863 28.5879 cv
91.7979 28.5879 92.1025 28.7383 92.2412 29.0962 cv
92.2959 29.2461 92.3037 29.3896 92.3096 29.4805 cv
cp
f
96.8896 30.7646 mo
96.7998 30.8359 96.6475 30.9536 96.3916 31.0508 cv
96.1973 31.1162 95.9902 31.1489 95.79 31.1489 cv
95.5752 31.1489 95.1807 31.1162 94.8975 30.7969 cv
94.6621 30.5303 94.6416 30.2104 94.6348 29.9824 cv
95.7686 29.9761 95.9561 29.9761 97.0352 29.9824 cv
97.083 29.9434 li
97.0898 29.6567 97.1045 29.0117 96.71 28.5684 cv
96.502 28.334 96.1211 28.1191 95.5752 28.1191 cv
94.6689 28.1191 93.8945 28.7119 93.8945 29.9238 cv
93.8945 31.0576 94.6064 31.6699 95.7412 31.6699 cv
96.3564 31.6699 96.7305 31.4814 96.8486 31.4229 cv
96.8896 31.377 li
96.9033 31.123 96.9102 31.0576 96.9453 30.7969 cv
96.8896 30.7646 li
cp
96.3711 29.4805 mo
95.7344 29.4873 95.4717 29.4941 94.6348 29.4873 cv
94.7041 28.8359 95.1602 28.5879 95.5469 28.5879 cv
95.8594 28.5879 96.1631 28.7383 96.3018 29.0962 cv
96.3564 29.2461 96.3643 29.3896 96.3711 29.4805 cv
cp
f
27.5908 34.3511 mo
27.625 34.729 27.6602 35.1201 27.6523 35.9277 cv
27.4658 35.915 27.3965 35.915 27.252 35.915 cv
26.8916 35.915 26.2344 35.9346 25.7295 36.3643 cv
25.4395 36.6055 25.1211 37.0547 25.1211 37.7656 cv
25.1211 38.7559 25.7568 39.4404 26.6777 39.4404 cv
27.1826 39.4404 27.4658 39.2314 27.6318 39.1143 cv
27.6182 39.3555 li
27.667 39.3945 li
27.9844 39.3809 28.0674 39.375 28.3721 39.375 cv
28.4072 39.3291 li
28.3789 38.8799 28.3516 38.3975 28.3516 37.3877 cv
28.3516 36.7363 28.3584 35.1201 28.4072 34.2144 cv
28.3584 34.1748 li
28.0469 34.2402 27.9775 34.2529 27.625 34.312 cv
27.5908 34.3511 li
cp
27.625 38.5732 mo
27.5283 38.6514 27.2725 38.8604 26.8506 38.8604 cv
26.4902 38.8604 26.2627 38.7031 26.1377 38.5664 cv
25.9922 38.4043 25.8818 38.1367 25.8818 37.7656 cv
25.8818 37.1855 26.1309 36.8789 26.2832 36.7422 cv
26.6152 36.4492 27.0713 36.4365 27.2861 36.4365 cv
27.4316 36.4365 27.5146 36.4492 27.6318 36.4551 cv
27.6387 37.5244 27.6387 37.7197 27.625 38.5732 cv
cp
f
32.4678 38.5469 mo
32.377 38.6191 32.2256 38.7363 31.9697 38.834 cv
31.7754 38.8994 31.5684 38.9316 31.3672 38.9316 cv
31.1533 38.9316 30.7588 38.8994 30.4756 38.5801 cv
30.2402 38.3125 30.2188 37.9932 30.2119 37.7656 cv
31.3467 37.7588 31.5332 37.7588 32.6123 37.7656 cv
32.6611 37.7266 li
32.668 37.4395 32.6816 36.7949 32.2871 36.3516 cv
32.0801 36.1172 31.6992 35.9023 31.1533 35.9023 cv
30.2471 35.9023 29.4717 36.4951 29.4717 37.707 cv
29.4717 38.8408 30.1846 39.4531 31.3193 39.4531 cv
31.9346 39.4531 32.3086 39.2646 32.4258 39.2051 cv
32.4678 39.1602 li
32.4814 38.9063 32.4883 38.8408 32.5225 38.5801 cv
32.4678 38.5469 li
cp
31.9482 37.2637 mo
31.3125 37.2695 31.0488 37.2773 30.2119 37.2695 cv
30.2813 36.6191 30.7383 36.3711 31.125 36.3711 cv
31.4365 36.3711 31.7412 36.5215 31.8789 36.8789 cv
31.9346 37.0293 31.9414 37.1729 31.9482 37.2637 cv
cp
f
37.8564 36.7686 mo
38.3613 36.9766 39.0322 37.251 39.0322 38.085 cv
39.0322 38.8145 38.458 39.4727 37.2539 39.4727 cv
36.5205 39.4727 36.0508 39.2646 35.8848 39.1855 cv
35.8564 39.1406 li
35.8848 38.9121 35.8916 38.7891 35.9121 38.541 cv
35.9814 38.5146 li
36.1543 38.625 36.5557 38.8994 37.1992 38.8994 cv
37.9111 38.8994 38.209 38.5547 38.209 38.1631 cv
38.209 37.707 37.8076 37.5313 37.3574 37.3682 cv
37.0117 37.2246 li
36.5205 37.0098 35.8633 36.7295 35.8633 35.9346 cv
35.8633 35.6934 35.9326 35.4453 36.0781 35.25 cv
36.3965 34.8203 36.9707 34.6768 37.5313 34.6768 cv
38.0771 34.6768 38.4092 34.7744 38.7764 34.8853 cv
38.8105 34.9375 li
38.7832 35.1851 38.7764 35.2764 38.7549 35.5107 cv
38.7002 35.5371 li
38.4023 35.3936 38.0771 35.2373 37.5586 35.2373 cv
36.9844 35.2373 36.625 35.4912 36.625 35.876 cv
36.625 36.1689 36.832 36.3057 36.9775 36.3906 cv
37.0674 36.4434 37.0947 36.4551 37.5098 36.625 cv
37.8564 36.7686 li
cp
f
43.1611 36.0063 mo
43.1475 36.501 43.1406 36.9639 43.1406 37.4922 cv
43.1406 38.293 43.1611 38.7754 43.1758 39.0557 cv
43.1758 39.1465 43.1826 39.2383 43.1895 39.3291 cv
43.1611 39.3691 li
42.8301 39.375 42.7744 39.3809 42.4561 39.3945 cv
42.415 39.3555 li
42.4219 39.082 li
42.2695 39.1855 41.9023 39.4531 41.335 39.4531 cv
41.0654 39.4531 40.7686 39.3945 40.5469 39.2314 cv
40.1045 38.8926 40.1045 38.3389 40.0977 37.8311 cv
40.0977 37.4268 li
40.083 36.4951 40.083 36.3906 40.0625 36.0391 cv
40.0977 35.9932 li
40.4219 35.9863 40.4844 35.9863 40.8096 35.9609 cv
40.8516 36.0063 li
40.8232 37.4336 li
40.8232 37.6094 40.8164 37.7393 40.8232 38.0518 cv
40.8301 38.3262 40.8447 38.9121 41.543 38.9121 cv
41.9512 38.9121 42.2422 38.6973 42.4082 38.5732 cv
42.415 38.2217 42.415 37.9219 42.415 37.5439 cv
42.415 36.6377 42.4082 36.4551 42.3662 36.0322 cv
42.4082 35.9863 li
42.7256 35.9805 42.8018 35.9805 43.1201 35.9609 cv
43.1611 36.0063 li
cp
f
45.2158 35.0352 mo
44.8633 35.0483 44.7871 35.0547 44.4482 35.0879 cv
44.4063 35.0483 li
44.4141 34.9634 44.4141 34.8721 44.4141 34.7881 cv
44.4141 34.6704 44.4063 34.5664 44.4004 34.4355 cv
44.4482 34.3965 li
44.8076 34.3706 44.8701 34.3643 45.2158 34.332 cv
45.2578 34.3706 li
45.251 34.6377 45.251 34.7031 45.2578 34.9893 cv
45.2158 35.0352 li
cp
45.209 39.3691 mo
44.8496 39.375 44.7939 39.375 44.4551 39.3945 cv
44.4209 39.3486 li
44.4414 39.0039 44.4619 38.7031 44.4619 37.9805 cv
44.4619 36.7363 44.4414 36.501 44.3926 36.1172 cv
44.4277 36.0713 li
44.7256 36.0259 44.8291 36.0127 45.1748 35.9409 cv
45.2441 35.9805 li
45.2227 36.3184 45.2021 36.6709 45.2021 37.5117 cv
45.2021 38.7236 45.2158 38.8867 45.2441 39.3291 cv
45.209 39.3691 li
cp
f
47.9482 37.3945 mo
48.2256 37.4785 48.8555 37.6807 48.8555 38.3711 cv
48.8555 38.6328 48.751 38.9258 48.4678 39.1406 cv
48.1006 39.4336 47.6094 39.4531 47.3604 39.4531 cv
46.9873 39.4531 46.6758 39.3877 46.4131 39.29 cv
46.3779 39.2773 46.3438 39.2646 46.3096 39.251 cv
46.2744 39.1924 li
46.3018 38.9385 46.3018 38.9063 46.3164 38.6455 cv
46.3857 38.625 li
46.5098 38.7168 46.8135 38.9385 47.3467 38.9385 cv
47.8936 38.9385 48.0938 38.6514 48.0938 38.4492 cv
48.0938 38.1504 47.7969 38.0518 47.375 37.9219 cv
47.1533 37.8506 li
46.8701 37.7656 46.2471 37.5762 46.2471 36.9053 cv
46.2471 36.2344 46.8701 35.9023 47.6436 35.9023 cv
48.1563 35.9023 48.5156 36.0391 48.6406 36.0845 cv
48.6748 36.1299 li
48.6475 36.3711 48.6406 36.3975 48.6201 36.6445 cv
48.5576 36.6709 li
48.3838 36.5664 48.1152 36.4102 47.665 36.4102 cv
47.5684 36.4102 47.4717 36.417 47.3672 36.4434 cv
47.1592 36.4951 46.9873 36.6318 46.9873 36.834 cv
46.9873 37.1133 47.2705 37.1992 47.7002 37.3223 cv
47.9482 37.3945 li
cp
f
51.2832 37.3945 mo
51.5596 37.4785 52.1885 37.6807 52.1885 38.3711 cv
52.1885 38.6328 52.085 38.9258 51.8008 39.1406 cv
51.4346 39.4336 50.9434 39.4531 50.6943 39.4531 cv
50.3213 39.4531 50.0098 39.3877 49.7471 39.29 cv
49.7129 39.2773 49.6777 39.2646 49.6436 39.251 cv
49.6084 39.1924 li
49.6367 38.9385 49.6367 38.9063 49.6504 38.6455 cv
49.7197 38.625 li
49.8447 38.7168 50.1484 38.9385 50.6807 38.9385 cv
51.2266 38.9385 51.4277 38.6514 51.4277 38.4492 cv
51.4277 38.1504 51.1299 38.0518 50.709 37.9219 cv
50.4873 37.8506 li
50.2031 37.7656 49.5811 37.5762 49.5811 36.9053 cv
49.5811 36.2344 50.2031 35.9023 50.9785 35.9023 cv
51.4902 35.9023 51.8496 36.0391 51.9746 36.0845 cv
52.0088 36.1299 li
51.9814 36.3711 51.9746 36.3975 51.9541 36.6445 cv
51.8916 36.6709 li
51.7188 36.5664 51.4482 36.4102 50.999 36.4102 cv
50.9023 36.4102 50.8057 36.417 50.7021 36.4434 cv
50.4941 36.4951 50.3213 36.6318 50.3213 36.834 cv
50.3213 37.1133 50.6055 37.1992 51.0332 37.3223 cv
51.2832 37.3945 li
cp
f
55.9727 38.5469 mo
55.8828 38.6191 55.7305 38.7363 55.4746 38.834 cv
55.2813 38.8994 55.0732 38.9316 54.873 38.9316 cv
54.6582 38.9316 54.2646 38.8994 53.9805 38.5801 cv
53.7451 38.3125 53.7246 37.9932 53.7178 37.7656 cv
54.8516 37.7588 55.0391 37.7588 56.1182 37.7656 cv
56.166 37.7266 li
56.1738 37.4395 56.1865 36.7949 55.793 36.3516 cv
55.585 36.1172 55.2051 35.9023 54.6582 35.9023 cv
53.7529 35.9023 52.9775 36.4951 52.9775 37.707 cv
52.9775 38.8408 53.6895 39.4531 54.8242 39.4531 cv
55.4404 39.4531 55.8135 39.2646 55.9307 39.2051 cv
55.9727 39.1602 li
55.9863 38.9063 55.9941 38.8408 56.0273 38.5801 cv
55.9727 38.5469 li
cp
55.4541 37.2637 mo
54.8174 37.2695 54.5547 37.2773 53.7178 37.2695 cv
53.7861 36.6191 54.2432 36.3711 54.6309 36.3711 cv
54.9414 36.3711 55.2461 36.5215 55.3848 36.8789 cv
55.4404 37.0293 55.4473 37.1729 55.4541 37.2637 cv
cp
f
62.793 37.6289 mo
62.7793 37.1729 62.6895 36.7168 62.3711 36.3711 cv
62.0674 36.0449 61.6035 35.9023 61.1328 35.9023 cv
60.4414 35.9023 60.04 36.1689 59.8467 36.3584 cv
59.3828 36.7949 59.3691 37.4336 59.3691 37.6807 cv
59.3691 37.8955 59.376 38.5605 59.8467 39.0098 cv
60.0674 39.2246 60.4619 39.4463 61.084 39.4463 cv
61.5684 39.4463 61.9766 39.3359 62.2813 39.0488 cv
62.5098 38.834 62.6543 38.5801 62.7314 38.2607 cv
62.7793 38.0654 62.793 37.8506 62.793 37.6289 cv
cp
62.04 37.6543 mo
62.0459 37.791 62.04 38.2285 61.8799 38.5215 cv
61.6797 38.8799 61.3477 38.958 61.0918 38.958 cv
60.9531 38.958 60.8076 38.9316 60.6836 38.873 cv
60.1367 38.6123 60.1299 37.9551 60.1299 37.6934 cv
60.1299 37.4199 60.1514 37.042 60.3379 36.7754 cv
60.5801 36.4102 60.9668 36.3975 61.0986 36.3975 cv
61.4863 36.3975 61.707 36.5664 61.8389 36.7686 cv
62.0117 37.0547 62.04 37.4922 62.04 37.6543 cv
cp
f
66.4941 38.5996 mo
66.4668 38.8799 66.459 38.9121 66.4385 39.1797 cv
66.3906 39.2246 li
66.1895 39.3164 65.9199 39.4463 65.4355 39.4463 cv
64.3916 39.4463 63.7129 38.7363 63.7129 37.7197 cv
63.7129 36.6836 64.377 35.9023 65.4492 35.9023 cv
65.8994 35.9023 66.2178 36.0391 66.3975 36.1104 cv
66.4248 36.1563 li
66.3975 36.3906 66.3906 36.4756 66.377 36.6709 cv
66.3213 36.6973 li
66.0928 36.541 65.8301 36.4434 65.5537 36.4434 cv
64.9795 36.4434 64.4736 36.8594 64.4736 37.6934 cv
64.4736 38.5801 65.0068 38.8994 65.5469 38.8994 cv
66.0166 38.8994 66.3076 38.6709 66.4385 38.5732 cv
66.4941 38.5996 li
cp
f
69.9736 38.5996 mo
69.9453 38.8799 69.9395 38.9121 69.918 39.1797 cv
69.8701 39.2246 li
69.6689 39.3164 69.3994 39.4463 68.915 39.4463 cv
67.8701 39.4463 67.1924 38.7363 67.1924 37.7197 cv
67.1924 36.6836 67.8574 35.9023 68.9287 35.9023 cv
69.3789 35.9023 69.6973 36.0391 69.877 36.1104 cv
69.9043 36.1563 li
69.877 36.3906 69.8701 36.4756 69.8555 36.6709 cv
69.8008 36.6973 li
69.5723 36.541 69.3096 36.4434 69.0332 36.4434 cv
68.459 36.4434 67.9541 36.8594 67.9541 37.6934 cv
67.9541 38.5801 68.4863 38.8994 69.0254 38.8994 cv
69.4961 38.8994 69.7861 38.6709 69.918 38.5732 cv
69.9736 38.5996 li
cp
f
71.6201 35.0352 mo
71.2676 35.0483 71.1904 35.0547 70.8525 35.0879 cv
70.8105 35.0483 li
70.8174 34.9634 70.8174 34.8721 70.8174 34.7881 cv
70.8174 34.6704 70.8105 34.5664 70.8037 34.4355 cv
70.8525 34.3965 li
71.2119 34.3706 71.2744 34.3643 71.6201 34.332 cv
71.6621 34.3706 li
71.6543 34.6377 71.6543 34.7031 71.6621 34.9893 cv
71.6201 35.0352 li
cp
71.6133 39.3691 mo
71.2539 39.375 71.1982 39.375 70.8594 39.3945 cv
70.8242 39.3486 li
70.8447 39.0039 70.8662 38.7031 70.8662 37.9805 cv
70.8662 36.7363 70.8447 36.501 70.7969 36.1172 cv
70.832 36.0713 li
71.1289 36.0259 71.2324 36.0127 71.5781 35.9409 cv
71.6475 35.9805 li
71.627 36.3184 71.6055 36.6709 71.6055 37.5117 cv
71.6055 38.7236 71.6201 38.8867 71.6475 39.3291 cv
71.6133 39.3691 li
cp
f
75.1758 34.3511 mo
75.21 34.729 75.2451 35.1201 75.2383 35.9277 cv
75.0508 35.915 74.9814 35.915 74.8369 35.915 cv
74.4766 35.915 73.8193 35.9346 73.3145 36.3643 cv
73.0244 36.6055 72.7061 37.0547 72.7061 37.7656 cv
72.7061 38.7559 73.3418 39.4404 74.2627 39.4404 cv
74.7676 39.4404 75.0508 39.2314 75.2178 39.1143 cv
75.2031 39.3555 li
75.252 39.3945 li
75.5703 39.3809 75.6523 39.375 75.958 39.375 cv
75.9912 39.3291 li
75.9639 38.8799 75.9365 38.3975 75.9365 37.3877 cv
75.9365 36.7363 75.9434 35.1201 75.9912 34.2144 cv
75.9434 34.1748 li
75.6318 34.2402 75.5635 34.2529 75.21 34.312 cv
75.1758 34.3511 li
cp
75.21 38.5732 mo
75.1133 38.6514 74.8574 38.8604 74.4355 38.8604 cv
74.0752 38.8604 73.8467 38.7031 73.7227 38.5664 cv
73.5781 38.4043 73.4668 38.1367 73.4668 37.7656 cv
73.4668 37.1855 73.7158 36.8789 73.8682 36.7422 cv
74.2002 36.4492 74.6563 36.4365 74.8711 36.4365 cv
75.0166 36.4365 75.0996 36.4492 75.2178 36.4551 cv
75.2236 37.5244 75.2236 37.7197 75.21 38.5732 cv
cp
f
80.0527 38.5469 mo
79.9619 38.6191 79.8105 38.7363 79.5547 38.834 cv
79.3604 38.8994 79.1533 38.9316 78.9521 38.9316 cv
78.7383 38.9316 78.3438 38.8994 78.0605 38.5801 cv
77.8252 38.3125 77.8047 37.9932 77.7969 37.7656 cv
78.9316 37.7588 79.1191 37.7588 80.1973 37.7656 cv
80.2461 37.7266 li
80.2529 37.4395 80.2666 36.7949 79.8721 36.3516 cv
79.665 36.1172 79.2852 35.9023 78.7383 35.9023 cv
77.832 35.9023 77.0566 36.4951 77.0566 37.707 cv
77.0566 38.8408 77.7695 39.4531 78.9033 39.4531 cv
79.5195 39.4531 79.8936 39.2646 80.0107 39.2051 cv
80.0527 39.1602 li
80.0664 38.9063 80.0732 38.8408 80.1074 38.5801 cv
80.0527 38.5469 li
cp
79.5342 37.2637 mo
78.8975 37.2695 78.6348 37.2773 77.7969 37.2695 cv
77.8662 36.6191 78.3232 36.3711 78.7109 36.3711 cv
79.0215 36.3711 79.3262 36.5215 79.4648 36.8789 cv
79.5195 37.0293 79.5264 37.1729 79.5342 37.2637 cv
cp
f
84.3623 39.3691 mo
84.0293 39.375 83.9883 39.375 83.6699 39.3945 cv
83.6221 39.3486 li
83.6221 39.2773 83.6289 39.2051 83.6289 39.1338 cv
83.6357 38.8145 83.6357 38.4951 83.6357 38.1758 cv
83.6357 37.1729 83.6289 37.1074 83.5938 36.9707 cv
83.4629 36.4756 83.0684 36.4756 82.9717 36.4756 cv
82.5566 36.4756 82.2383 36.7031 82.0518 36.8398 cv
82.0439 37.9736 82.0586 38.5664 82.1064 39.3291 cv
82.0654 39.3691 li
81.7266 39.375 81.6709 39.375 81.3389 39.3945 cv
81.3037 39.3486 li
81.3115 38.9844 81.3252 38.6328 81.3252 38.1504 cv
81.3252 37.1074 81.2764 36.5537 81.2422 36.1172 cv
81.2832 36.0713 li
81.6289 36.0127 81.6914 35.9995 82.0166 35.9409 cv
82.0654 35.9863 li
82.0586 36.3252 li
82.2383 36.208 82.667 35.9214 83.2764 35.9214 cv
83.4482 35.9214 83.6631 35.9478 83.8506 36.0449 cv
84.0293 36.1431 84.1758 36.293 84.251 36.4688 cv
84.3418 36.6641 84.3477 36.8594 84.3545 37.2637 cv
84.3545 38.0264 li
84.375 38.7891 84.3828 39.082 84.4033 39.3291 cv
84.3623 39.3691 li
cp
f
87.2256 38.8604 mo
87.2051 39.0752 87.2051 39.1211 87.1982 39.3096 cv
87.1631 39.3486 li
87.0186 39.3809 86.9014 39.4082 86.6455 39.4082 cv
86.4785 39.4082 86.043 39.4082 85.8281 39.0684 cv
85.7041 38.8799 85.7041 38.7236 85.7041 37.9551 cv
85.7178 36.5215 li
85.4756 36.5215 85.4688 36.5273 85.2197 36.5342 cv
85.1924 36.4951 li
85.2051 36.2861 85.2051 36.2344 85.2051 36.0259 cv
85.2471 35.9863 li
85.3994 35.9863 85.4902 35.9932 85.7178 35.9863 cv
85.7109 35.8496 85.7109 35.7065 85.7109 35.5698 cv
85.7041 35.4453 85.6973 35.3223 85.6895 35.1982 cv
85.7246 35.1523 li
86.0361 35.0811 86.1123 35.0615 86.4297 34.9702 cv
86.4785 35.0029 li
86.458 35.4326 86.4512 35.5176 86.4512 35.9932 cv
86.7412 35.9863 86.8242 35.9863 87.2188 35.9736 cv
87.2539 36.0127 li
87.2393 36.1821 87.2324 36.2539 87.2324 36.4756 cv
87.1982 36.5146 li
86.8525 36.5078 86.8105 36.501 86.4443 36.501 cv
86.4297 37.7129 li
86.4375 37.791 86.4375 38.1631 86.4375 38.2539 cv
86.4375 38.7295 86.499 38.8799 86.8447 38.8799 cv
86.9912 38.8799 87.1016 38.8477 87.1777 38.8213 cv
87.2256 38.8604 li
cp
f
90.7607 37.3877 mo
90.7607 37.1133 90.7607 36.7559 90.7119 36.5732 cv
90.5674 36.0645 90.0684 35.9023 89.5566 35.9023 cv
89.1484 35.9023 88.748 35.9863 88.3604 36.1172 cv
88.3184 36.1563 li
88.3115 36.293 88.3115 36.332 88.2979 36.6318 cv
88.3535 36.6641 li
88.6436 36.5469 88.9551 36.417 89.4043 36.417 cv
89.75 36.417 89.9092 36.541 89.9785 36.6582 cv
90.041 36.7617 90.041 36.8857 90.041 37.0625 cv
89.9238 37.0742 li
88.6787 37.2119 87.9033 37.4922 87.9033 38.3652 cv
87.9033 39.0098 88.3877 39.4531 89.0791 39.4531 cv
89.6055 39.4531 89.916 39.2188 90.0479 39.1211 cv
90.041 39.3555 li
90.0684 39.3945 li
90.3877 39.3809 90.4424 39.375 90.7676 39.3691 cv
90.8027 39.3359 li
90.7676 38.9121 90.7607 38.8408 90.7607 38.0332 cv
90.7607 37.3877 li
cp
90.0479 37.5439 mo
90.0479 38.6328 li
89.9717 38.6973 89.7227 38.9189 89.2939 38.9189 cv
88.6367 38.9189 88.6367 38.3584 88.6367 38.3262 cv
88.6367 37.7461 89.2871 37.6543 89.9854 37.5566 cv
90.0479 37.5439 li
cp
f
92.7803 39.3691 mo
92.4482 39.375 92.3789 39.3809 92.0537 39.3945 cv
92.0195 39.3486 li
92.0332 38.8867 92.0537 38.2998 92.0537 37.0488 cv
92.0537 36.1494 92.0537 35.1851 91.9854 34.3511 cv
92.0195 34.312 li
92.3584 34.2598 92.4277 34.2471 92.7734 34.1748 cv
92.8154 34.2207 li
92.7666 35.0742 92.7666 35.9346 92.7666 36.7881 cv
92.7666 38.2148 92.7871 38.7109 92.8213 39.3291 cv
92.7803 39.3691 li
cp
f
96.8896 38.5469 mo
96.7998 38.6191 96.6475 38.7363 96.3916 38.834 cv
96.1973 38.8994 95.9902 38.9316 95.79 38.9316 cv
95.5752 38.9316 95.1807 38.8994 94.8975 38.5801 cv
94.6621 38.3125 94.6416 37.9932 94.6348 37.7656 cv
95.7686 37.7588 95.9561 37.7588 97.0352 37.7656 cv
97.083 37.7266 li
97.0898 37.4395 97.1045 36.7949 96.71 36.3516 cv
96.502 36.1172 96.1211 35.9023 95.5752 35.9023 cv
94.6689 35.9023 93.8945 36.4951 93.8945 37.707 cv
93.8945 38.8408 94.6064 39.4531 95.7412 39.4531 cv
96.3564 39.4531 96.7305 39.2646 96.8486 39.2051 cv
96.8896 39.1602 li
96.9033 38.9063 96.9102 38.8408 96.9453 38.5801 cv
96.8896 38.5469 li
cp
96.3711 37.2637 mo
95.7344 37.2695 95.4717 37.2773 94.6348 37.2695 cv
94.7041 36.6191 95.1602 36.3711 95.5469 36.3711 cv
95.8594 36.3711 96.1631 36.5215 96.3018 36.8789 cv
96.3564 37.0293 96.3643 37.1729 96.3711 37.2637 cv
cp
f
2.47656 48.7715 mo
1.79199 48.752 1.65332 48.752 .830078 48.7441 cv
.816406 49.0254 .816406 50.0225 .87207 50.7324 cv
.837891 50.7783 li
.457031 50.7783 .401367 50.7842 .0351563 50.7969 cv
0 50.752 li
.0283203 50.2559 .0419922 49.8789 .0419922 47.9561 cv
.0419922 47.0313 .0214844 46.6211 0 46.2236 cv
.0351563 46.1777 li
.512695 46.1836 2.3457 46.1709 2.82324 46.1582 cv
2.85742 46.2031 li
2.83008 46.4385 2.83008 46.4707 2.81543 46.7246 cv
2.77441 46.7646 li
1.91699 46.7441 1.68164 46.7383 .837891 46.7383 cv
.830078 47.0059 .816406 47.6631 .816406 48.0479 cv
.816406 48.1973 li
1.60547 48.1914 1.84082 48.1846 2.53223 48.165 cv
2.56641 48.2041 li
2.53906 48.5039 2.53906 48.5361 2.51855 48.7256 cv
2.47656 48.7715 li
cp
f
6.11035 48.791 mo
6.11035 48.5176 6.11035 48.1582 6.06152 47.9766 cv
5.91602 47.4678 5.41797 47.3047 4.90625 47.3047 cv
4.49805 47.3047 4.09668 47.3896 3.70996 47.5205 cv
3.66797 47.5586 li
3.66113 47.6963 3.66113 47.7354 3.64746 48.0352 cv
3.70313 48.0674 li
3.99316 47.9502 4.30469 47.8203 4.75391 47.8203 cv
5.10059 47.8203 5.25879 47.9434 5.32813 48.0605 cv
5.39063 48.165 5.39063 48.2891 5.39063 48.4648 cv
5.27344 48.4775 li
4.02832 48.6152 3.25293 48.8945 3.25293 49.7676 cv
3.25293 50.4131 3.7373 50.8555 4.42871 50.8555 cv
4.95508 50.8555 5.26563 50.6221 5.39746 50.5234 cv
5.39063 50.7578 li
5.41797 50.7969 li
5.73633 50.7842 5.79199 50.7783 6.11719 50.7715 cv
6.15137 50.7383 li
6.11719 50.3145 6.11035 50.2441 6.11035 49.4355 cv
6.11035 48.791 li
cp
5.39746 48.9473 mo
5.39746 50.0352 li
5.32129 50.0996 5.07227 50.3223 4.64355 50.3223 cv
3.98633 50.3223 3.98633 49.7617 3.98633 49.7285 cv
3.98633 49.1494 4.63672 49.0576 5.33496 48.96 cv
5.39746 48.9473 li
cp
f
9.98438 50.002 mo
9.95605 50.2822 9.94922 50.3145 9.92871 50.582 cv
9.87988 50.6279 li
9.67969 50.7197 9.41016 50.8496 8.92578 50.8496 cv
7.88086 50.8496 7.20313 50.1396 7.20313 49.123 cv
7.20313 48.0869 7.86719 47.3047 8.93945 47.3047 cv
9.38867 47.3047 9.70703 47.4414 9.88672 47.5137 cv
9.91504 47.5586 li
9.88672 47.7939 9.87988 47.8789 9.86621 48.0742 cv
9.81055 48.0996 li
9.58301 47.9434 9.32031 47.8457 9.04297 47.8457 cv
8.46875 47.8457 7.96387 48.2627 7.96387 49.0967 cv
7.96387 49.9824 8.49707 50.3027 9.03613 50.3027 cv
9.50684 50.3027 9.79688 50.0742 9.92871 49.9766 cv
9.98438 50.002 li
cp
f
13.9268 50.7715 mo
13.5947 50.7783 13.5537 50.7783 13.2354 50.7969 cv
13.1865 50.752 li
13.1934 50.5371 li
13.2002 50.1982 13.2002 49.8525 13.2002 49.5137 cv
13.1934 48.8164 li
13.1934 48.667 13.1934 48.5176 13.1592 48.373 cv
13.083 48.0742 12.8896 47.8789 12.5361 47.8789 cv
12.1426 47.8789 11.8379 48.0869 11.6094 48.2432 cv
11.6025 49.377 11.6162 49.9697 11.6582 50.7324 cv
11.623 50.7715 li
11.3057 50.7783 11.2217 50.7783 10.8828 50.7969 cv
10.8486 50.752 li
10.8623 50.2891 10.8828 49.7031 10.8828 48.4521 cv
10.8828 47.9043 10.876 47.3574 10.8691 46.8096 cv
10.8555 46.2363 10.835 46.0469 10.8145 45.7539 cv
10.8486 45.7148 li
11.1807 45.6631 11.291 45.6426 11.6025 45.5781 cv
11.6445 45.624 li
11.6025 46.3213 11.6025 47.0244 11.6025 47.7285 cv
11.8242 47.5918 12.2598 47.3242 12.8408 47.3242 cv
13 47.3242 13.1592 47.3438 13.3047 47.4023 cv
13.6152 47.5205 13.8027 47.7539 13.8711 48.0215 cv
13.9063 48.1523 13.9063 48.2305 13.9199 48.667 cv
13.9199 49.4297 li
13.9268 49.7354 li
13.9404 50.2822 13.9404 50.374 13.9688 50.7324 cv
13.9268 50.7715 li
cp
f
18.2715 50.7715 mo
17.9385 50.7783 17.8975 50.7783 17.5791 50.7969 cv
17.5313 50.752 li
17.5381 50.5371 li
17.5449 50.1982 17.5449 49.8525 17.5449 49.5137 cv
17.5381 48.8164 li
17.5381 48.667 17.5381 48.5176 17.5029 48.373 cv
17.4268 48.0742 17.2334 47.8789 16.8809 47.8789 cv
16.4863 47.8789 16.1816 48.0869 15.9531 48.2432 cv
15.9463 49.377 15.9609 49.9697 16.002 50.7324 cv
15.9678 50.7715 li
15.6494 50.7783 15.5664 50.7783 15.2275 50.7969 cv
15.1924 50.752 li
15.207 50.2891 15.2275 49.7031 15.2275 48.4521 cv
15.2275 47.9043 15.2207 47.3574 15.2139 46.8096 cv
15.2002 46.2363 15.1787 46.0469 15.1582 45.7539 cv
15.1924 45.7148 li
15.5244 45.6631 15.6357 45.6426 15.9463 45.5781 cv
15.9883 45.624 li
15.9463 46.3213 15.9463 47.0244 15.9463 47.7285 cv
16.168 47.5918 16.6035 47.3242 17.1846 47.3242 cv
17.3438 47.3242 17.5029 47.3438 17.6484 47.4023 cv
17.96 47.5205 18.1465 47.7539 18.2158 48.0215 cv
18.25 48.1523 18.25 48.2305 18.2637 48.667 cv
18.2637 49.4297 li
18.2715 49.7354 li
18.2852 50.2822 18.2852 50.374 18.3125 50.7324 cv
18.2715 50.7715 li
cp
f
22.7949 49.0313 mo
22.7813 48.5762 22.6914 48.1191 22.373 47.7734 cv
22.0684 47.4482 21.6055 47.3047 21.1348 47.3047 cv
20.4434 47.3047 20.042 47.5723 19.8486 47.7617 cv
19.3848 48.1973 19.3711 48.8359 19.3711 49.084 cv
19.3711 49.2988 19.3779 49.9639 19.8486 50.4131 cv
20.0693 50.6279 20.4639 50.8496 21.0869 50.8496 cv
21.5703 50.8496 21.9785 50.7383 22.2832 50.4521 cv
22.5117 50.2373 22.6572 49.9824 22.7324 49.6641 cv
22.7813 49.4678 22.7949 49.2529 22.7949 49.0313 cv
cp
22.041 49.0576 mo
22.0479 49.1943 22.041 49.6309 21.8818 49.9238 cv
21.6816 50.2822 21.3496 50.3613 21.0938 50.3613 cv
20.9551 50.3613 20.8096 50.335 20.6855 50.2764 cv
20.1387 50.0156 20.1318 49.3574 20.1318 49.0967 cv
20.1318 48.8232 20.1523 48.4453 20.3389 48.1787 cv
20.5811 47.8125 20.9688 47.7998 21.1006 47.7998 cv
21.4873 47.7998 21.709 47.9697 21.8408 48.1719 cv
22.0137 48.459 22.041 48.8945 22.041 49.0576 cv
cp
f
26.4961 50.002 mo
26.4678 50.2822 26.4609 50.3145 26.4404 50.582 cv
26.3926 50.6279 li
26.1914 50.7197 25.9219 50.8496 25.4375 50.8496 cv
24.3926 50.8496 23.7148 50.1396 23.7148 49.123 cv
23.7148 48.0869 24.3789 47.3047 25.4512 47.3047 cv
25.9014 47.3047 26.2188 47.4414 26.3994 47.5137 cv
26.4268 47.5586 li
26.3994 47.7939 26.3926 47.8789 26.3779 48.0742 cv
26.3232 48.0996 li
26.0947 47.9434 25.832 47.8457 25.5547 47.8457 cv
24.9805 47.8457 24.4756 48.2627 24.4756 49.0967 cv
24.4756 49.9824 25.0088 50.3027 25.5479 50.3027 cv
26.0186 50.3027 26.3096 50.0742 26.4404 49.9766 cv
26.4961 50.002 li
cp
f
30.4385 50.7715 mo
30.1064 50.7783 30.0654 50.7783 29.7471 50.7969 cv
29.6982 50.752 li
29.7051 50.5371 li
29.7129 50.1982 29.7129 49.8525 29.7129 49.5137 cv
29.7051 48.8164 li
29.7051 48.667 29.7051 48.5176 29.6709 48.373 cv
29.5947 48.0742 29.4014 47.8789 29.0488 47.8789 cv
28.6543 47.8789 28.3496 48.0869 28.1211 48.2432 cv
28.1143 49.377 28.1279 49.9697 28.1699 50.7324 cv
28.1357 50.7715 li
27.8174 50.7783 27.7344 50.7783 27.3955 50.7969 cv
27.3604 50.752 li
27.374 50.2891 27.3955 49.7031 27.3955 48.4521 cv
27.3955 47.9043 27.3887 47.3574 27.3809 46.8096 cv
27.3672 46.2363 27.3467 46.0469 27.3262 45.7539 cv
27.3604 45.7148 li
27.6924 45.6631 27.8037 45.6426 28.1143 45.5781 cv
28.1563 45.624 li
28.1143 46.3213 28.1143 47.0244 28.1143 47.7285 cv
28.3359 47.5918 28.7715 47.3242 29.3525 47.3242 cv
29.5117 47.3242 29.6709 47.3438 29.8164 47.4023 cv
30.1279 47.5205 30.3145 47.7539 30.3838 48.0215 cv
30.418 48.1523 30.418 48.2305 30.4316 48.667 cv
30.4316 49.4297 li
30.4385 49.7354 li
30.4531 50.2822 30.4531 50.374 30.4805 50.7324 cv
30.4385 50.7715 li
cp
f
33.1777 48.7969 mo
33.4551 48.8818 34.084 49.084 34.084 49.7744 cv
34.084 50.0352 33.9805 50.3281 33.6973 50.543 cv
33.3301 50.8369 32.8389 50.8555 32.5898 50.8555 cv
32.2168 50.8555 31.9053 50.791 31.6426 50.6934 cv
31.6084 50.6807 31.5732 50.667 31.5391 50.6543 cv
31.5039 50.5957 li
31.5322 50.3418 31.5322 50.3086 31.5459 50.0488 cv
31.6152 50.0293 li
31.7393 50.1201 32.0439 50.3418 32.5762 50.3418 cv
33.123 50.3418 33.3232 50.0547 33.3232 49.8525 cv
33.3232 49.5527 33.0264 49.4551 32.6035 49.3252 cv
32.3828 49.2529 li
32.0986 49.168 31.4766 48.9795 31.4766 48.3086 cv
31.4766 47.6377 32.0986 47.3047 32.874 47.3047 cv
33.3857 47.3047 33.7451 47.4414 33.8701 47.4873 cv
33.9043 47.5332 li
33.877 47.7734 33.8701 47.7998 33.8486 48.0479 cv
33.7871 48.0742 li
33.6143 47.9697 33.3447 47.8125 32.8945 47.8125 cv
32.7979 47.8125 32.7012 47.8203 32.5967 47.8457 cv
32.3896 47.8975 32.2168 48.0352 32.2168 48.2363 cv
32.2168 48.5176 32.5 48.6016 32.9287 48.7256 cv
33.1777 48.7969 li
cp
f
37.6533 50.002 mo
37.626 50.2822 37.6191 50.3145 37.5986 50.582 cv
37.5498 50.6279 li
37.3496 50.7197 37.0801 50.8496 36.5957 50.8496 cv
35.5508 50.8496 34.873 50.1396 34.873 49.123 cv
34.873 48.0869 35.5371 47.3047 36.6094 47.3047 cv
37.0586 47.3047 37.377 47.4414 37.5566 47.5137 cv
37.585 47.5586 li
37.5566 47.7939 37.5498 47.8789 37.5361 48.0742 cv
37.4805 48.0996 li
37.2529 47.9434 36.9893 47.8457 36.7129 47.8457 cv
36.1387 47.8457 35.6338 48.2627 35.6338 49.0967 cv
35.6338 49.9824 36.167 50.3027 36.7061 50.3027 cv
37.1768 50.3027 37.4668 50.0742 37.5986 49.9766 cv
37.6533 50.002 li
cp
f
41.5967 50.7715 mo
41.2646 50.7783 41.2236 50.7783 40.9053 50.7969 cv
40.8564 50.752 li
40.8633 50.5371 li
40.8701 50.1982 40.8701 49.8525 40.8701 49.5137 cv
40.8633 48.8164 li
40.8633 48.667 40.8633 48.5176 40.8291 48.373 cv
40.7529 48.0742 40.5596 47.8789 40.2061 47.8789 cv
39.8115 47.8789 39.5078 48.0869 39.2793 48.2432 cv
39.2725 49.377 39.2861 49.9697 39.3281 50.7324 cv
39.293 50.7715 li
38.9746 50.7783 38.8916 50.7783 38.5527 50.7969 cv
38.5186 50.752 li
38.5322 50.2891 38.5527 49.7031 38.5527 48.4521 cv
38.5527 47.9043 38.5459 47.3574 38.5391 46.8096 cv
38.5254 46.2363 38.5049 46.0469 38.4834 45.7539 cv
38.5186 45.7148 li
38.8506 45.6631 38.9609 45.6426 39.2725 45.5781 cv
39.3135 45.624 li
39.2725 46.3213 39.2725 47.0244 39.2725 47.7285 cv
39.4941 47.5918 39.9297 47.3242 40.5107 47.3242 cv
40.6699 47.3242 40.8291 47.3438 40.9746 47.4023 cv
41.2852 47.5205 41.4717 47.7539 41.541 48.0215 cv
41.5762 48.1523 41.5762 48.2305 41.5898 48.667 cv
41.5898 49.4297 li
41.5967 49.7354 li
41.6104 50.2822 41.6104 50.374 41.6387 50.7324 cv
41.5967 50.7715 li
cp
f
45.9336 47.4092 mo
45.9199 47.9043 45.9131 48.3672 45.9131 48.8945 cv
45.9131 49.6963 45.9336 50.1787 45.9482 50.459 cv
45.9482 50.5498 45.9551 50.6406 45.9619 50.7324 cv
45.9336 50.7715 li
45.6016 50.7783 45.5469 50.7842 45.2285 50.7969 cv
45.1865 50.7578 li
45.1943 50.4844 li
45.042 50.5889 44.6748 50.8555 44.1084 50.8555 cv
43.8379 50.8555 43.54 50.7969 43.3193 50.6348 cv
42.876 50.2959 42.876 49.7422 42.8691 49.2344 cv
42.8691 48.8301 li
42.8555 47.8975 42.8555 47.7939 42.835 47.4414 cv
42.8691 47.3965 li
43.1943 47.3896 43.2568 47.3896 43.582 47.3643 cv
43.624 47.4092 li
43.5957 48.8359 li
43.5957 49.0117 43.5889 49.1426 43.5957 49.4551 cv
43.6025 49.7285 43.6162 50.3145 44.3154 50.3145 cv
44.7236 50.3145 45.0137 50.0996 45.1797 49.9766 cv
45.1865 49.625 45.1865 49.3252 45.1865 48.9473 cv
45.1865 48.041 45.1797 47.8594 45.1387 47.4355 cv
45.1797 47.3896 li
45.498 47.3828 45.5742 47.3828 45.8926 47.3643 cv
45.9336 47.4092 li
cp
f
47.9678 50.7715 mo
47.6357 50.7783 47.5664 50.7842 47.2412 50.7969 cv
47.207 50.752 li
47.2207 50.2891 47.2412 49.7031 47.2412 48.4521 cv
47.2412 47.5527 47.2412 46.5879 47.1729 45.7539 cv
47.207 45.7148 li
47.5459 45.6631 47.6152 45.6504 47.9609 45.5781 cv
48.002 45.624 li
47.9541 46.4775 47.9541 47.3379 47.9541 48.1914 cv
47.9541 49.6182 47.9746 50.1133 48.0098 50.7324 cv
47.9678 50.7715 li
cp
f
52.0771 49.9502 mo
51.9863 50.0225 51.834 50.1396 51.5781 50.2373 cv
51.3848 50.3027 51.1777 50.335 50.9766 50.335 cv
50.7627 50.335 50.3682 50.3027 50.085 49.9824 cv
49.8496 49.7158 49.8291 49.3965 49.8213 49.168 cv
50.9561 49.1621 51.1426 49.1621 52.2217 49.168 cv
52.2695 49.1289 li
52.2773 48.8428 52.291 48.1973 51.8965 47.7539 cv
51.6895 47.5205 51.3086 47.3047 50.7627 47.3047 cv
49.8564 47.3047 49.0811 47.8975 49.0811 49.1094 cv
49.0811 50.2441 49.7939 50.8555 50.9277 50.8555 cv
51.5439 50.8555 51.917 50.667 52.0352 50.6084 cv
52.0771 50.5635 li
52.0898 50.3086 52.0977 50.2441 52.1318 49.9824 cv
52.0771 49.9502 li
cp
51.5576 48.667 mo
50.9219 48.6738 50.6592 48.6797 49.8213 48.6738 cv
49.8906 48.0215 50.3477 47.7734 50.7344 47.7734 cv
51.0459 47.7734 51.3496 47.9238 51.4883 48.2822 cv
51.5439 48.4316 51.5508 48.5762 51.5576 48.667 cv
cp
f
60.0596 50.7783 mo
59.5889 50.7783 59.5195 50.7783 59.0635 50.7969 cv
59.0146 50.752 li
58.9043 50.0996 58.8623 49.9111 58.7656 49.4355 cv
58.1982 46.627 li
57.624 49.2852 li
57.5898 49.4619 57.5547 49.6445 57.5137 49.8203 cv
57.458 50.0996 57.3545 50.5762 57.3262 50.7324 cv
57.2852 50.7783 li
56.7871 50.7783 56.7598 50.7842 56.2822 50.7969 cv
56.2344 50.752 li
56.1094 50.165 55.5352 47.6963 55.1621 46.2236 cv
55.1963 46.1777 li
55.584 46.1777 55.6455 46.1709 55.9844 46.1582 cv
56.0264 46.2031 li
56.0684 46.4316 56.1094 46.6406 56.1709 46.9658 cv
56.2275 47.2598 56.2822 47.5469 56.3379 47.833 cv
56.8418 50.3223 li
57.4238 47.4355 li
57.5205 46.959 57.5342 46.8818 57.6592 46.2236 cv
57.7002 46.1777 li
58.2256 46.1709 58.3154 46.1709 58.7998 46.1582 cv
58.8418 46.2031 li
58.8486 46.2559 58.8555 46.3086 58.8623 46.3662 cv
58.8906 46.5361 59.0498 47.3701 59.0908 47.5918 cv
59.6367 50.3418 li
60.1768 47.7676 li
60.4326 46.5098 60.4395 46.4834 60.4746 46.2236 cv
60.5156 46.1777 li
60.834 46.1777 60.9033 46.1709 61.1943 46.1582 cv
61.2285 46.2031 li
61.0693 46.7119 61.0283 46.8877 60.6475 48.4707 cv
60.4746 49.1816 60.2881 49.8848 60.1357 50.5957 cv
60.1289 50.6406 60.1143 50.6875 60.1084 50.7324 cv
60.0596 50.7783 li
cp
f
64.6953 49.9502 mo
64.6055 50.0225 64.4531 50.1396 64.1973 50.2373 cv
64.0039 50.3027 63.7969 50.335 63.5957 50.335 cv
63.3818 50.335 62.9873 50.3027 62.7031 49.9824 cv
62.4678 49.7158 62.4473 49.3965 62.4404 49.168 cv
63.5742 49.1621 63.7617 49.1621 64.8408 49.168 cv
64.8887 49.1289 li
64.8965 48.8428 64.9102 48.1973 64.5156 47.7539 cv
64.3086 47.5205 63.9277 47.3047 63.3818 47.3047 cv
62.4756 47.3047 61.7002 47.8975 61.7002 49.1094 cv
61.7002 50.2441 62.4131 50.8555 63.5469 50.8555 cv
64.1631 50.8555 64.5361 50.667 64.6543 50.6084 cv
64.6953 50.5635 li
64.709 50.3086 64.7168 50.2441 64.751 49.9824 cv
64.6953 49.9502 li
cp
64.1768 48.667 mo
63.541 48.6738 63.2773 48.6797 62.4404 48.6738 cv
62.5098 48.0215 62.9658 47.7734 63.3535 47.7734 cv
63.665 47.7734 63.9688 47.9238 64.1074 48.2822 cv
64.1631 48.4316 64.1699 48.5762 64.1768 48.667 cv
cp
f
67.4004 48.7969 mo
67.6768 48.8818 68.3066 49.084 68.3066 49.7744 cv
68.3066 50.0352 68.2031 50.3281 67.9189 50.543 cv
67.5527 50.8369 67.0605 50.8555 66.8125 50.8555 cv
66.4385 50.8555 66.1279 50.791 65.8643 50.6934 cv
65.8301 50.6807 65.7949 50.667 65.7607 50.6543 cv
65.7266 50.5957 li
65.7539 50.3418 65.7539 50.3086 65.7676 50.0488 cv
65.8369 50.0293 li
65.9619 50.1201 66.2656 50.3418 66.7988 50.3418 cv
67.3447 50.3418 67.5449 50.0547 67.5449 49.8525 cv
67.5449 49.5527 67.248 49.4551 66.8262 49.3252 cv
66.6045 49.2529 li
66.3213 49.168 65.6982 48.9795 65.6982 48.3086 cv
65.6982 47.6377 66.3213 47.3047 67.0957 47.3047 cv
67.6074 47.3047 67.9678 47.4414 68.0918 47.4873 cv
68.127 47.5332 li
68.0986 47.7734 68.0918 47.7998 68.0713 48.0479 cv
68.0088 48.0742 li
67.8359 47.9697 67.5664 47.8125 67.1172 47.8125 cv
67.0195 47.8125 66.9229 47.8203 66.8193 47.8457 cv
66.6123 47.8975 66.4385 48.0352 66.4385 48.2363 cv
66.4385 48.5176 66.7227 48.6016 67.1514 48.7256 cv
67.4004 48.7969 li
cp
f
70.8594 50.2637 mo
70.8379 50.4785 70.8379 50.5234 70.832 50.7129 cv
70.7969 50.752 li
70.6514 50.7842 70.5342 50.8105 70.2783 50.8105 cv
70.1123 50.8105 69.6768 50.8105 69.4609 50.4717 cv
69.3369 50.2822 69.3369 50.126 69.3369 49.3574 cv
69.3506 47.9238 li
69.1084 47.9238 69.1025 47.9297 68.8525 47.9375 cv
68.8252 47.8975 li
68.8389 47.6895 68.8389 47.6377 68.8389 47.4287 cv
68.8809 47.3896 li
69.0332 47.3896 69.123 47.3965 69.3506 47.3896 cv
69.3438 47.2529 69.3438 47.1094 69.3438 46.9727 cv
69.3369 46.8486 69.3301 46.7246 69.3232 46.6016 cv
69.3584 46.5557 li
69.6689 46.4834 69.7451 46.4648 70.0635 46.373 cv
70.1123 46.4063 li
70.0918 46.8359 70.084 46.9209 70.084 47.3965 cv
70.375 47.3896 70.458 47.3896 70.8525 47.377 cv
70.8867 47.416 li
70.873 47.585 70.8662 47.6563 70.8662 47.8789 cv
70.832 47.918 li
70.4854 47.9111 70.4443 47.9043 70.0771 47.9043 cv
70.0635 49.1172 li
70.0703 49.1943 70.0703 49.5664 70.0703 49.6572 cv
70.0703 50.1328 70.1328 50.2822 70.4785 50.2822 cv
70.624 50.2822 70.7344 50.25 70.8105 50.2236 cv
70.8594 50.2637 li
cp
f
73.2109 48.7969 mo
73.4883 48.8818 74.1172 49.084 74.1172 49.7744 cv
74.1172 50.0352 74.0137 50.3281 73.7295 50.543 cv
73.3623 50.8369 72.8721 50.8555 72.623 50.8555 cv
72.249 50.8555 71.9385 50.791 71.6748 50.6934 cv
71.6406 50.6807 71.6055 50.667 71.5713 50.6543 cv
71.5371 50.5957 li
71.5645 50.3418 71.5645 50.3086 71.5781 50.0488 cv
71.6475 50.0293 li
71.7715 50.1201 72.0771 50.3418 72.6094 50.3418 cv
73.1553 50.3418 73.3564 50.0547 73.3564 49.8525 cv
73.3564 49.5527 73.0586 49.4551 72.6367 49.3252 cv
72.415 49.2529 li
72.1318 49.168 71.5088 48.9795 71.5088 48.3086 cv
71.5088 47.6377 72.1318 47.3047 72.9063 47.3047 cv
73.4189 47.3047 73.7783 47.4414 73.9033 47.4873 cv
73.9375 47.5332 li
73.9092 47.7734 73.9033 47.7998 73.8818 48.0479 cv
73.8193 48.0742 li
73.6475 47.9697 73.377 47.8125 72.9268 47.8125 cv
72.8301 47.8125 72.7334 47.8203 72.6299 47.8457 cv
72.4229 47.8975 72.249 48.0352 72.249 48.2363 cv
72.249 48.5176 72.5322 48.6016 72.9619 48.7256 cv
73.2109 48.7969 li
cp
f
77.6865 50.002 mo
77.6582 50.2822 77.6514 50.3145 77.6309 50.582 cv
77.583 50.6279 li
77.3818 50.7197 77.1123 50.8496 76.6279 50.8496 cv
75.584 50.8496 74.9053 50.1396 74.9053 49.123 cv
74.9053 48.0869 75.5703 47.3047 76.6416 47.3047 cv
77.0918 47.3047 77.4102 47.4414 77.5898 47.5137 cv
77.6172 47.5586 li
77.5898 47.7939 77.583 47.8789 77.5693 48.0742 cv
77.5137 48.0996 li
77.2852 47.9434 77.0225 47.8457 76.7461 47.8457 cv
76.1719 47.8457 75.667 48.2627 75.667 49.0967 cv
75.667 49.9824 76.1992 50.3027 76.7393 50.3027 cv
77.209 50.3027 77.5 50.0742 77.6309 49.9766 cv
77.6865 50.002 li
cp
f
81.6289 50.7715 mo
81.2979 50.7783 81.2559 50.7783 80.9375 50.7969 cv
80.8887 50.752 li
80.8965 50.5371 li
80.9033 50.1982 80.9033 49.8525 80.9033 49.5137 cv
80.8965 48.8164 li
80.8965 48.667 80.8965 48.5176 80.8613 48.373 cv
80.7861 48.0742 80.5918 47.8789 80.2393 47.8789 cv
79.8447 47.8789 79.54 48.0869 79.3125 48.2432 cv
79.3057 49.377 79.3184 49.9697 79.3604 50.7324 cv
79.3262 50.7715 li
79.0078 50.7783 78.9248 50.7783 78.5859 50.7969 cv
78.5508 50.752 li
78.5654 50.2891 78.5859 49.7031 78.5859 48.4521 cv
78.5859 47.9043 78.5781 47.3574 78.5723 46.8096 cv
78.5576 46.2363 78.5371 46.0469 78.5166 45.7539 cv
78.5508 45.7148 li
78.8828 45.6631 78.9941 45.6426 79.3057 45.5781 cv
79.3467 45.624 li
79.3057 46.3213 79.3057 47.0244 79.3057 47.7285 cv
79.5264 47.5918 79.9619 47.3242 80.543 47.3242 cv
80.7021 47.3242 80.8613 47.3438 81.0068 47.4023 cv
81.3184 47.5205 81.5049 47.7539 81.5742 48.0215 cv
81.6084 48.1523 81.6084 48.2305 81.6221 48.667 cv
81.6221 49.4297 li
81.6289 49.7354 li
81.6436 50.2822 81.6436 50.374 81.6709 50.7324 cv
81.6289 50.7715 li
cp
f
86.8662 50.7715 mo
86.4023 50.7783 86.3477 50.7783 85.9248 50.7969 cv
85.877 50.752 li
85.7939 50.3545 85.6621 49.8262 85.5449 49.3643 cv
85.1436 47.7998 li
84.7354 49.4033 li
84.5283 50.1914 84.459 50.4453 84.3965 50.7324 cv
84.3545 50.7715 li
83.8711 50.7783 83.8359 50.7783 83.4004 50.7969 cv
83.3584 50.752 li
83.0547 49.5859 82.5361 47.8789 82.3896 47.4482 cv
82.418 47.4023 li
82.75 47.3828 82.8398 47.3828 83.1719 47.3506 cv
83.2139 47.3896 li
83.2549 47.6055 83.3037 47.8066 83.6016 49.0117 cv
83.9326 50.3545 li
84.3828 48.6016 li
84.5908 47.7354 84.6035 47.6504 84.6455 47.4414 cv
84.6934 47.3965 li
85.1025 47.3965 85.2197 47.3965 85.6768 47.377 cv
85.7178 47.4219 li
85.8145 47.8711 85.9805 48.4971 86.1045 48.9932 cv
86.4717 50.374 li
86.8594 48.8555 li
86.9141 48.627 86.9697 48.3994 87.0254 48.1719 cv
87.1426 47.7285 87.1563 47.6768 87.1982 47.4287 cv
87.2471 47.3896 li
87.3574 47.3896 87.4746 47.3965 87.585 47.3965 cv
87.6895 47.3965 87.793 47.3896 87.8965 47.3896 cv
87.9385 47.4287 li
87.8066 47.7998 87.1982 49.6182 86.9141 50.7324 cv
86.8662 50.7715 li
cp
f
91.5146 49.9502 mo
91.4248 50.0225 91.2725 50.1396 91.0166 50.2373 cv
90.8232 50.3027 90.6152 50.335 90.415 50.335 cv
90.2002 50.335 89.8066 50.3027 89.5215 49.9824 cv
89.2871 49.7158 89.2656 49.3965 89.2598 49.168 cv
90.3936 49.1621 90.5801 49.1621 91.6602 49.168 cv
91.708 49.1289 li
91.7148 48.8428 91.7295 48.1973 91.335 47.7539 cv
91.127 47.5205 90.7461 47.3047 90.2002 47.3047 cv
89.2939 47.3047 88.5195 47.8975 88.5195 49.1094 cv
88.5195 50.2441 89.2324 50.8555 90.3662 50.8555 cv
90.9824 50.8555 91.3555 50.667 91.4736 50.6084 cv
91.5146 50.5635 li
91.5283 50.3086 91.5352 50.2441 91.5703 49.9824 cv
91.5146 49.9502 li
cp
90.9951 48.667 mo
90.3594 48.6738 90.0967 48.6797 89.2598 48.6738 cv
89.3291 48.0215 89.7852 47.7734 90.1729 47.7734 cv
90.4834 47.7734 90.7881 47.9238 90.9268 48.2822 cv
90.9824 48.4316 90.9893 48.5762 90.9951 48.667 cv
cp
f
93.5273 46.4385 mo
93.1748 46.4512 93.0986 46.457 92.7598 46.4902 cv
92.7188 46.4512 li
92.7246 46.3662 92.7246 46.2754 92.7246 46.1914 cv
92.7246 46.0732 92.7188 45.9688 92.7109 45.8389 cv
92.7598 45.7998 li
93.1191 45.7734 93.1816 45.7676 93.5273 45.7344 cv
93.5693 45.7734 li
93.5615 46.041 93.5615 46.1064 93.5693 46.3926 cv
93.5273 46.4385 li
cp
93.5205 50.7715 mo
93.1611 50.7783 93.1055 50.7783 92.7666 50.7969 cv
92.7314 50.752 li
92.7529 50.4063 92.7734 50.1064 92.7734 49.3838 cv
92.7734 48.1387 92.7529 47.9043 92.7041 47.5205 cv
92.7393 47.4746 li
93.0361 47.4287 93.1396 47.416 93.4863 47.3438 cv
93.5547 47.3828 li
93.5342 47.7217 93.5137 48.0742 93.5137 48.9141 cv
93.5137 50.126 93.5273 50.2891 93.5547 50.7324 cv
93.5205 50.7715 li
cp
f
97.1104 50.7783 mo
96.917 50.7783 95.9697 50.7842 95.7549 50.7842 cv
94.9453 50.7842 94.8555 50.7842 94.4336 50.7969 cv
94.4063 50.7383 li
94.9316 49.918 95.7686 48.5234 96.1211 47.8975 cv
95.209 47.9043 95.042 47.9043 94.5996 47.9238 cv
94.5654 47.8848 li
94.5928 47.6699 94.5996 47.6172 94.6133 47.4355 cv
94.6553 47.3965 li
95.8174 47.3965 95.9492 47.3965 97.1523 47.377 cv
97.1865 47.4287 li
96.5713 48.3799 95.6934 49.9316 95.5059 50.2637 cv
96.1006 50.2559 96.6953 50.2441 97.166 50.2236 cv
97.2012 50.2637 li
97.1729 50.4648 97.166 50.5498 97.1523 50.7461 cv
97.1104 50.7783 li
cp
f
76.8418 11.3506 mo
78.043 11.7178 80.7754 12.5947 80.7754 15.5933 cv
80.7754 16.7246 80.3252 17.9971 79.0938 18.9312 cv
77.502 20.2041 75.3701 20.2886 74.2891 20.2886 cv
72.668 20.2886 71.3164 20.0059 70.1758 19.5815 cv
70.0254 19.5254 69.875 19.4688 69.7246 19.4121 cv
69.5752 19.1572 li
69.6943 18.0537 69.6943 17.9121 69.7549 16.7813 cv
70.0557 16.6963 li
70.5957 17.0923 71.917 18.0537 74.2295 18.0537 cv
76.6016 18.0537 77.4717 16.8096 77.4717 15.9326 cv
77.4717 14.6318 76.1807 14.2075 74.3486 13.6411 cv
73.3887 13.3301 li
72.1572 12.9624 69.4551 12.1426 69.4551 9.22949 cv
69.4551 6.31543 72.1572 4.87305 75.5205 4.87305 cv
77.7432 4.87305 79.3037 5.46729 79.8447 5.66504 cv
79.9951 5.86328 li
79.874 6.90918 79.8447 7.02246 79.7539 8.09766 cv
79.4844 8.21045 li
78.7334 7.75781 77.5625 7.0791 75.6104 7.0791 cv
75.1904 7.0791 74.7695 7.10742 74.3193 7.2207 cv
73.4189 7.44678 72.668 8.04102 72.668 8.91748 cv
72.668 10.1343 73.8984 10.502 75.7607 11.0391 cv
76.8418 11.3506 li
cp
f
98.1621 12.3682 mo
98.1016 10.3887 97.7119 8.4082 96.3301 6.90918 cv
95.0088 5.49512 92.9971 4.87305 90.9551 4.87305 cv
87.9521 4.87305 86.21 6.03271 85.3691 6.85303 cv
83.3584 8.74805 83.2979 11.52 83.2979 12.5947 cv
83.2979 13.5283 83.3281 16.4131 85.3691 18.3647 cv
86.3301 19.2988 88.042 20.2607 90.7441 20.2607 cv
92.8467 20.2607 94.6182 19.7793 95.9395 18.5342 cv
96.9307 17.6016 97.5605 16.498 97.8906 15.1123 cv
98.1016 14.2642 98.1621 13.3301 98.1621 12.3682 cv
cp
94.8887 12.4814 mo
94.9189 13.0752 94.8887 14.9712 94.1973 16.2437 cv
93.3271 17.7993 91.8857 18.1387 90.7744 18.1387 cv
90.1738 18.1387 89.543 18.0254 89.0029 17.771 cv
86.6309 16.6396 86.6006 13.7822 86.6006 12.6514 cv
86.6006 11.4634 86.6914 9.82324 87.501 8.66309 cv
88.5527 7.0791 90.2344 7.02246 90.8047 7.02246 cv
92.4863 7.02246 93.4473 7.75781 94.0176 8.63477 cv
94.7686 9.87988 94.8887 11.7744 94.8887 12.4814 cv
cp
f
66.0293 12.6011 mo
66.0293 13.5879 65.2295 14.3887 64.2422 14.3887 cv
63.2549 14.3887 62.4551 13.5879 62.4551 12.6011 cv
62.4551 11.6143 63.2549 10.8135 64.2422 10.8135 cv
65.2295 10.8135 66.0293 11.6143 66.0293 12.6011 cv
cp
f
24.8887 .169434 mo
24.8584 2.34766 24.8281 3.67676 24.8281 5.65674 cv
24.8281 10.4087 24.9189 15.1323 25.1592 19.8843 cv
25.0088 20.0537 li
22.4561 20.0254 21.8564 20.0537 19.6035 20.1387 cv
19.4531 19.9688 li
19.6035 15.9814 19.6035 15.0474 19.5439 11.2295 cv
18.3428 11.2012 17.1416 11.1729 15.9404 11.1729 cv
14.7695 11.1729 13.6582 11.2012 12.3369 11.2578 cv
12.3672 15.3584 12.3965 16.3774 12.5771 19.8843 cv
12.4268 20.0537 li
9.78516 20.0254 9.24414 20.0537 7.05176 20.1387 cv
6.90137 19.9688 li
6.96191 17.5938 7.02246 16.208 7.02246 13.6616 cv
7.02246 6.64746 6.8418 3.16797 6.69141 .253906 cv
6.87207 .0844727 li
9.48438 .0844727 9.93457 .0844727 12.2471 0 cv
12.3965 .169434 li
12.3369 7.63672 li
13.3877 7.63672 14.4688 7.66504 15.5195 7.66504 cv
16.8711 7.66504 18.1924 7.63672 19.5137 7.6084 cv
19.4844 4.27051 19.4844 3.45068 19.2734 .253906 cv
19.4238 .0844727 li
21.9463 .0844727 22.3359 .0844727 24.7383 0 cv
24.8887 .169434 li
cp
1 .23 0 .18 cmyk
f
42.2998 15.8682 mo
41.1582 16.4336 39.8066 17.0845 37.6152 17.0845 cv
35.8135 17.0845 34.582 16.5469 33.8613 15.5283 cv
33.4111 14.9346 33.3213 14.3687 33.2012 13.8027 cv
42.9004 13.6333 li
43.0801 13.4355 li
43.0508 12.0498 43.0205 10.6348 42.6006 9.2207 cv
41.5488 5.88281 39.2363 5.2041 38.2158 4.97754 cv
37.4648 4.78027 36.7744 4.72363 36.084 4.72363 cv
31.3691 4.72363 28.2461 7.63672 28.2461 12.5303 cv
28.2461 13.8594 28.4863 15.2451 28.9668 16.2358 cv
30.709 20.0537 34.793 20.3936 36.9551 20.3936 cv
39.4473 20.3936 40.5283 19.9688 42.1191 19.375 cv
42.2998 19.1489 li
42.5098 15.9531 li
42.2998 15.8682 li
cp
33.2012 10.8047 mo
33.291 9.92773 33.501 8.74023 34.6416 8.06152 cv
35.0029 7.83496 35.4229 7.75 35.8428 7.75 cv
36.835 7.75 37.4346 8.23096 37.7646 8.74023 cv
38.1855 9.3623 38.2158 10.041 38.2158 10.6914 cv
33.2012 10.8047 li
cp
f
54.9707 10.8047 mo
56.6221 11.3994 58.9355 12.2192 58.9355 15.3301 cv
58.9355 15.5283 58.9355 15.7261 58.9043 15.9531 cv
58.3643 19.9971 53.8604 20.3936 51.5781 20.3936 cv
49.3857 20.3936 48.125 19.9409 46.6533 19.4316 cv
46.5039 19.1772 li
46.624 17.7632 46.6533 17.4521 46.7139 15.9814 cv
46.9834 15.8682 li
47.4336 16.208 47.6748 16.4058 48.1846 16.6602 cv
49.2959 17.1973 50.5273 17.4521 51.3682 17.4521 cv
53.0488 17.4521 53.7402 16.6885 53.7402 15.9814 cv
53.7402 14.9629 52.418 14.5381 51.6084 14.2842 cv
50.4668 13.8877 li
49.0557 13.3789 46.5635 12.4736 46.5635 9.44727 cv
46.5635 8.31543 46.9834 7.46729 47.374 6.95801 cv
48.9355 4.83643 51.8779 4.72363 53.3496 4.72363 cv
55.3018 4.72363 56.5322 5.0625 57.9434 5.43066 cv
58.0938 5.6001 li
57.7939 8.68359 li
57.5234 8.76855 li
56.7734 8.31543 55.6016 7.58057 53.7705 7.58057 cv
51.9082 7.58057 51.668 8.51367 51.668 8.85303 cv
51.668 9.64502 52.4785 9.95605 53.499 10.2954 cv
54.9707 10.8047 li
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5
[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 12.0
%%AI8_CreatorVersion: 14.0.0
%%For: (Administrateur) ()
%%Title: (HESSO logo quadri fr-all.eps)
%%CreationDate: 30.03.10 10:42
%%Canvassize: 16383
%AI9_DataStream
%Gb"-6l]PM`OXBi+nIGAmG,3fn1u'aiYr0^`bin;*l=+$s9pbO5ak0`FM5*bML.,"BIA;4NIBiIk0*':S@,9G9Ih]fAA9d+l!"Qc]
%iV;JtgGeS.J,/C&T5WWbqld.hl;u*hX-hU@b4Y8G-i`ki5<jV1Dfb;DiJ,t+#>_JfF`7K)jZ8W0kcq`Y&+?,4?bcKogG]Y(?[mKO
%oCV24f>"mXrr(sEX'`X>1]?IteJF9B:N-5UFo1h%iNJ#4DZ2Bjnau,2natu2o?2>ZmFhU'_]NgS^O#bI2t*C=mIBSIY%"@1a$4U*
%J,#JDU0dA>!WV3GLSslR55pT=I/NOWTBXs7itqBLr;Y(ahn>e!cp0^QnbDE'ros4WlZ[9=\H;n>\a'g1*<#Bol5.4Iq9AAXqj[J`
%k^:**If>+0dPLnbs4.oA61_UnqsQ2q5%"9+gR!E)Wn&/n=AaTmaQFB>qTk40rP/BY>8l&lpn`rJpQ*X-4hZ7;-s5p13a\`AkhkM%
%g61sDXZlE\>fT0`p;p[n=Q1(Ss16-PYGuXPO[nPc4FVPJppXVX.Qk@irU.q^Ih>ZZmaZrk_9L_YT=t*9$*1W"lVMZ69"nZq:o!sf
%TAMjr^AYt8=76EQ$(rmkr;+[)O&%V#dECe=,r"`]j6+2*i:en^rqZ()dFOebp[;G%H2XeEk4D`^eh:A/rUI!@'411_Y9%'NrlsUg
%DI:jmG4)BWP^BuV4^NiZ]dLZ`kkZLL0D!U:T#]=2/I;5tK_aN>IJ)c)YC@9:+gQA:P^drTlH;aH2-`$7LW=l"QG;8TarkE4n(p4A
%ej0u.*e-?MTsa[gBC^Z3s+P.^ougEi/0ESGBig:KF8JKQ\U4/?,se*nl0?#Irqk75hqs!6*W:g,s-A7dHcNnAUHrD.cPZ3,)"H>t
%jgV-$SsH9H6*!oQXVA,l"g(BWSZL/odAD,pl1>3VpPr:fUD<c`J'mP+7'#>[:EGSlc1-TJV\=N+3gG;p:FH)>FHU9I`%kX:O1\>=
%M^RodOiS"3U(ugDJ'eUEZC/l(0I-LR2OG*U`OlWnngrpVJ+3t(_S>;+n0C/,7edek`_SiS-bNB^.ITbWbR=HFc05@uXUdlR3#4%P
%QLM(?.5R=<bLgBBnofuIf#V%9+1/o_n1T*N'pMkEmpsE,'<NrQ>@G@*4H'$o?[TcXAGu&%N#WE,McQ2erfpIt.M9>9qsd.N!K>gt
%a4<r(-Wikh_40CPAhKk!aCSWI?Kp.o93Tsi[))*f1,1jQ/[Lc#@Xe(gXb=DC5J`1=Mgs+YZTEPDP\n&XR$0H7FW1c/XVeHSj?b:^
%$cX!kVLj"0SR>a[.sStQD+/8Y13U%1[nH2\]_l+8aN0&kKplSt"ZOlIM>mk[:2ZD2%\FTI:<kUW:"gEK2S,OQLSlL/)5ke\2D!0s
%^k`D_G^<i:`bOPApI`3kV"]oLi29+7YCAm#hoq_`-RJRPJ'+D$-TMQFrffXTb4k^1rj4$0>I/N4rH!$)^R7=Jcg@i^T0MG`iKLl8
%J]sbWkPef%c_'dKNB\W5Z$,nDelBH=2u-&:$gF&Ll-?]cl))'SrnP]CRkF2L)Gp:bdcmpae#<q&[!e43p^PpjTe+Q<,ON&9qtUHE
%Ehe-\R06^^[<9q>o^D"U#__)@[<I5Kn_rplo)&$@h_]]6`d-%/ID/jX9A^+X:,I"C\a9I[n_K^1ofh79_>sNdq5,GZak_K6!0'@\
%br>I\VUGWk5%6qPWV"g&J+CMqm!^b]H?&$B2rh#&;]V^Ol017lL@K/RRt'sTmpm.*N]s;fe+G-h_h[,S[k6b2Fj.m_4eidEDR$)i
%isPXWp"a$1>0tam4Q`Ne0'bRQ1F8T:9U3WUjY)["s&\[/W0\9h^\)gag_`7(f'\ndnRSQ4qK'KVd^mU0okpAXdhZQ.i1GLo]N2-n
%H5cDF1aq@GHH0MgJoSda^J-EnR')7PQ5/Fu2hOWof_rn;8h27elQ#T,JqL<4oSMe%>HU+s]l.!s'<XCY`H.pF3`80k86<Q$b+bel
%XjWSPf/:*0Z0U;49DGUqo'/o?,aMF4$J>Lu@I8O2NSt%'bhS0Q=2D([jiS6=Dd=$(NZ6c'lX(_/rA))BIqR8"1E!F\FEVqXg>.Mt
%b8+i@4;hGJBT3Z6UN8;;]fSm3$P`KCT8)7@-gPh1I]Ro%T.&h>5/s)#]jTp^[,7?82!cZVga\R+#P?F+W&X5b4U%i:O;;'SSTnG6
%r,*m3pREr$q?!"F"IF<k)3+2-[0Kuumh<`Aj[pKA".VaD\Wo';.b"4>^t_DN?i"PZh,=6<93>XYVjZn;mkR4anR#rRP;XalCc3Ve
%#5)g&G=gM\0^kROE@/rn:Zf9jF'!4_Ik$s(Bm9ln0dQ]e\uR`fJt!3ngoRVhjBGi#XuAq.7;`bLbdHF'kRD#7WX;,5_<M=r:HNGL
%:80Hlc@lagnoVdjDnN_sTqRB[0J+c\L%5\VQpU1Gpa/h]6)VQ)KCquXajtN8HhYZe-<l5D@Zglo*jr&JJ[^"g0s"8_BBLlAANJ.7
%`k/\!."",>+&JN3X>QDlT`o.hVaXN*LH]G,mot\^\<HS4$=;YF]e.`M5bln%/OQflmP&CL7@(h19_#-`bRhD*jMB)T9/D='Xjnn:
%O&>6q&!9r17sN&G*NU!a(^kEG`bsblmZcT),)'ro%Ys/NC@d+@&'_THjL2Oh9s^6fTsQ_,$d2\OFH!cbn*5>E/_,hnJcE,?oUXYO
%AuQ,tZWJ2V#>XN<OfM.mF5BMa*lFCn(.lZ?ns13?rgI*K=rAZLa*Lb5iI_$IY-+Yt(;.tUX.@>gK<A3+4Q"ol>-trFL!!A!NOlIn
%cK+B>/m4f1Ze:&dH,Z&_<A2oT]bo%mNBVe$h1%^gNYPr[MlB)>6mV,eXV0Hsc_oU%33SO[i:e2rV6:^NH8qMY$E-aB*2C1LG<p-#
%?_\e<)?sGk"589,+bPfs^,402nT+i0JMsdnDOUETm3mA+3qRZ<<2acm$#u*P^N[XZ!e7u;g4XO2M5RtY(9;iGFZL!s@`n%PlbT$'
%o=JbIDaX!E@9J,4`N)n+?CmJQfI6*a"Eog:;C3J'/ir/bAP:lD^$j#:@^bAU29SALOq]/:Zs[nQ7\7CWc!J3,H0ft5I+4KAl(U>j
%PA3S,N:cKlmmV+4O%RT10^1rs@U@+D,[)GlOS#4siiNIWrKL3^LG8kMg)-+"<M!IPeO2KieB9[bin`D8+)_S28hX1j>jSFJYokWO
%ecqE1H]P()Fq)['ft6s)P*,(1<a/k!hmU5sZr%k>Bq*YKnVIWZ]5"^M(d1K0`[-hSAhW0Nm;8DLn,T9%^6SAtCB!V3fQX)iQ24g+
%VqUDmkHn.$XeSan`/e_8MnPE(h/0.2T&/K"W)gm5cq-=1Si:00+]Hi-I;RPZdbMbFcfeu!F-3os)Q^\Pa`'$q=XeJD$Wn23Ss_A9
%D];3G<7KduDa!E/^gujHCE&_QbJirpYnOc1h.(&p]4`_:o*-JqWm&%Or/EZBTY[h;Mqb4R-?09.F(=\!Lnr2Rj3<g@o&mO@K7*j.
%hXZQ'ksaiA:Zj5n=9G7h<galOjbpT39P_`LPs]+h`XPr-Ss.m9Va7j_L%=k.]6jAgH!kYmCd-l0=Y[8#G9ad/@7[p<#MUdu.\9;O
%EuD7*-)4&,F-@YllFPK?@7k3MEgC^qn\SC\83"B*)K-76e^7<eg],A!*M_NOI.0\_9$dI[mFtan+]J+kgM4[/S<J)WhF&irEboDA
%Ps^F_C9h?73M=l9)\3fcVsIA&%#E"si(n;U0Kq0_r3(GAG`oPjXQ</"RE[QhfC.dYIQoG_dDil@[CSK*ZWjl$b#W,N[Ae)ijk6Xs
%k3m,V=RU=SZ5L^?Skd1uC)T+:>n#*b`Z])26I+9P_Tg()\C"FOj:e)n7Tr<sdl+>gJ'\=^%b^"Wr\eK5P1EF?2ll$[K/+49[<9a'
%pmtO7Q>>T[dJ5)JYuob]2Wj4e4`+!]``:XZg[Q?*>IHTb'"oiZ89k<+;!;$Bg5qn4jQH<Q4R^;rr3TXoOk6/b*k9nU"*N=X2eI&T
%nSqTt0"i7@+#9!?0tk_VYnaBb`\G`l[+D[Aq:fnL9=0ga\MD=&Y5E:lG(ql:%pOn2lg7-E*,j+[^m(lYC3'lsDePkF)D'Udg\=fD
%\"3=eWDd[`]aQAJ)(JfV.B*fLBZT$^D/Am(oSOMQlA8bMgE'.3hWOaZW-A5I23DkJU.6!"g$#lIr>Da)q]C,l9#9%a>'Oe?25.)$
%ME%UU>1[+<U0u?X`;!u*E:qA>2&WW`ejM#`Hdj<kq/^#'X?'&+>Ma-p[<pB,D[9Aj5%1:]8$dM@.[3pgWH?@RT+dg7::8sc,u"bp
%b[Msik'-EiG<PPij05>?],pY]p=W["8j2V"HIoelpW<C"09J4As#[r?7[iAhQ;[Ih[r7kpr)nJ-rm/@Tm.&p/Y9Z>o^]3g_DlE?0
%f>uT+r.]^MrqO+'p[kM9Gl-Y%=9&'l:N$`X\G>^?^HGp%r[kE's*XLoJ,>k!&+=smoo%/\a.'QA^4(oD7f'7s5(!=ph;e1O='tps
%)nS0p]mT^%-,672q5aJlp8@@#s7GI@o6gJfDn^W!oQ^'(n*_=T^4*_X7ea)N4?gISl7;M-s*q\-q>*`pXa]s1n+b_fbL\E)?8;BU
%'u,)@[(W@dI/3Ng0:uVMYP7\(s25FGgD@%W:lC[ii]Fg8jh&94h*+!9rpoCH\(pph_3[C$IJG1<?@DWoKkWc#IC6d[T)J@!IJ/2%
%c*pc`Dr6'CQ`K#YH1UY_`$$4jVXs(KIsV,PhP*g:K6ZfKf"6CO&%qo/CVf(UIH0A<o:'s-r^<l+hS/lJq`8Kj*F:$FH270iX0:D8
%/K03<#Cb@rjjV[/U@#/`o'50q]^K8e?f*<GHlpf7qt%S9H$]/V1Pj<T5Pt<uk4S69pt=Q>IeWX8:#,hGIsUea9-SGCH&u>fdPoKZ
%^%iQd]6=)>0.1Z8g#t6lOTb;+Jj95+)e=$$\p_9iqB&6V]HX?T/"lk"e&U(45.l2hqW2/Wm0Yl6[pL3Up$c;uUc@eqgUTK'SGK4U
%lD^<E.@oHISG\4KP5G.R]DLXemJY:X^Mil>^>.oKF<Bth]t_UB`;SNJh=9q,mcL\0[0(.BEgQ7C?+^Ph*`;XkrUK<#4Ph,tNr@Uj
%oiR7MR#^\RNrDS@ea<>&h<jb+p@dXWhmV9c>Aj%L\rF2Xf&+'Vc0=Bik3hAVF*huG3t1eZguOrH'5ms*%HJ;tqgR.XrO1VUhHR1s
%o\<B+4`oRe414s/f8f6aP\P.(ctY)`:i!=ijr8$bHI!NM[q,+(g1madk*g%dU&%Bi6b+joj]HED:$JL>>"Zm_PupBC`?"LuhrhV!
%bd[BppY9f6-0Le=bTZjWC-:=M]6$`UkpH)Q;GAJ!PYt0uq;gNahT*6QN48=(p=KieV\O5G0uabfP3Ki3\-p>r)f@tQ/_!T`%Oo=-
%Je-/!r4Tl:7t40t<;4X=?[VRh7j#D<mbhX%Qa#i_@?0L:MPG__lJ!J;o`%&K"#W18X&&_>qj+toQNOX0eFnWg3V#qsaWntc:oB.2
%0D(Ds0>!pE*pMe\rY-=]-IACu%Be&#)\)Lq#(<;`h]Iq:8@&UZX$j9E1s8A;]qK-^C&7SoPT6AA&6]^?V\#:8U$IH[FsQ_9Vc.bl
%c9Q&;K\g_l4?(.O%H77VpqP.Qib1UZ/PMlB.^W$3(@6bkmRR_1?V]/!Jd,E26jm7]bXr7l6OSt2XntIK2+J>mLb]T?80LT>6o$\h
%3_(Bfqf_7b81G0b,pKT\Ut1@_DM[qF7"Y13FQ80&"-I1>&hO?sHTP,5M14oLN_d-ELcQ)e-R/+J`86=6Di"1L`!#hDVkYK6#fI^>
%R%t;"1h)mm@\+f!dJX)-Fi7:2\18/X(#lYkCj/85G=:<Sh<Ec.>6\Q_6u6%_>oU'9%C,Aaf_GIFFJ<n'eg=o@S!O6I43`Y-T3b64
%J::;$Yc!0Co#H7Scf#gm*PVR:E"O(>puemWRXY1t^d%BcoH>tSi1D+eWU&`OrHeGd](fE6r2_MM>mpbMik[F_,ppkYXYpYn^%(.5
%`aPo,I_=AoD"Yf/<uZpshY?VUj07&Q5@/1H[X-sYC;WiYE'I!RT;BMA>Uj%WlX?B9bmm6+!WVNUaWJje[pL6T$>ZF$*m?4l[0sB<
%GZgJBpmjMlLLU?WC\&"&>.PF_Q6C1_gsT!FAo8!@g>1TpB@!*VbC87:05o`15EZDPs-_^_=H"$-n:G:ZFSQUC'DUV\UUCF?`/0=;
%5'QoblK@k+FE5R3El7MnT;J7'T;%sZ+*j@S$2j>iE<ibBLrrIdC%Ag`c]LH$qRP!Lk>0Q&j\O9"4qM^G-IB\!.NeQJq4e]JOfj*"
%q/`I+,CaV(F*$gjJ0s"<9],E?qC2?aqCuO'm.>.@oM4dTG61:)Qn.Sp_BAV@5.CI#d8/@ij,Y'^@\9(!Vq,?UF*,XO?H=\kZaB[6
%g8_OY08DjalfW0[3UT)?B:g.?Cft:tg=`Cl5%XIc7QLs<RQS">Xn`99TD]k#pL/1fQ2fF]rU+a9q],@&K/2`ih!@6'm*g-M1C*7$
%#MZk6HdD6;3Bct[pC?ij"3#&qQpV#bp?"S/q`g>;%j.SFmn`fGJ2Q\tNs]\do#2bYr)l>"/W).3XfSHQYV!MLK9F>AU)p2_O3jTJ
%VpT?A0LZqW)[?X])!_GP)2fBu#t(_9)@Pg@r&X^bW_F15erT&]d>FeG7:Vec1js[4Y^/0<CW_uDnK97?1O5Jg&Y3eXhDB[EYQ8.o
%J=-XO/DTM\/;ZIeR%;&oa.R38AiT;Hb[@\?@a;2l_t*/,(\;8UP?lC$.VtrtPQP+rTY.Ie5?WFhqdJH*j)X7"Aa[[kPGKW_%n7<M
%"qsf+SW(0lfu^>>VLqCJgo4P(:pulFafIH]EQ`osqmKbMga:6g(n>2C<r(43W]O-;BH,HLA-rR$':%UqL_^C&-?pa1"7p;?ap7<8
%VLNPMB.a0+J.mse%H%J=:<XGJ/VCjo&]L;$THC<0;OL\'/tH,L9QN9Q"hBp7M#,d)rn.9P".4jgjC-p9:urqOh=sqAo5P"]EM!d(
%5C\=[I!`\P^>q70cQ%+WF4g94+*X-6)jbhiQOguD?N&u5_-+M1.UR4\%m.g>lN+*<rmnO8)Y&a%Ib:(OQe^UocLFD1j29/7^>p'A
%2=cD+9QjK#XH=P)8;mdC1)I^s5sdH>0;4t1^YM&>lo4@\F3AJZqLeiIhi/uUos]DM>Aqol35\mg8Cn(FI3MDcmH+5sO&uA9eSj?Z
%I/W6K/,\BQEX+57km_(@TnZH')f9AemHq:(QJ,fK*A2.QIogFQU:kaFVQJp;p=cuXCklrc9`?Asc,)@/kC3$5><^*hF1Zg;Q;>!9
%JQ:S)eE'Vp:L65!I,a]o_/nNV6SrVll#k)=ce\.PNmFhU%]jpBe!Ej75';7qr2_tTs11[0M50p$BIne$2fk;UKGO^8Q[\aY39E/<
%?G6;%:q-&h"7aM0NHu!tkLf]KQY\TT<rtR\`QbiHgPb`C(['['D2^!=8m8GE/eTnr^3on@j4@B$8BQG\e]YGOn)N"feJH&'m5j@0
%FBqH(?T!TlW4#=UBXI5pboCs#07W/gs,I$T57.+oX*"%#X+1'imcmH"s3!XUO0uH0qlUrG]`>iRL85!Wqu3%rs(C*cWB?i'U9F*u
%>lBX(#Zpfu/A5'_JgWe3?\YeD#Rq3H2N%0rFPkN)!S0`n?`2S/^TG7'q7:ELA:V(McYFX#D)9hYlb`^<UQj@*o!cjtgMXk4=<#f#
%S$2ppd2rkm6=38?([AS*Df:cDaX!b`@sY-HMXZ7s#jn5ZB9gk`=8"l!s)Im6W8kA^(C&?2bPKQ8?b^5LIp2(&+1/et0rtpX\mDop
%HHa)e.A!JhkA&E<HhmAEr&U`k'N_[!gXk+$'jBU#XFYej%:Z7.CWRLIf;1d+1"@rrkh"K1A/`sbJps3(p5R(V`t[n+dX\Reo'!m'
%/gI#4PrV2,B"nPmaJdm%Ekhrd_,#/.H@">Q*AD>GrA#RCg9_m)?!GP+Dd"W$f+(aN/oOo'fWM@$+iinDl>JI3>/f4:;qTE3D/1h@
%]:[^/emSB`15iQ:5kaS]%Vn^imG$>7kaf8NmC\gpqY@eT[KECDp[_SC%bRqdb[PFgOBjr;_qK.HG&;(+kUGlL$T&qYXOl1W@+KKc
%YI1LKp2+@VCJ06FgY!RtQ3Q*Q*HQ2*Ngo\S[-X]u2BBse:%tttRuZ%Q2Us6-%<\qac,TOFL1@?o9o7DJYL1/3$cn;sTNe^0f1#t5
%NJIjL06qDFT\7E<lV;9$2DWY-PPfIg8H.oZH>SVL6L2-9e$MfrL:Xf6Y[(HPn_/0%G&;*SCYJmEpF?p0FK6O$\Y#;[e2fC\dBdsu
%g)=ebG$oc5CTr4k>C`QLJun'_ZmOJWd@-l`O*5A%B!?&d3+(DM!o(,j=fcJ\D"mnNf1i_8ftM$*Rt^+$F_5%BR*K?Q[Pc^OXj(<l
%CTr4kS&O+4?t]G\n2K/1aBJ"E<rI/B>@^EnKNYuR?q\s'f3M=E_pWX#Fk>-?YV[@Vh=iBt=?G&YC;Zt*lSgZ$YW[8]=,ZtNk4P?c
%&Hck;q1!FR)PgW3*m)<os4<2_LEBuX07?"<=6WJ]kAh.Ga7lt>3mDbrp#hs]qe<[SNU9IrXBZKTXQ$hNYnHiD/Ps2/cZb>$hbuEB
%C:iX$[jIAI?L"s25FBWA<P"1naObkaL.^/5DWBr\bjS2#oH<sOhAX5X9mJt#EY\1n)`ilKb3b9]K#ZIjU>o(Y,JrMh=<#XMI,#-e
%-;RG61pL$B;p4K?#]@p>cL7O'^fY>]DT*4fck=`ejB%p=ZTe5C&-E(dkM'g=BF28jqRRlrDX,h2Om,Z9@'ScBFm$k+]<8!bd!?g-
%r47VHa$uRo:04qX1!8,uYMaPII2,U9Z;AT_BTSS]bqgpb+<*DS"EJHa3m1iB^7li^87],6f.$kI5bg%Z!gG^i9[\ORl?2_[bBb1B
%QB4d]OpG,'=F7;b_&75g,Vae>id;o3,@hB`E"ILUfB_cBJfUi:nHZAG3Z'E82&EK"6;R@/):8Qa,8tAr%?TQ$&i2h^:%kTlckO)\
%KH.?Sah?A\<k%T%F,_Lgao/#qEh-\aE[/]mR)JZ7"`1a2jiGTeW0u>@D$\uSD;gc2%l7tQ[;tmp6HXOU@&ERc7YF7^'n0%pb9eZ-
%,NbPn'm7CR?<J$/ZF7mQ;!FJ$AZ!M2B<05V^Hk0El'*rX?5P-';,tA%_PPe+JcRDr.(;\DI4+dkMqBJ8]T$s&?P&@aa.NJEICD$9
%CjGCuFIgT9F:YJ9.3?/ohVBYK@SKEeJ:_05fet$'f(YC?[R5hKlWY'bG[-^L*>$QJ8I+H<D)"lVr\UU7j9CT)m5je^eSWZaoi3Qt
%7V*1lcglA^d['5fNi/.%BsP@Rl=OoG<9VYA*1]kDTRJ4qLaZXRQ`8;`XO3o)Lsnot.4p(H-P*T:lOprbD&4h0-DN$dq7\XjP8FC1
%0f"91OS8h^S`FqS!,O4eOF2jcN5B5dZ137h$#iHd5M!!\OP4l+gTV!+l.VPfi:1>]\.6T=>?N(:^Q=?A$XhpfDj!hA!_W<$:mn;*
%%\/h:[DW8?D/60da^h:j;mCKT@3uUeM_$6ec4]10W^_']A_tK`>Y)o,X376?87dOCL`2tT7l,IkEKIj+@a1P[TR5tp<X^0+0=UK&
%P[krTUApr=dZC+s(+F.kd0;\3;,KS;)af?]ZHnP=7JcCdMb&gHX/YHr\Pt<37N:i)#[=i1.h^Os1h73'nJ^Ku[R-9;ncN)-+:&Ig
%%CSY?9mHnN/HNc%ZkA7"`$8-CYf;F9`#tM#9dG&k>A7'?bGoDI#B"/\77g.kU>oCj1R#Z'h4c`]'r?mWROdBG;WTf9"H6U4iPnhF
%R.2l9_$"!>R5N`.XF#m/KY%R/l63E8d\_$8HbsAe>-'LgS4jp^lE$j4Bj_ct8SkI3$&/4#Ou$T$g6?fM'!DI]CGXA/^2MEE"?4`R
%MCNKIDV7'0iIZ!3G-4QLjOn?hQ-T>sZLq>J\\h=RY)'jNM5787iQoKW)Z/TEmB$7i0:D^eDJS]>Zdmu8':o!Pg$%MbX@BdihrM*2
%lu20-0u2>DVIj&URTchj[2@.*phD\8.p''FD:DR-W#;i0!K"HOL\HDf06q09YgHb!C>]EK>oC6U[*WZaK&pC1UlqtEZ#7X5*'*Z:
%^>H8Q)ZF&D-C-Q=gE\@&^2"_Lo_AF9e'm@/='ts)Qg`hFH%(b5FVfQJomiN6aa5:o(\d\FIcSeMoYT"2?-aJBa*0$SFt*U/ri[,!
%H2_J)hu7X+LKq<eGr1#9-*=`K-(eI%IGqNP"Q.FIiY_Mq"+Q;ef]@1".-0/tD-SD0Nsr2VYe;)&!?k-',ou3b+@i.#J.t#<VX0]'
%A#f3ZkgG[#6Mo3Y=`6-@I3<lMXD@9t.Z$Mu6k$eabbUO3Yp(`[U(<>Y(c$7V4>?n/;qEg3i(?T9g4Skd("jed*\FV8GhnPC*@`*j
%9u,e3n1TV+#r<^gUBoV5*n^n"gg_ukOWEBtr/_8'2l5I;)%_?[`!mmI&Y$*eR:-r>W`Eop\3C<"+qGrf!=b@=CgOQ'(oWMjhL^[4
%#=sQ"g^BAmK"cn[8UtWY52r$jl\NeeqOU@>\2/u9`3M2RH\f+$GYg?4,T_8l@Q.ki9&t>YnNH"#jcOfTYSnRF#2g/h(dfGQ<oE2j
%n"IZ$Xp_]6'=H?0>8T442H(RR*fgGMKM_#ND#><>RB@^:O4Rs<<Ti1U)G2E<o.Ep/RKnrUL3OD$enD11p^f@rCKr%o'd=""8*C!!
%-\eeB'iQW5naGD<Hd=c01!(aDEd:f#\tnt00VZK(Gu)kTJt\?)b6EISbo%^IKRNNUS7VIX%6.\A1$6#NHk/6Y@bK+aC+=6qZ(SHB
%kdS[.',!C5@ZR"tM(mm$2ZXGP`/^C5%"<(AjpKa"W*[4(A-+S-(u!HmGBO*-IRiIdZ+3Zf4"_I!2X%M;qA.LP?jRu-1:2@>!qmAP
%a]:A#\d?PI6:<S=JEtFi.a5^c$8C[=kT!SZH$ErlCDshG%)A\L`",[-54Ik7#j-mJ@UTBe%>kPS&_%'+X@SD^Wl1O_1X.Akg(5f[
%@T\4:q/OseRDu$Z6YO&NL1-:N&;lPf%2j@B#OIV[Y]KFb>.F"TQ-p\[/F7p4><^=kl'%m)d#S4F,.p1J2%\h0.N!"s5Rgjt6t.DW
%g!F?dVV69eO%(\$!h0`U1`?a&V+?s"l&aLB:Rt.J#7Q:<SjS0k71CD:Lmlm3RErfER$'R>1gJs?A6D>:*WZ="(WY%ZUPbBF98"C;
%YR;<fb)gdDLo#'lKk]bLQ:_P?g`pFaFC1HG$U8?mNK?_R>3WXofgC?X8g_VdA?0g?NV6.]n#9Lb/EB>q#8sG[FmfH&g9F+_!_5.6
%bsiR5JKPZLI"NRSf*9;PK(m9Knt<.\OD%B56G^b<=o"Y0\@N,6.q6<lHCY6H%T[!@9:eQaWu&DX`'J2,^j7iCTsETf`$PlmGE9Kd
%l/&Zkf-(gSZR\))W_IJ9]qR]ec>?s+ZII+rqHfVl\6"]ECW%c!`gjc''J'W6H+(SrN]+9,$56lj1ApE"]A:,=YUNL^(/3)0r(IoP
%77K<X)s@U6&^[m#kSb)Zd)Epd$3&A?%`pW7N*VB9W""*t:)G%q=ZrgZk`*AcG#,QRY>rO5?J_%h,3=OFF9k[.Xm2<d"N2H[*LpRW
%..BO[dFIES_L2p,l0UU-oiRBs,+7X(^0AdCho=6hnY#alOd#ZEd(j`MNfa#Im"R&2)ao,F,@i^;d6^A5gk+SlWtQl.R?3Nc6":5$
%nZs'5&CReFBNY$Ee0$lRe:b;&<I.J$5=,`M.u6)SJ`SjW%W(>d&sOB*Mm]Sn.B<QSY/rq46ol!7Hf@5>"V*CHNh*N'cpq1Y6jPKe
%c>3hUde(4sCb&?VfT1R-U/0,SU[tERD,+Q)`[8!GSBh94J@@KQWu73<G5$nsUsqn/fP)]^k(;rZoC(4giFfq0SX"B"]O0-M\q_m\
%)D_[;88U=H9dLmtkZ?OdH/>>h'e$t3P!g<1=^(Tl@#Q/WiQ2]>MM]t+HU_9rW?U[doDr9YC;BCU0[nUk>:3%Z<`88]4U!U@g&93[
%JoioldKYZT#oY:/5BrC=d@IXh'dX<7b)[AJL0E`5Pm#t(R:BTa9no<(O%2=qEO;N4Wko6^qe#3T&H7M(=aM!W=hBlNl5Ug<?po[G
%)Tb$EDAi]Ecp7`g7-9Epp!.P:2FU(OC(]_U,rkUT43:FJ'at!@dgO?W>ps6561+DUZl*&2OBWIr9`[d0JHTj7(1B(T5(fh9E-(1K
%f"rT(/1)2i6=q\WlF\NX8sW-`h%!pWGfD5l5$mX<ONAl=4"D\QqMO/pMlY,u)fl52:2&XpOl6b[n@:Y.?CTO\(=+0AiBp!a@+5AZ
%8gLMsC_Xo!&O=]+fE%Q_S<Mah&U)u^88ip2I5cBW:aAnt#'qe&f8]S.#Y;0?>;\4.h)>g]K6WlA8;-9%=>20X!$lAR`S:X,E:B>8
%B5+[[a0F"0NWArqBb:JF[4HuI"ZJC1ifG:G)S;!q`aMM'foeDdj/>[<gmGPOLmV=A<urNsEY,6=al\no.gINg48W.HasC09Sp(Rq
%Pp6oO]0tPoXrPM6MiZ&a>ZR1$/hgNjd*sbl)nU,.bF!QfJ6b10m_I<AilWE4#RRSM)7sq-&IsPd+ZptucS9.<%*\4#ip_BLPp8ka
%>3.>EkTU9NYWMI]>WHm,6)X%jFpm<5m/(>hR00W1A0<up)L6L@GOUUtG`bIf"%NsUU;f`>kE$g5C\/Md\WRkXEf_h$A-q0-U0/gD
%EL3?eYsA`C:-BJG+iKI%8dMI0MSuimAOd5KNGA5Y-UoeL/16Rmm)VJ>Z+oMAOlN:<iu*%$YagDoD6i*\apW.]\653GKZ.qQ+H[Kc
%Q=iDl@H@dbQGejEmqOtHQs`-2TmP,3YYZ[X,L.qnGi6WY@Yi]D_gWU!gmG153-#:"Z[rSEaPlkZf,nHH8jqAjjQUA8"u-grg0P[L
%hH]c1Bkil"G?\2cQ7hV^F.0fZZLuJ7'8NQE*q<>?)A=qU<X]Ho_O[2@U(SME&m,LBQSLXA#pQkjHUc+[A8Qj&'H#*ScpcSBfG=d<
%dk!W[L;'PAiCnMV/HpCF7K'PZSg='`)kot+)0lC?@,QD>Yf/XQ0ME5n(^GFU,-'S6-p9i\11`?X8G-QeDB`_&CT:L!/s.+T7j=q@
%=roAZfcCcB_4EU0&jj$BXAq?Z,S.+tBO$e@F9_D>U:)9**\%pPVE1P:0Rn0iF[-L*)\Rol;o("rl-ZPhs"5cXj.K.981h'uU,@Qp
%$k7mF'/6H/IV`Sn4:&^,9i!%Z'9`>r+cabuGYutB,=u!_Q4!hN3+?V77N0Yn[,FSEA@\oha:TcE1Fu3s$%AVj"EiupTU7[Y8dKFA
%Za#m+hB<$>$3#aQ[:2lO+r%7b6XgiY^m2`2!=/f\%bmpg]FOV)7*M^[jR5C:\A[8:gV=kg:W%=V2=S<f/NnHT!J(QaJ^">,'0\:^
%5&3#/aFX3`Zqk5i/T;Nu]`e&`B\F>7<26pR-#>G8'+TBa/sK8(X;jn[3*BWKDj0Fua&*Da%%I\IRjMe<b#GX9$G<N&-NbAXD,S5d
%(qo.@@[DfcZc[Ku0//gT#@lIh#c5JeT8h4N]6%HLVC%M;FIYAOj)F6B7tp_Mp$$/:A8VVCl&\FO@Bc\+=-u>'`ht=@#tc$u*Q^:\
%](pG:Ab#'8;4Ge,JpMRiMcjG*>m7d<-"qa573"F8oBWV*e]#dC^TJn<$Wb$&g5m!1LL3PWK^%#q#EfY'n`nJQ:h*6@Or-gu_lKgU
%&VR[al7*4U*em`tX+XBpX$`n]KaZ/P8"1bf)>eR/+"DECFa+?Ie]+_lC@I]s<tSqaI^jMc+d)?8XWpqb+Ul*q3#YO4]d.e<2bmZ?
%`/ZOa\r,-8%E#56G%B*RR9*J+pG!,\N_$Gk+,3jPX^B]mX&iB6=T7I5'aVU<L0&"E[!HlIV!Tn)<sQ$(d1<Djhap[^]K.7o9WM`"
%*>*\A1c"[f$A=tD9YEL&5QL*!'a3JaoWqIti$aBF4S-?"R<$cW.rb&o)I=H4*kK$S]K5+unU/lfUMe1)8@+3S7j)Z]3p[OBl-r#R
%f'J/j#BcF^BsLZ=SBP>g3[APR8Ih@&4iY"CFI6AJHA>,uKXhrMV*hCO;=E">3oi+Sa:!.T$D__9=*lr<o'%A\S)=+iDj0)J`>I1P
%07NNf2nQicb5_%jY&<Il^\mKgrnstt^,g)=3\PDnni#[/Q/&*Lm,NYUT9o#7:G(#hIec(Z^Xt^Lip`B@i+)i&4Ws]m)AHuFj97):
%n3)Z),#Cql>Vsl?&iX!#g_"Do&1T%iT(h'7[Kk$>_F^b<;utXjKV56,kaAhG6k`]?Sdl^DG%_QO;2ioo[kqHp:Uf0/a=I>Ci-A3-
%7)^!!kmIuUe's3.CL$aW`3SA'T@VVT%S<KCF@Up7acl)VOc`"j#RI94G*c_Y@uIM;>rHfded&bt+GfTS/m<$6KH7YX%fad#>S*CV
%$$X=<ZSWnl5Z;#<B/a7X&AAXh$!Kg<fqD;hS4H!q_%pP0oQ*HHX#4Ti7&:WXk=mK#/lRn0*/2r]SMqigE(G\PEo96]E8G\%0f@g1
%&l)k2X9fO7W/mU0h,-HS6D?4:daDD^?j$GMUSYDjf`Jbig(r@27<h8U$5/eYQaUJm[il4BF2b7Se_6`*=bb`L\1J?^"mh@G,*PQ-
%_L=d<>*6_2NX,oM">OmBm'Qp$n'LBhFTn@6_X[,n"3u5NUk^<Hk"1Gm\A%go_C1TZKi'O!A!Eip%Q#P:_j35\3;DR@T2nR4p/=V`
%c[M+CqWt,G;P3op;JO2MPZ!*]&;O[9'[rk?kA^>KU+RYi-]r\HrR<UkZbmjprTY36]_[up:B+i&:'SO(]71Wn++KO'*tqPKDtNR*
%Q$urP6g:5DI;k*Sl0"/k_PrXf,Y(T8*$i21FQ\`68I#2%E`Wbj$AJphN??9lo0QjOLB*//XV?Je3XR+Qis9rJolR^[Z=7X51Sno5
%m'rIk)d)"u"[h@_8#06T-=Y*tP*tN];]o5#1&uV:$"YdJ$=?JK$juA-O>m)k\9N(_JE3`GU9kdlD?sJm^*9n+S6,cWjj^>hR"+lX
%3P#e^29@Ur-Q>R7YCM7+.S^Rt+X$=X6Fi'E]u3h2[!p+)n?S.<9QTS[Vl0a6!Qg8+0P3Gbca2nP5$KZ76(esr_nJ[&Jff0BpDP07
%iL[1+o>0"flajLPXG7LLY:JVJHWK;T[Vm&Oq9n_f,^k?=XQTU3*4B/B+XMU\]6k"CIKUTlcY!o9ra@![/'<>KTq4/?rHefl)Ad#f
%Ykd<G;/@CU3N'*3?YmLq)d$!D@dW5$i2%*Nq7f(3ZC4g),A_](T_85`$61Map.pV!E<sprj?_!VKE2im:5fQ?daACMZE"Fe_nusY
%@`i[K_M<bo'>"Q-2E$4R6p8`f%r-@nKIiLN3&Vu*3;1N\:Q-K7abB1)`\)o[K)nA\G7-/u%bZ9?4SYhl^O=S4RUg\AhdW'9fp?1u
%%*5RHTM03d:F&H#nY&NK"JhS_%<3Ll`9bXf9`('F"s,c,/$^]jW8Q3Ta\G<R-skOV'P4nZ^2#5;Z(NaO/gFB)Db'^9L7GmsRj\+X
%,ca$":;#MP4!:,QMQCQYDF;9mB+3_CJNG81#0'8J[_Wu"K8DbJEcl[")a1MTN[Uk=LPQVU/3+Mlfa%1r'O9Yaf*O/DE5aAg01ru%
%-uDVjEO;?"@-oB@6;-=RFc^<W0T\G!_,).Xjt($t;1Mc<!+dbTopB5IN#QLD0GYAP.QKTG2DuLS`CU[c/hf6m`9i_aB!Z'P9;aY5
%([gl3D[t]Z,g)_!qkUYW8)jo7G6lf3<Tk+L#RlUQBMDsR(HLNn2mZ17C';9uA]N16(nHnASc=GQH-l:3U(MSo)ikh^/EU>J5=@p]
%/7ES`]G"j"EQjU9F_SLLnI\Cnlu6s8SombEW@&W[Z"T*ppPf:YA+T*j=>lNhUCNYE9F0!#Q%an:V1:Qg.e?=@akVId6Z=!NHCGuo
%(N5$%0]_&M7Xf[>R=Da7'QkSXcN"p9$fo82P'Q4E>BD6!K#gloLMk&EU)qMiFsd`eA@XL>jb<-&jG)-5oU(8g9^FdFCe9<hR4hP!
%eaBboF*(:9NV2YDi,352MIau-Y:I[Spg!3YK)@!&>d"#PlA2pG?k8.Rp%e+KK8-F9'[n%+qp%<0#(E^[m(A5X%b5:kLC^N-[X\Mp
%5%HB4M84M$fjU((0emktG(k$\&Ska85P'=@(Q;O6d>2^MCLV8imn4C$OMDJ1j9.+;en\5*ea[uD(]ic/&(3*\A4m/TGin#/&?/Ri
%LFk/B,?)Bg6:2fpN$=-Wk=mB`_U&U_85MQZhN&<:KtLCL+Le$B\f/K:`Kt!IPF55t\"Jg03H[fA3:p+L-k">RH<0*L`sBLa\t2XX
%ElnCj$a*e,KaM"U)5@1qVkXB^jld1ud?4c_*1TZ.?cRq!51`>rMm8.SiGED)i5goYCn-64HCq7Z8Z>^pi_e'*$.*.S$8_g[EF]4t
%T(YM$#]HJ6Y[E%r"lsgqHbWAeNK+eY:&kds?,W0CTL<(g;5Oa,s+"kDTY9G;,:J--K`j2M`!Y4NL*m4.J3Gb(2D;\d>G.R'GW>'*
%=.9\.$R!o1o5XpsW3)O5Mm]rE*3%M%LWfGb]bA&;EHJ_9k%s/jWq):OcQi`j8(f1U#q<fuJ;#^`@[RH;1:TK/Sk0j`=eKXNH*^F.
%iX<p0'PM//aPkg\bn@_Ep,[cj!%)e*lg/_]eJSQ"2$)BT=hIm2Bo''f]*o#^c?83i#`t7`\%j8$l,-p;NflK3m55<%H5V88%6(q2
%\o!pZDOXr[E&3(P?:I#'?069a"%<]deT"1!:EGNKZ5ZH;$WqqQ<4/ltc[-f!'o8rH_]I$iYhNKJUrdLETYLdIXdgW?D$tQPWF>1:
%"YM$ei+9:%f4A9$3&'EdNcAU!*BCuVihhQCD3Ep'IJ>)M4m1MP#(VUVAs`E\N<Sm:khh@t7S(HYc(Hb5?<smo,tX#)B[X+.njm?@
%Xs64TW[ErrN&%8\j,`n]YA?@G4hp\>4(D_b@&aOtd?iu+]Y%<'U2t"0R6:t2[NXmHK#QlobU8Kig$N3CE\eaH)_gu+eBODP&hr5P
%aCYDVHr0."1OHTJ@A`q3lZE3:,FICLf[8qEX"t/4d;X8'<h#"1AD:LtR"L"0j=n=K'r9;"#fA-kJm#l[_GBi>dqaSGh<WU'"9p^<
%E8KKL/c>,k^;TA\!NmYL^rpC]YNrjHE%mEl.ISgC35sY]]%Ce)^g[A1/-3dBH*(9n>X.8J"\`[(9<`F#'o,^l]\8B2JV.ofgp_Eh
%=1djB!]M?ki+9:%f4A9$3&'F/9]ga\<'G8RWNb^Ro)eoU@o^VUQ,TT/4V4#WVC!'4Ys,U$\%NuPB`MuQ$@L4I'VE_*[Y5Bdp:X5Z
%Acrd[N-=p+bj,ZBL7C07/6#3AD'5bM('Rsm5%$)t;.^*JeeC,l\4J!B)(=]M/1O1hnJ*S;R&MNCSO-#+E<uFC"*dZ&4"L7W3C,74
%k+]SJI8L$">]`pT"YZ\SLEh<fSkW56/J,205pUAJj`QRbi9$3[YFC<J5DNMM<a(.rRR\>p;us>kM0.:G_hh*-n`>lgf%JP'l5kij
%7%uaV%iZ;'id"9c=bu7We,$p4JRDkrWXT]a!?>X_WN3ILcm6A*J;PD,Q0<&Xg*M!B?r=dgOBI)t=o=@;)'seYVshTNo<RdTZ7F0^
%fg9irJ6>!;0e>>>`mLYe\olpWWLj9*[ViknZFC3sKBUE.>EJsgeApMcF_dt*.=a-dbE8WRdpWl&`VGdlfdm<)>ap:[2`m(j/9ZV&
%?h+R^JWi`$^r$o-$%6,a"AI$94S.Zqjr#JKD(R-6+=EK8+e0<bb=D`qFM\>"X&SI"`,g:2l)%c$#BHtBTGf9@8lR!:\69L)OCl9G
%Y+Kb(L'>m+R\"Pr[r#?8cV+OGc\W$kCn74$BZUm@g^&@Pir>fP)n3-:XKkpp>C)/?G#V13*_T=7Tqp;<Q\#S\&)n!tks8,LS_e1_
%,<3LEH+YbGBt>p5)t@s"@#2_E[#oba-5]BS!Z5R>"l+dj!A%7*Q5#(i,S$EnVG0`u")[qN9BWumYW$KF$SX!XU3)5J]^!%QB!5<p
%C&tWMPn,km<e+oi,3GCcqA,tX$P:O#1,3IcQt<>(nn)iCJC4IA/;3,S,`t_)R^YWP:UuJ'2U;3_$#offqg9*A<5L:S>^6P>"<+;-
%HGp4qQdQSGpjJKHF"Xo]Do+3Namsl7/4Y`]>sZ>mf"pN11Y/RIA>31"G%\)O5?E9^*BR]fPLS=s@n>d*7P`MQ4-\u-%i#hH7%hEj
%"!)fmMlZe#K^P$-g/8N8?:tt\*G$tR]po0fWg/\M&$W1"-l"Z#`JY+6MkrF"Lj4<X."/N9>=9kk$0*-fQG)_L0[LSp/('/K&G!m]
%F?DA9e5NcWk?/(HatI(t<6J/lKZ!FR4U(\c09YS[j]%&KXK!Gdq[Z9mrK5kg?72\Vq9_*WGK0M`RTiT?T\)An6]e1aF<Im7]PVL$
%0.di(fLC*RRBfbB*!@q'5CuV3l"Ja;2Un]#CoG:L,7*:Do"1(!/)YdaqasjZmATJG1cke@NEZKnflgFk!!=W-@-^uB5gcMg)8asf
%&&uqRLQ-_t:^3Dn5%7.k[pUZ!I&Q=iG6E_uD%e'GfeT"DM64D0,heprD&p^hM+ud-,3JKp\k.I+NfZ^\YA^V^qa%f*CAJk,b$Nq?
%du4jmm(mRG+/?lm"5?^]Z=Ye[1]m<T>[8jMg!\;1ZsWOt<Hpp0i;c?:+\VQG6"ZQ@!ihU3=X94Uqp,'2^?O&kj#g:[CRXA*QHj05
%^&!'kP%^/=_BBN/[ap/\R15U9m2\(Z(F=G0IdL.Q1(e/9^JL?:+[_P$Cm'[md06^-MnFbO2,JmAQ^C_]5jVL5#YWYUC7sjh85C.U
%4YrP'"3VoY#CJL1JMCraT=+CF`"B2JWYm64W<<MN!6scJ<^m_tR:R2uW.qID-rm%idQn7.<,/93bVA:f=$DgXG%qVWKO*6/JS?d?
%.g*=+aeuFi+(Y6h7l3qUF*b0;MJh('McnouI*3<A>N2A`:pI-Z4,$sc<JGh$g!"kCE,f!qGm#r8a+VVfD8"R+$oX;%]:lfMdG)XK
%k-^gC11+u5T,u]7P+jQ!@O/#5>ah_URPchG;Nl/b%-6bVHY\^BGkTd3S_.>R,"1)J[r"/!,M6Z$?=Xi*MM9.)g;A>Z6iH3LH^RTk
%BH_EpW,lep7t_-*X;a'C1,oUMGtTOIj+&]Bq,!\7T;H6e58GIeSBphDA:[O!f+/N1-Q**sHjZ@4"jh3T92[@AVU0<Z%BbRFD(,%=
%7+I\4jU1Cl)f>*hdC)OKo6EsIUDO54@'pE%V-[0L'X.%,'LV"76c_n?C&1//Q>>"lI+OX>[QH6#S6/<QM"+%GL(o65#1nD0:!bW@
%.c[=G<k/fsA!F;3-F+;"0XfTX4%)c*L9s/h$]:N)!17PM.F?ZiNJ?%)KLjMV:sF@f5A79]h8@KNH^B_Ucdh+jb6s_kflh7jASN1R
%F,LHmU8`rr&E/>3KV"0c!>Z+eSfG2=*VA8+_^pdW'ZFN6*@20u33BrR.YPt\2!NWY:Crh(QD,mB,7sGYl'iZ&1A=7Q*7!=uh^nNh
%F7i4<Mja1dOU>hbntPRX=QlTmXuW4]Z>'r@A>m9NW+)_n3(9`"-n^IS9NR-AEB-8!G`akGBOKRX5a`BdiU"mY9QK!j4><rZi_^>Y
%a>CsdUh^'BG@,0].U"R5qklc?1PSA&6-NZ%:t8A$+tb2BYlX]TM,k_+?S5([@+M(pN!3`T8_[drM',ucaJ>4W_V$PY[O$d(k+Emg
%>`O<=fu!c'11SH;cAW'MoNr+ZQ'il'!PVZdLd5oBJJXdc4p#'%QoQsAF&;<@"WufK7uQfog4\F:F;NuiWo2;:P1HG7QA(5uCFm^Q
%Eic^?`j#Q&WLD.e3*``HZu4SA*j(3$i-0pS^nlZ9Bj)]s;1_DjSb&HSjGaH(AaKKf=[W<B.a&VsMK[Go)1"shC,e#Qb*F7,<o##g
%^#H;ZjE/;(20Y(h2le1e>,YH^A..a-J``%r1iiu9\J7.,:0P$58b6r+a0+1]AaR9mh*WeF'@fM2?%3/ipLH9A:9n#KQE#qQ!NNCq
%#l?G:\BVG0E0-NENL'kFJuC50;p['5Gac(_Y3AjDBLYFKVUrWp#dua!NOUt;*A#a_.i%:T\r1+o+:1WlI0ArSe:FbNfb/4bL$Y9U
%DfTEKZ2Z5('TibrFj@o%/lK[W,39jV+/SOdr,?)k19_rOI3@pI`]d9>jD5FQY,=)Ve8h[C[appWLel=2cp59InP./:8f&sHCE"Zc
%7h$PA\V:7t,[PJI1IL7!l^eV'#A9fN]kDA:CFb9:^k"iZH5'GqJL5>8+=^S"j!c?&18!9bLQ`]OB,DFi("=@JO`bT.;jq#p,eZfX
%_2Wgf^A5^uTk\oCq.-rP?;,C%1[]>C7'E"nf^-*f_Lt9U,/@G8H<E(qm<f)O3.,PM0!FSpEJd>MI'S9/[9Q.&ON$!*Nq.QI\Hg6.
%Io.ErkEA`j37AEThtHtBoSIl#Afe;5Y=,$rIbcuZKld5Wkpdl;drJle4:c*U[V=Yf>TtNV`HEY7[6f9U2A1aYS"+@%7F]G*@I=da
%3b1l3b2.Vk,C^Q\/!>1A4W9FLoEVd^<,#`oKDA7c3lQ?Q"2ALD\j0M,QnU62qT4J&c*6.T#![,ObqdB**!E6?-,?HsD\mUl3q/:Q
%J>=<e)'O`8kSE":E/kYN@*b+M88;tYd#r3gPePb_X7LmjP;LBk]\$]W=euG)Qta.nC:7[05?DWTb;fneWsD4">8uGRA_b/50/JfH
%.rWN&9s3WWW==Xn1cb2U?q7'kcD9o+BphoR^L\`.423b6b<q#e*h/s1H<,PG_8%e(La;8tlI+WRh\$IZJtfOQOG;YaS?75E;gpp#
%%GM0JRSYXicg:lZj$.&*pC9/S5_^YqLl]l1)i9jmb:4`V!]SlT4sl<9W0tH&(bL.sfPVd4V6Y2e'NomY@.V3mGVn:Xgi[#UO)>s,
%8]G9Bcr-Ktd9eM1:DWX"n^`o16ekqZ<9u!g!CJ9DW<3$Il7Q3\0u.B&-E0cei\SOHSL&-DP-tcj>8KjM:!tXCSZ;`CrIS"_#lGH8
%S]4u$d6bGurdPVjs7m2d*\k21&S2EW/@e3:SOosHO)^4S8eY2b8)DQo@:io/g5hkHKM/$`]NL#3Zj1.f/p\e%XkU0=q5S-=H"7Y^
%A)qmEVug9R=9Aau?O4ann0m75[cjJIcaF&qjG<>Y#!nO=E/H0hjqXm$81FsWQ]CAO@4#NU?l0M&,,AZlj_Q-eLQ>4,,'lG)b"HE_
%\3QDQ_D_bG1GN\8e_hb;S`_^]D_Y%oO2&NNpkV(Rd;mpFcLH7ecJBg<I+U9]]c6`1m_=3<W.Hr4WldBrV-[gX6+7mpcm1GG]u6fO
%W(N_/4ZpNq4CW5]p@r`7[p;d)8`EFUP_I(r"<DcY*)k@65%M;o(j<,QD2B<Nr3@,d4t.XO(')^',Z7YG8B19+!?Jd$::oF.T7Rg7
%j(DXbX4h]oC4b3]-$=Nc*\]49HkEF"bA/f,4X1<5P)k0Wa>L\MLG*fi-L$F`=(ci6d8?.g%/Ujml!nKIoV=2,76A'sW%W-+Wt^Eh
%6:4KdltDU8Z&)>AVI/%3JP5>/dtd_`%hA,Tff>8F=X]YQL:j$c*8hVPE9@&IZCMQ9:-J_c3Z2A?OmKP?/`Yo*35%k,-`olX((kU#
%E"Hf<n)^gOTgc"Y'H9Qa!!Lt>W"Mk--lAi1P<q/,LnW+?@&HPG)LOnhBZ\*kYkKi_e\!M6I>#Uh1/0%K:oN9Pa/T^2QB26X"*&al
%87Yag8HOkrmCc&rR+CR%<7B\Uf;`!'],H`>7hi]/KDPFN;iU^_8U4lVZ1;\7]RPn](;8)3]Tjc,dqfrV2JVt<)m%bdEj=t'5L)'h
%bMH3tGs+@8fi+oWD(dtd0m!W2.Qc]rO-Z\N(1Rof>+/LDAR,Hf)]t"f+3fF11$TW>O)$XIFfFiI$_atYWiRm-<7bYF<(*(Kgf.i5
%[an=R)&*X;6Y,>MV?R*\8<Yce)C%h]lB?cF/.&Nu?bm5oF)cBVMZs`ZEX5KZ=kPS4HRT#TP-YGS6aK'uaeE=#!=4WH(amKj5JV#a
%-f(:/3f_JY1FCG'Oamp\*rM^YAU'W1F9&ma^`>'m>\<N(EPs4-bC&B\\V71S\cU)5j9<U:BZYY?_L<u;<3gVefPKf_-DhdDNC!c?
%8cVj*"Nlt\BGi.%SVjt:I3hN#o!rJ?Wl=0[5[?3/?]7V5=L=s5=ZLbJA>":[bXVl<M5j9f@UY#L>b7][1IDqDd-JdVW1Hrp1-YrR
%X?aKd`B)@'"5'n-RZpP_QF,uieS5007BI>m8B!,lV`C^^k>fd,%CY;r8WF?Va^WeCn1M)RKG+'E#]IIf>?=r<3?Ag>j"dl_O9c/Z
%Eh8]B;sR;eTP$PH?SU@grY">./T3oH3$b50,J$`&!KZoRY!JF/og,+4d6F'fF^FZ5=\pSE_T>6-<*Z5-45<mhr<qHg[VmaHc)6'0
%Kd]+p1rq4[Ba5W]Pq8c3/8V5$pgPKQPBCdkF**>(O3r-om+'"p8.g$B/TC8>b$jf_&Te%cQS`ocehI5#m6q8Q%GOIYXYI=4`D3[Z
%Q@`62MD5)g=k-/OaOl$rJtEIQV!-pgUJEIg8[SZXaX"Z(=Qoo)XRoQ@>2o[m&6>(O+p%CPnb1eu4Bu2K/+nKlK3i32;2B4J2$FFn
%F6l8E/E@WbRuTI!L8G*`8$+F.?gBQ=2ejop^;X&ND\jKkONp]@cAQ-gNMBFhk]NhQ^2r.H;fu"60U114D!oqRZ9KpDYe!1&:EX:C
%NAXm)k&o9NlSr-KW`6<4>)4>^C6Wa")7qaAM,F_XaB^G0MH7HZ9AMkh$h:YGbIH,u%VAtP-X4U,0/'6U"[#TZC[**oQ8*TlJe+1a
%G-6(PU*#(@TlDnJ,r'Q72FIRdeRf"DPYDse8RT6f`M0HB!u"2h74ue:=i640(sDOBBHNQYZgmJ!:C?6'"G=>N#&i?_p9[`'5[dHs
%dD_Q(m-0C9KIio9/HDc<VOWK'l6PS]&QYL20+umF/\+'7!-KSQ1pPd2R`NJPLN+C![P5it[g,aT4)E6[BJdc<[K\IOAGtd"9)uR-
%4'EWB\67O@M[OEUi8hlo7P-!gO0c9h\W@9&Ddt(O.Oeo_I8OQXp&+1%^,>DDJi.NVl(TY)E8">$,08_N"bhi(H\'-(,@FHO(^j)"
%C0jW>o0AE))JA(\#;#gp;4LX]'jQ>X:Em"JicWG-q,m-\])W:A$BH=t)>He>HLq@9g,U*(W]SZ$_Tbk8U%BHtg]i>P_uMFMr4CNq
%!&,q$T.S^5j`T&V7YjZLQf\&IgHMRQ4e-L8?;]-t&Xh0Tkn^9LiftXhSR\2#M8?u4G[5ii>Tgg!/4iGib_hpf[c`"D\>#hLiB#Ru
%onC986L**O>ZtW"0<lJ1DaEce@$VNcFS*?o4K+K%XN?B<nQ"[ABTs]-"WhW,HKMbQ^-5nT&2gl$B01$r7Z&o1#@qaePk-#0FNsrp
%I,=uM]2W"@4:ZtZCb"7GkaI*p#dM5S>gB+D"i]o(,scR7NjNYO-:(,WVR4ehCm5\k_8[Wlc4IG\@*,GgRtZMa^R6#JF3\+2;$L5.
%T;pK.WAXo-f.h8;G-K&3\*X^?3'8dni3VPX<L)Pd:<2K"Z<]:I!T'mFl];@J97Vp4$tbnr1H:A'EF#@C1=W>S#Nbh[C^kO=dqV&#
%lasU5*MbO7`$%jbV`6_>l>0Sf>TB.LO;HHU'R#FKeIG&&#<kD^&u.J>6'j]0fY[$"?!W4.EX!q.S<4'.D`Y>WOrLYs0%h;%";_Y.
%YWQoI+CQqa-k7,T]58gRbW"+/onGN]NlsH)Y(OTU(%JrG'=rR*LXX=5N+)3"LFhBg-VHV3%9F/,%u3g)-\Z::IaOX)ZtZqFfr@uh
%EAT1:`iO;e"G&P<Bl4\]Nu$Q\Yl2i<AU1eu=sdp`#T&N*nfh3hqlC+eo]R0gKX8J#e%OKcGJ2,i89$BtfC2qD1DnOl?&F\q1u%*<
%C/1Eu,bZ'9CSV4@V>Jo,A^8jOc-DK2ZNNplhO=230k-GdHu@eU$!"BH\W16mnH(4l;Il=D.BmL^$c#MC;j>4\I[%4i+9ZFe=Ft<,
%OquS_j9-ZA9QnN'_tLA=Ydt`VT5'oqdCJJ`4RVX]NJ0Vp0<)"CCAPN$j-s3ETLCr*e=]07^!nTufqNM(c'm3X/HDWAXFQ3gI]tXc
%7>D$KS+ZjI6$&i8Mq,ZLBJ%%=H+$G.:fK+,P3sm&#aM-CLpL%:A1X&fHdI`[50tY-YJscXe<XgVVC>rda&;PS"CFptT],?Eg,M;M
%iii[DI-:(<WrB8]ih],D-KWGI-RDIB,=/"MNX$\uT'a<:d\UL/UJ%EF5m%Hpbe9$]!&j8U[MW>r;56oI=sdi$QXU'sRE6:V:Qj%b
%M%nHmAsp9fBE0J`NW46)chL:,P09_;lMd$8`iBmZ^el@E)^.\(*1Z,ti8d7>C*R@M6;FQW\GhldQ.$)YI+/.YRg15j%5a`R6a$"h
%DV(u50T$eDTW',_!OV?=QP'?.DLE3aQp>`#RQA43!Q9u2^U^61kA(P$5V&dcj!Vb4*b5lLGRV_oP^0]7Z^$mQT-;R=;db[BCOJbI
%Kh#:0P4d1ZD)l")9C'5K_1Kff%6*NOo-X%pN2doPXQ-A^J/Vg,k9O5>\5?F]j%2fMhq5q*8#a->"]h&&U7akJ91sUr&V]p?[d^#V
%'7iqkkHL`WTT)Ct#_M<L;,o%o5cXso9^<+>&#5GiT##/Ln8?dgb,Ei0-&s2IW24B9>&.bb!C-`jn5I6+gU9t:U9m$m@i;c'BpDFO
%BrqJ#;2/"L]j!?ohD1;'(:ff2aDusW3m_\`!k0p_<&NfmS80XH:e.o=m<-@p2";t')e/&>!TK]oU^+F)I]nOM\@i1G]8@+P7mLZ6
%cc5pYr@"&u,\)[^8g9oDFZEMcZEkM;'XO&YC:5e8B=R6*^DSU$Mp&";qhqubYf4G@gE_d`3mc+X!+fLLoi?(nqEZK@qq"Ef@Ki^a
%'!kRGoc+,^!4)!066X/fZ!1!\^l;j+C;J4J&tCp8qF;IrVLolk+i1u`4$O6m]X3ri6#RSG;H)R`/"'5?.E/"@oV.R0p6nft;@L4@
%\Y]luKqa:;ZsNj&+g_:<E%kEs=fho89,\2=U;JGFg5Q2W3u?M3bX=@kr.*W'1ib%?jU%ViTLr*GN\NS^AQed2ZP9e;(</W[^g#dA
%V7r_tWbnSD**5#A_FQ?\Rc2*J3H3),ESHSM<_WebE:>Qk9$+j6`fV_3.[D9;*NT/nF;c6>W`uXCo0^/b?EnAOkf2Sf"j#PG)qBVD
%"5Rk7g"0(I,%^'s%B`anht82;Tp%nF^p"?Ui.**7j0ZFiAN`Q!__>/6-ZHt%]GXh1:@#EN60"[^8?KghCeEAd6OMu^VRJOFp)m3u
%h10%45@N89Dc[un0[!MFlq"Zf6Ah4dEPFuInnd>QOsI;:#57"SU)^P9XEHf`p6R3VOUDXi1UQ7DB!S?YB%43,DAWl73>2'DUOIHN
%9`%C26jLH&4=q;B#=L=DRcQ]O99<:"qYaPHN/3*;Hc-nm9"(SWbl+s[T/=25G7KV`:R=.gde^o/I8Pu/:B,P[,K91a6G<"F)o;tM
%!;u*Po@bq^Z<5nOY@-2G8d^tf$YPOOHlHbkHa%Xe]gG8L)rA(5as^I6bs*t2fYMEApiQ=W)g4MpOH!0dGM,XU_2fL#?>do7d`>=P
%R_d?KfV*W&gkk\F9I)KT$ePoH?F^Ak@;)DT[ImC8"?YR<QTHptZr-T]9%o"7R,b6DV2>GbSXrgObDd=.Fl%7(chjrldjR$?jK@*I
%'s\U#ol;b3]$UX'/l\C^.sHE7F"WooTkI1P/@L+ma6o1DPq[;M5aC.0M"@$E(O6$Oa_fi*MXsKWFqcL%-*Ufi]@o.pZ%o<JXL$(R
%\A!EDQ_D]"QV!_mi8LGfJNn_X97A8e^>FoY)\L.W/X(Xr:[HZ4q!MTWr/9QpZPhEU$nurXB>'>-Xao%r(qH0B'c5fKc,tn0B`pio
%Cd/V/W<@k[CmhB\@YZ*t$qPqY9[NYsWG#BY&lT3QD!8+^ce`BWA)jre?@3A.Rr:f<&gS'H^`$bc9_;W3@R:pYT!)YANC+5.J1A%s
%aK.@)6,5B6gU[6?=.k6Q.\Dso!q^f&"^e=S8iW'o^K$7ql1dd815Y$=?oK'6\^1sk1#>G'X%BCZUHL87SclJm&_bAc=bu*OrAb$D
%L^7INQM3Kd.\&sa1pc;N,\KVVTJ!$J96-0toKbnh=(S0KqDe2pLUe:0EHdb0DEUCHd`bc\VZ;Wk5(9a*P9aC%3tod"8=>?E&-qKQ
%)2*Q$4R.s&)L7KU(I?#?YAlj&'%ms$=9GU:)#0b]"_V'D#@8ld4mQCRIIs8#)VW.W2A%2r74U3uW?W"<Y4b^%;<t:bgmT88d6\o<
%!*7bh.P+eg$0"uYDopt6Y8!2/<DoBY7#4F_gQ)RA1J('L"6"rgEI)904X+d1/5qKP*5'@_Kkk8TGW11n&Xt_G<KA-Z#'dWs<[COi
%Nt`oG1eVJu%6JGCeC+d_/3?^R9oo*[WsbU')a^O:$&rCJ\QBS[Fa?uL#ar'm@au).7Wl0S]WB5B6*AA;4'co=QTf-[`]-16KuHq,
%>A#A=-\XBs"r#$O^/-D^Yom:gWEEMM>rfB*eR^%!\P*kcfKrR#'_R0KP&S"cr=2+KO[n)<3JeB]Usf]J/+E?u9?%/t8F>AURB'0W
%Y$;1O1(K>.9p;@T.p<>@7EY0)-c*A!`EJN&#/P4q;rLn/(p,HW!iB3A_GUl(:V%7j'3=i:Tds:*0R()fLTDo.PSrTRP.ed`V-3@i
%Q5t;8""aS/P#Ha>+TsR@U^R?/-oD\FQmpk4*MrtH4&P<_Q9pa*Y_>r&j349[Ar0.)fB-Mp0ff;e8Rssb-/bL<`)/4iWh[^%5H:1@
%Ld6Z<DO1,?ZCF"aj/@8D!tq_MSqClq5R;=WdLU*"X4%sZS>21V3Zq;k;Eq,,d]K,)7f>>"pF7YSj6>-qlQ#PJ%^l/l_9V1/gWl*g
%AdD$fcVCJ[K*oO'V%:^\:+knMR`B6$TfX6AfUZWK7Zl/IXLOb+q_ob*ba[E>VTCt(m*:dmCfqT8:"(ha24+SWOj^jXI!8<\M'LE?
%F%8Zt`EB/IA$O:^L`HJn>CBe&Q@Rt7a_8Qleo>#9'RsS_>8:s3p&NTNBe^\59&,&OGEt<++f:]G^U,,+*HBn<[fS+[3LcAT1*F"W
%C(ZA8@Fpno'%:%7,o-UJ\UTk&Yg(M(?F\!f!X7e`co#uWl3'_r-f<OQL[qZS;D*p/IYpn@H;"3T?q%7/4spDC,Nt?VF:'!g[L8'P
%?)Z:^as'WUO,Z^Ni0HI^K#Q(:ei41jZ8K`m)Nu'j:mP9/%:nfW[E#Rt]^3pm:bPkQ0B.o!7fp`47)gMt7U&^s*+Z!K!MBqpnd^Pa
%/[jaLo?E;6T&Dse+VKO@%u&9p_AB/U,o!X:4tcXNaWUZi&(qR^V0'ruK-V#oL*Of?Xdak>WiJkD4*8)"NUI-i=pln8j]T5"Wl91d
%W+)qQqaogs1"irRHrIIRB\\3[e`dZ;;,oOYC_)f`U.,G238*P[gXi!e^.'*qc51gXKAAD+?eU+;K8/g(m[aF#@TP+"@bBkT*_s#=
%OTqMA8t:m?CrN&RI'lSJBcNH!/&*A@/Tsd$6toF6BV2>QM8AK(gI=;YR7<=FA3<CeJ6<rpD"j)^0B]7/A%d:&92Y(_-^Hf#BHYH8
%ha@[(/-^o#X0krI"/RSX-YKR2`P0G_H;Zg1UPMsrNcWX@%I>[/durL"E3*SQ<a2-I^ipH,BhOIP5Nmp:eEUAgXTK%_,o+Q<8:WYN
%D<nZlgl8!$j,-[\gl5-h.'`GNKu3p*[V#]OCBb6`RdaTP/S+:basT"n8T(#`*,;nonD/Z>p3$s<W9.6gO'IXI9ETC93r363eOK3X
%4n99"RAo]/=tlTqaAtmdGW6PM>(pOiAdY3^K.\Bm/M`KY+\(9iXJ3d""<Z,*@:2nD0(SY)#ZQ<ZB.'^@?<Sn#l'i\QlY`)RlkEO7
%g4X=]%uNf`Z.cjA3Y],9JL(Cg>c_da@lmaJ<^O)RKQ&e*=Q4sr\J72^,?Z]g4(O&,^":Fb_^O2rD%^h4&4C4J+cbW!CK"c@A<#RE
%+LqsE=SVBJ:mXTU2rUW.:h^S\g'"/$E77Sr1(-;rA;:%L.K%pGIodt\-K'RYE3h=bp:o6BG8WF`IVnU3P2UfcS.?646f<Ou/P&EB
%lg]6.p*rCs"o1dYF,3!Uic:)5\/am\Fjr@R=#`'!&ArY5]*`+5==%l`Iq#t0A6c@3YQsihocV1h=fU!]8!gC2V$jh;"m9L:#0rkp
%%bhKiaO2&Hieu5B!Hefc!(RrhhDR@J@]$0UqCJ)K7uEf:s5A(q_ll,OE;)?&,/gBpmo2b_JCm4Bp:Y:F!ad1aYb'rRCsu.mBOK,"
%XJX0.(p.qY<VY;XE"F+1f,>efQmsbtYI)KNGMo?RXK3t('F!Ui&#4(('?M"fpQB[oiXA]IEt`H\_M+>ZJ;eQ$)`&WGFMnn7F5CIo
%LMLBHI7;1ih85&0n]I;%FA1c7'ckTHJK#=N3f4YkCgG9TD<kZ=7a<CViZjfgr!:IFTnH4uPpG;W)Er'^;Y7]tKso;M[dr1%etT!G
%<"-0=Y5!PC>.1eMeF.6X(F,(4/0b.^CDO4GDeeoGGj]m;DNL#Vo%m4r6XjaOF?#ffcX8=L&"jnDjH:UVF1hU=/NNkl"FT8?Wg:I'
%=R00lG['"Xk/rGOKh4feP*EHr9AjhAG0qjECPWS1s$N;TN[*/?UU`KuUkO!6P]h*<>)&oN2uAF,nMI&e,AJZo*-<*%C7?nZ0@0bs
%1NeiE;3E'"=:I4E^L`2J.n<(!Au]f%Sr8g-6HZJWWPMWF85NUS]UR^Jjjgh#T-O0kEdV]fZ5.7FL2W>5K,%heOA/N/p\[ma>se&"
%V)Y+#H)X%K7WEh'"KKm<6OI1?=Z,*)dm"^!f_+J5jtjr7'WqQNZmI^"Z5?^B!$8+s_ocF?7a]"frX0RW1+-`H%etKg"3^WhB\fK.
%IcW@Cd==Nd*ie?-E>Lo9-ite%]cjG!;shI"N`HOr8]<td"IH5EB5L[G#J&]D8.\/I,AVhp[0m_cOsD?aRiGo8Jd9nM_h,56<C$$g
%E*git1c[&rTELX%<ZkO+O+<-p)QW%[[VaW&Fg+I8fqZhYDHHnKZCB/oXq\o1an#[4:@\HGW`Ka6k9RTgk;`:QHks7$='u>e&>tX)
%k+C-oj1,,qJgKZ8_/e$>^k?[AUt[,//LYG(b/].R.7bZqfd5PX5"TPe?!(TPI=WFl;U-/F0cH.RTl%K.>co'_9PRUC!l9R>n#lN$
%ej>p4"OWM6D=%"ZM1,RZIG@Jp82P;9b9B4Um4uM*XrY]j)%`,MCM0a</d(#$Rs:D("."ghHt^NC,T%Mi[?V)5!_dpU-3qM4<_:T?
%$C\?:p7!lRO^V8ZT;3+:7i<4X=eOq[^Op#ik*L)-8+R6Zju9E\K([Q$C)*/^HHN-h(>Upn=3c7egX)1njHMSZIWl!t6U^,=7jcJ=
%-&:n.euX+.F+GPo6g@-^E0?JJr<?[])O-M<;YW6nP_HYQBk148D&3uE#ps0@MaHc^\2t@`2X_)1L-@RegI26pA2,\Ll:$lM/2'47
%>JET6X2Nk/=tt;ZiJ5sW'pW2'3&>Idhg_:/'iu],EOka4_1*B,+s%T>^/`(shaAi+,`VNV44YCRW+spD[Xe=d.^[Ba45VmMO%^$k
%3Vpgr]c?tP;!Tuu*+6Quf0Cqdj2]B&"UdW$J:nZ"3f,eBSs?]_-$h5D"Z@Vd=?SbPe9]VjE$H!TAl9k=%qac+bi]dLojT<AV%C(F
%U$o*W-!hbVKD6pWVTF1M&(3qt/6Wd`U'd*?";e05=cH^j6fnl9VH<poP#p`JT-dAW4,==;/K'XGc:Mh?&!74/)-F"WI[Ml1lL+9#
%.0IQH0d(\UUCB7f0!&UTZ9ZY'@2]Im=X9p1iEefE).8R\amuHB[,,1a2E\+87MosflN%<;h?G*,XV]RHiUYDf_I_g2eM7=G5%YTT
%cQn=:F$n)hKeYRhlE"Sq[5q\(b^*^u#a6eR5io'pE9g.rCL51d_+0UQ<;7/8dG/dIkHKOQaJT[gW7m5^?JdsS1i1!2cFQTNG$J%b
%h_Kd](8,b'1$0aZ%+E)-QErB*EgE\6;i5e!\:\It*LG67g+U3,BL_8r1CdB[-eel7bm&WDYVf7NY/R&M]j*Q&joMhf(CVqQqGdmc
%[TsK?pEj4>JqqOf@8mmE9*_.lTc0ij$"2V(OqAqe"Vi@]EK8\Ni)+R'*]+!CQWc1IC(rEWeRWMSX>!?RX^!VBi(D4f#DLF4K;Ktt
%P7eB7j?knC7/!nJ;AP,NT#uoNoIpMG8obFZ!NIfjXB39s'K(cm8!4<aH*h^h"3uL.i:;89_i=A(2!rDH/TKt^/+@M'@;No%^S>(*
%`Q-\,2B/943L'_TeEe/7r[o[^jd#sNo#_?RQ69UT;^(At.Vf5\Sb='8dWBTHGpEf!HM4@O3V";(,%L\I00jeHC5*C6TI3of>1)$1
%eF3JGHr(:)Vl6U?UtDL@PQFKXcVT\*0X-uQj`6?UK:37W5*)$F=l1iE>:qPF_r\:oM^IPen3W/8%##$Di:ab"$9ZBA3Zae2,Qd@V
%(Y3:_.%ds5XDLh)3NJk^TPRCZ0TVO&L"Sa%MR->R;^K+h\PN]6g24/aB]YuL@_+G`F>hUG.W,%O;h+q7q0Ep7ThOk[).3WJ/npMt
%X-Qgqi%PHq?o&n7K+JIKDKN*gKSR`d1Gu1C-=[sA(3hB6MgG&cUd.47GRY+)4'5k#nn(m:YS5%#fIF<GjB,+VDAnB5FW1iV^TMjk
%@56.l%8n%`pa*D-J]5X/-UhUkUU@J'3"1hR%Y.?-QBF#"(<)DB93A'!!^QJ;RDb2Wn75oYC>:@QJUoC#UX<TcQD9NDB`3rda)$AR
%7-SN1Ye7NE1XIAN=KWu.&272pj?ZkpigbES"T.CJW`(ZH"\>7GQ9-e#_qO]l<,)dCW9+3/4m9\an`@TU"_&j+!7[G^R"&o.L5I2A
%"5SBUPPGS7>\L2%;#KF//oD3Ef!1X$Q0c;N9XqRZM-OLAF"V1.j:lMJY?LR*P<8pnIJ&6)V"r]6ff,&XPp,/IT]`%Q)>PK!9p<:J
%AQlq04TJTC5`65Qjd=+HN%rTf-J5i%=@e(T]Sm?/XT*6B,#%eb42e46EN@6gc;uN+@+.QeC,$JmP]PVdPVPpIcH^!lfX0!.lkh@Z
%U.Vu>OY-j]6icYd>ChUM!3/0f?n_c.P'$>3[CK5)/]ZmX">TWgm/8Q(9lA!dH+G[DNBX@gEa;EN$P'8Hc+'*tpF\9t"(7]=gal-L
%eYK<N",#tB2meDZoj(+*FPr/H=q0%Ki/C53g9:ibRU:St/#ut63TO)bUZtO];K`j9O=CWsK-=;U]p*ME/,$iq>^9DZ?n?%)Q&h^S
%4ng9;P*ML.dQFD'Z%8eV9C&O(_S`Kig*(iHK7Ke#'*F`+c3inbb56c[Nb6G<r':&Zb\fPX-2`PAr*YJHoVa`cE&NHCeVl3*(b*T[
%)5F-B7p3$)b"HIUE!L)S?7&CA*Gf@2+&-4;3Y;d:g-MsdCDa,k4PCAU#-'X(=5j3.>D3,p6Q5^UF9"<2qqIjTd:s+F$KdhT*Kr<1
%9ua$:T.KiVD2$B$eT0_b+j&:rO9>+`c72AK<Z>SBqHW3An8NYiCshfmQEuB%>I:&S-nPEAGd'gTMC!Lg0Lk(A7FGC6N'n,iUKY14
%Q&1$#[6Zh>UDjAJERLS8lPQ]ug(J]]Fqk>deKS#OE*9c[F]+0iVks.?g;uFr5d3BP^>A*_+=7M9*c4o1i$jR"bQ'>h\/<OfYe&N0
%b(_XZrD8Zh-$Zr413:R]kbqBRhNf^8ZZV$)L,kTBl]CKA&Qn1a1at.9JgoQ(")$#K2O7uT=kEabSFY(Y9WL*SY??(DHOjPD5U<]<
%VoKuS=nVP2:TJd4!K>1mn5u\q/2IaM((@9.(C[cjD50SiZ<U*J^a\$jnhY7ZD0/TrYXKl3fbutX?5d$(PkHt%\QQH\cn8riX)F+/
%j\hJ&<K^=#iP^dj[Lag)=tE)p%MnPi]1D>+NDA4.rD<6"\6.Re8P?6Sfit19d0&e=BT);kkp*Ne0X'!UaOD.7(^Ct2C\'e(K;1Hn
%e\":7JkUPZ]ieF*/-0-/IWj)>D0'jp)mq)RZOq1s'cnt\Nie`hJ`]'*]!K?>-5s6,-Ld+=l1kZ^0tc.i<IX,6/>9u`VrLN##"GX!
%BGuk]eglNr7gB]D@IZA[Vj_.-,H,G[g8`h+io?1cRF_F^dtf>$ZFJi4WM]XboZZ.^r1^,+@#adR!AteY:6P]G*m\cVi8O7TkaFrb
%->-%CKVb8gXG[-:T9+T#%\hM/!M/i,IfetcEZ4Bb.<ktDX^E5sD.ruC?:J<C=M`!*N*s=#'S_)@OP'C6Zm?6_m=QG,P?CI>.G-p=
%_8'`@n:rU+.ASY,:Cu2s!&^n`TTA>R"AO7KR=L%=pror[+["G9C[c:gBbl\/>qdHs1PD&o88Ce&;qG0/`5:-J%W:e`Cn=[+nQ$)t
%n+(%^V&SCW'orc>Acl#EFIL#aJ'QNB6jH">-upcB]IJ[?B_oM2+kb#un[/)XS'_-7Fq(-2n(0uOBacY!I6.XR!OP"o-aQld.&%-D
%S*b=,Zjhb.h-E3OKSR`d1]:dn]`CldA[&L<)O!LC$4c3pGpH[@'fNXCijDOrfmUHV@UKB%@R-8L#ME:$6tgZr_&CDQ?Fp67NZ<RD
%bY\J&D8\UrCTB&US/%sd.0@GT_l[IW:B*lVGo3WF-KIe^EVl.CWKa/Z^:DWP=MSW1e\T8j/2FbCJVT0Lng&L;E]5OVN<dqV[Y&S'
%7a^im5'o)O;%>`uDnQkVQ"B!.\%kqMkdB9#KV\<RDJ&8#1C:SF`bj?!=%Iipko;[+jqp3An7ht`9`euONL0OT!9XhdZciEKi[7[1
%[Ng<Xl1\^AmrPr\\53t1\csp92](%cdmrME!F$1g"hq"efk49N!Sl]7iUX:q.Rq-=5&f@$!b/Tq`TjF3DH:$O[W;t6LZ--q]@n.D
%Z..,tU9HT0e2)r`V,DWGlWG*-Os[]Jn[sO7))_qp2Tc?8&`;PB]+nIah,HkqU3:D14"Gr#A'oCV4'JaX:;'Zb^SjT=5aSDHZahhf
%5pMT2R>@=)qmtS34W^5'EsRZCU'J+[0#>HeQ'$cb>==TTb;\H4lo:DaP7_W/?Z2nE3>>DF=uQ_oDe^P$q8hDo?S^@2r]Z<`p8k9+
%0J>Lei^F3kbC!V^(7i>9j5;7+a4k[BK,S1`0YMQJ0=TcX@^Yf15+%G<6B%A34h'iq%E@>\g1f&2JgM(&Q!,E$hX$]rFT?Or:eQE3
%%fHp)=(SscH?p'#M^s*jMd:7\lHMrOEaVm"+9jLo@=bk)"U>k.=mbnkJ86rR6FQ\,QrQ#p;,a[?RJG6]gapgAPsL_&,os+Ed)_fe
%!QTX<7P!#?0f."(E$HgE?!Dad;I,7Qa)tVqY'+,\%3S4O2pT5XqoF)H+2A`UT(W-(hL"^hZ6P:Eh[Ao`?lL'>(chn7)hSgL@6#od
%@>lE89\;/ur,J@lT'&'dG#]if>MXB[9pe$*I)#QJ^%\U.W"hq$8ubd/*ps6rj!ua00_?q%DF-4*Dk^C5jZ&62qEQDmH+(STC"[Op
%NA/]\gTn;8JG:]Dcj/m<n=sJR5s8Hp!?gue\b_*eW*A[AXQ@AMkm$`8ne_08aSZ6%!?S4n5^rVF(?HdiW\8HsQDLf&#k[jI'JL1j
%VDkRRpaF?/K&Qkj%r7oCjj:H[=2R\0d9%d@q49dsMGPWfk\K-P=K-!]"8AH,]JW#\PiGre#]d)\(sL1#nMbFN?'`_tX+kFM"RYu"
%Fi30?W$7WL/9C9eA33',0olL2A@g>@&"R-o%2_p,R0BQ-NZ4E7C8c_k#A:(m,Et?K6bU[UX_gZ-Nf.NgW_QS?`Jc623@S/Z+3NTK
%N(5_*6=cGgW]1f=r*#BUq7nS\#4IN/#\1\8XIb%(;IOPS'(sIGf#0_?14,r/o9U^DV^OqTlMOP3K,ILP*Q#4##KS\%gaFW_R(\/=
%HZe<NR;3.Bhuj0Dd>-q!OVq8brR$P]LR#Bp8tXeU,T>!oYJfJE*28^h>RE-Gq$/X$88s2!:0T[P^]h"VHNAIi%GmO7b>nXuC!fmd
%ZBMZ@139s8\-^=oV/Oaai;;"T?4MSPq<2#"]4m^=.2tA`)i^NmFs&m:.^nr3,$(1Qm_%4g-;`jAipK5D)oE-gYX+[0:IgZ&XcVMS
%ILgL-8)/&),4d@c5a1hK"VQ#G+D$$!`e*P=NE&aj^`!sY]\"ref751bnDllh2PI9.<\CD%]PA3c_B,X<PM7kuL"AW!<@>XQGOm`n
%Cbh#fJ:GUOUN'@eiOo!QTE3\c+lUJ-/K&</&$OJ=n(Rq(M#OMb;_@lJ`@/pJR]-qkRCLSs5RBF+@P_L_DXbJCP7OP\f0]Zp,7e,4
%SYOq:)(f!"[AiAt^ZhNoq(`5#;@="%d:j;03I&PlMj)sKj&9I[na-Dde:cj:NiP/O/f3/e+RH'0+rPKolip4rEq!aRSpt?[CcH$=
%JmmVMXSAO_SKRpi*"[SVK,K_$*[N([0.]sM,gRek+X\OZ-SWjo0I%tgJKll?7csr,5X48e7f@#9%`/ikJqO%)_Y/QTp;QfJ0LkJ,
%22s[`+P)B>%&<]P!e"2^L#<E:U^:Y2R?WDi)hG60>P%6W5GiDpaiZWfIAbIa.JFlg_bIi9%X8r`kXT;-K?@J?E7kLlJF@q@pUmHk
%Yr-j6ahtB.YQ9G<T`QRUD<,:\>a@&_^iZ=++<k+BfsN".CDW?Z6*2"u]S3!u*[AO#$c',j@dVMm9rHoU;&bh@Y==)((\kS/DU+2<
%^0$p.D(?K[QNFc9EO+'hbeDm>Z^G79GWBLZ3m2hm^`9<H"+A'qWZ4gF[opg.+:>3/^^Xp[<=i`+m?i)I(J28`9lY&<9^95<E8Re;
%Of(`4ZC;WL7MrUFh-:QcHC4:e$V<6tgp%!9Y;q268`lSl2gT.)<s@WrD".:^\0cC&B@)#M[XNDI//8-#)\V<>Z)<T?6HID@j**UH
%/$"BHQHkA<j%a98H^k<Y5W=rf!r2JV:1/Ugl@T:W8p.eU89APYO6W32Zc4i$8"2-PJO&l\@']4tdXH`D`q0=^Nkkoo*ibjKIqA+9
%@?_SWCnVKCc(?86M`>&#_kP\MCu'N0!++pN[:g\J9VYC-g.o=d_g+AdPao3<F>l)aT*2&lPru785lEEAB.pQc\NprIdsZ+d4sUC%
%0,g];b_pWPO5s3"'jX3fE,"shoc<r3$9[n3.GK.8*hLcBD0DXqHG;scNU\u@P>u(4^P@b3r]6)BKmO?JFPfr("it6K!D7V9al3>B
%2QL)Zo4qY:_d4o'la8l-D0Farl-`UdOfJs`YShK3*2?o\[6P`l((ak705t@5=o,4j6sXP-mnS_(#HtTTZokAheP2rj"mZ6+Ra&u>
%ic#NW!RYp3_45eEf>]Ro3-Lu:*,?=:-!Wio/hq::J2nWf3=XGmA#SZc'6;lon1)+[CYg\;`/LK/IRLeU&_leCW[3"s%AbHfg%$a;
%4u`8k2qVmhQqDp_(Tuu\7RDj=a69;:=<Y\`bi+-sQ]*Q<IJjQqmq5Yqi,LpV1,fHtK&FU<Q'^IlD,lFHR:&Ts=m&%BM?q^VW>69Y
%"e-XhUs/[HG9iLB*-E)lU*ZQ;T]MDs@R)t/PJ3m[D6#Jbj!1-&?S,80BPAlc5:4GR1uZ\$S^eO"d09!*>I5fA#IX>MA0DfM!aie-
%*+%A._e-Wr@"Z/gk641KLIIi,,a4tkVaC2fe#C:NJi+Ht6E+;MYH:,g$hmXp<MnbBUN^ZMoFY>3H3\s)YA+Pc_!8S:Z7K/V#sX.g
%XKk6dD,tIZVUnZ#qd58ql)tJ&MB_c8.?o=VTe6'1SYWM_oSW6,Z`J5B"JJ2d=Y79ZQIqD7(6&;/JJKiU69B/%:hG:o/!a33RQ#YL
%P_L!j:qFT;%s1-cM'2q%1-4MqbegSpP<W5bo5%9KWY!sK8UM%AjYoA0Y\%i<-Q>g,2g^l3J/Z\a_oHne_@CKed;j>B;/<iD#3\Za
%Z_nK>k+V./mkgKNP#NUkhq]+cbT@"Ac4(9"@4<#Qc4#Nl<]Ik#Gb-NigT&OlD)uN6m_,?CaZ9n"`kQSr)D!gBAdG55Xc[U<[,.Wq
%Z(!qG_8e8;7nhKZ/gd>"GWD4XDR,ckfmtVa.V$8):i1u7nJa^tVEe0l=9,pKb0tnA2WuGjf`QCA0e&2SQU*>-G$HT]fa2Y">VM$G
%gN9s"i?V-:jJWE];K;M"a\pYX<C5io1L&YdmC%[Q)dDjkgW`FQ_`QYm8Q`pQQ9!RFH!UtfR)?="'Y(4Q7(phQXS6d'^\fj\B!uUH
%QTcS@kh?2/NM#<T$UC0caTG@NAK.2NUM\q@q+<@b!=l954]&5Ii3(Nd7785c4*qiF6o;PNA16:d_:L=K7s/3FRKcRVkJQ>]>VMdd
%STu7j)TBV1$u#10@J2mp$Zs`q89hosWsVD29essQG/6-XW:BN2gN709RTQN:AsIdX7M7CcqCWc3)`W"lR3VM#[0s/7^q^.gW1%,*
%@$PmW9G:mE^c'PQNFIl2E'_0>XSRn7e96IMOQ\L:*/O3l^l><2!k?N(JR-_4?.]q%(u2qY<3g'7`'giOA$Q]fSptrb.fom-=V+Ze
%O"^sjTljD6(Q84n:h&n-LjK4M"0%-rJHbMqnSE.DOXegY2j&:h%?HW%%p_7G7j$'b*:H%=Sr\6KK)_upYI6%^]trU"4X'EA':[_h
%o/(56V&gcOmoU*bML)/Q?p/FGVdNgf27j:^W^F#-9(Z4$00"p:5-bNM2Lk<9MHN9MA!P_NG`.<NKpS18'j_7&f(^0o(7$AEDn?iC
%?]eK0]MaK$dVD8P"1Ak,mN>AiSF9-pB5"Pr$,@$NI[S>6%P:lsU7Ik-?a'd7N^A//-EkUp;:S%2R,f24Yq$>$oCSjrGk?'Dm)oF'
%KMQh42u*u(K/%:Ak)\L?m/;;-jI=H"b&8=q>(ADJb([cfVdGG?Jae,&jVm+F.Hm,!!>a36!dB1hgUFZ!B;3CUfHKZ7e!hq[(Z#@U
%O$,Mj+9jWBSSn=<Nmk&O*WgL;0Th/#Y);eN//R2#9521`/ZJr#aYo6rq^0=/m`3]K^P#(a5r@l_n8XM81u?54_AmKB$hte1OBmga
%[JfQ<&+r[QIjrt.IKFo=Ji\2PZPF]lLQdWL`DV^*=#B\K+1pSFqLZQci+)f\Jt[?Ee6R*eVsT9/:WpR;Q<@'+pBPpKbqT)`g$m(8
%ictj>+2U57&*8>^E[Mgks/[f9BTSN%O#@G8idO5LXY@!VoX])Mi.2`F0T`bP,adKBp!:(-*.UuY-`=1^14?9pK?G=?X/8F0bC'pQ
%CB1(q<@n.Y_SFG^it7>1*q;K*YjEYX`<ml`IPCf7m-cSC+i0:AGmuW(AoVVs\Ej6CL,+&QE0k=pMW09@6Jrj[\HR?WKou\R5XgYe
%"tk8<c85s!'r()N:i;s31Q_[A1XLC-ToZ%h@mtM3@Y&=FOBc(A3O^uXliF`!kMQ#$KMOsN3Z.buE.">tSA?hOEeoKD],X*21^*/m
%s%6XcoMp%LZ:Ha_fYX"p-ONGB:.UT*<RS;m"GVq&B$9.MNb't;V<GRr\aDSfDt<W*i=:UB%N&2>F#\]TY`ac"e2,WXH'Wn5B2pcp
%&mrt_J]V$&'-f"ng!OASpB7foU2*_lSU0TKT)kGfReR.\O[N25E43*!'E*/)Yc8NODj)u2m;n`Ell]I$To_IQ_BS8)$8DsDQ)Sk%
%L_#b2Sn%kW&Bq?"4rg$`Yol9:<;M>g+P;T>Hub62Wp&FR/Ii]C`_bkeep(%_hohYr59(AHL)#b'lbcBQe)Gf:#WEEoF5uKBdWB=R
%(RIr)_W'hX*1'Kta3kYd0!T;gY'Y-p76&u\kq4T^Ukin,IU!dB^s7^.39O$n&'(MT3oR:Q/tj8b`]^FV2PHup.hpoNdrZ4,"`3mB
%-BoXDVVX,r+Ak8M%MH`:m3'etV?IsNB3N*EH_rqcFO.<!L[LRRE%%;l#D_<,G*(oNeIE52;sb])4OsCt.JNt27MeAQs/RR?s!eBS
%pT#]QfV<3,*[26(,-=Wad_)"Z-V-HI8f-b?$%-hKJ0aVe,sOt'WnKrU(9b41+UQ`J6P:r>9&+eF\F-7#"SNK3$g@0pKMr%\,RB%;
%l/s>uhUY%*:10&'-"@R@BoO1b`U?rk1f[&lThsnmCiE<fU-7a-pm:*Xre.:5@_F403N;q]2LH23S*O>meLsn"S2j"!4"h]p[_g0g
%U-":Rp>P,@UWON:o<ZT.C,fU\4W26(:%2O8gAtgM-!$(3AuUmEQ5B=n4_%qBM^-Sc57l]R#=bQ[PZCu(RLGMBZ.\pC!*8$qRou?M
%VmG-$<MbBg/GbI>`9IT\]V7)lY@oaH)SDmZIlnMhNMMj<i/nb4%EI<H_5^9dO%Mp4dXE?KP/!N`Z[cgqAOU7rb=K(`g-Xd_74p*C
%@pp:G;dTYo2ebp0dDTL?0a<*R.j[`/1>*<NQkrQ77*HTT_6P1AUs;$K-(/nmC6[^`'?a%"SMt+<TEYR3fSnK>`XoY1nR<99@&>DK
%SR'q,Y7'rMmjC`KoLM4.\(]Z/O)"Eafr2:X:+d2V#2Xu3F\A,ujtF=5O2bBZZb=%PXnKKTS)"E.SPNih_\MaG:gXV`)%KdTofnrK
%@kl6aEXi.q/QdF'kFkD%$ffA%-;B?5[E(*62Zb#DVUt#K6n19DXHr83Lkb0BKMQmrMFX*+-kg'er^pEhB&-oj24:?7q#$NkQHTOl
%l/52k6s[*#JL?C+]4G7)0QkZ^kQ(t)i9b&e:Zm\_U0'7OOr"7TVo`'m[ehs?>SjWRCD<4I4AdY-b#uU6.4g0HaW)cTd5bnl0qUp(
%;_8=(,'<h^'dd<^BMK5gYH?4.a%fa97[J%D_c)_7!F5>MU$</uZeRP$IYdl8,=#dZ92B\P(pJbjZaMF6`PQ(:]UkV3+u8*YT0EbL
%]X;P>mN^RD4,<GN43dbZ1TSSZ'nnPu(R_t]i+O&@"XN]+^?NE;g/PZORA#EMe'1PugM/bFMN6%2+H*pSm#KCH=S5E&T3e7sqX0Mk
%gV:EPGM<I,ibagk\Hm?@+JPH'f"45q)O1fJVrMCLPRr/-d/)0'"XD!D59u7n!\L%qHfVphc_%U[2j)d>Bg1.3fQZnbd\sh/g<#QP
%9<C?!rEGHa=K'a8+)gO=li!U$>$a+VomBY5[^sR]^!b.1[@C#F,r/qN=b?@l^FJn[i!5j^$FIc)n:Tf;0,1nijBn01Di\1WItUIn
%[+ijFb=C1rfS-qNahR,!.W1WOA)+ssnthYR^44WNfL8d:;S2MIWC=51/kWP.8"D4#AZjJI2SU2n?PL,sO1NsF]BF1a,32[`m&A@5
%<^.K[19tO9KK5Y]a@b>QNK5RVT3eYO%Vpc(YZ:EY[7W*`]2JSnQ.-%-Q`BL3:K-VYYPm]UUH5X.bM#1mcl%"XmF\*?BNtI\CVWt/
%Hd?j*s+DWd^@<0/,5B&JYPh=6HWgY4UbpdNV_13+bW3n_F,23f$pm\l3V:0;KtfqH=Z]3>3VZ+0n6^m,^Sn]'2RMHb@3"#qb%=Q#
%i?&p,?T#!IFl:UL7fSSs.1*1Jd0[noMW$uN6ue5S_T;5Mn@sg@mBCOL(WKtbf_Ee-$KE`P`Gs",Fh0n6K7@@3G*7V(Le!PPQ0SDB
%^Br5;*?sL`>:M_,jT"8OTM5?Dpl^i$JiFt2_WHL+113//)DW>$erKa]9S`68J-hWE.";/L'4RIr?p<H7o"?&/VBpMr%GC9)kCs$c
%BP*EOC62k[2'HgaE!N]X+o7em):Fr+(>[`tUc-?$&gkT[R03n"UJ."%JlM2GNBAfp=%1_#!@iqn.?hsVF#A's8QU;SS)R=bY11qF
%#i5/&&%=tPY+ncM$!NLA$%CrNSGZdS\0O#+jPNI@rH]lTR%oJs69R0%dj#!Q$;NL?PG[)D8ZGLd;FoK*FFsR[.%NXZ-%sH&IiuMA
%NJOa[8U17BDC+C!2D9"a9]HUbJjG_g+"fhXAEpmoBTd2!#6#@(Y_3P[&3^;Zn7W0EQXg7>:^5gaM9[-$ML_[1?</^XPU\0;%>%1Y
%/phSeN6HD)`NmC1-T]X=;^l,")FLujV:RH0>EU_MgHqE??n%oZ<;ah-F&]"hnc'h[+oXRnl(^N]0PAjmB9B]D0rCau?bqBXIN!ts
%ml'-)r;S-.J%l$>[h):-08-A1*%I)G8H0u4>f_T/O%k*I,5\,32drA9r*cArNs>S0\X^arT2s[fQiHp.=$f3fkK3?HhmHuQOh^\d
%DUiO8RHoBUpcI)]%drDfY!Q7_btB71=s4PQXsB2+S_>UiJ".cePrls9lT?Io%)FVmiq,5S1F4_rIpQphf714ZD`+g712&&o!@:LA
%_C@<p2(<f=r]MD(*j8/PcZ9'3KW"AF3LRPi_j\Zn#)jCmPFV%]7IM1ME<U7gYnu)U['UGC7[iQBc"tNo`HF0,c5k;t)75Zh1[gfZ
%NjB&K:t'].@Ol,fTanl,kqK%?buB0S93;<TZi"ThJ-LC@a_b_.YT`CefpRDtZY3uH.na?B\W+%i'1t$$h#(huPM>b&UH7k6;h8(!
%\)585D/Uda/`#k'n*T7]D8<'NOo*[0]=LsW/6+oLo`:\B/_TlgJ@FF0X+O$J;+o1]:YM)R>:nO2]R3Z_FW1/eFJ%6(Ih6t)1[k.0
%rpO1WlZ]Yr[`&abc,M7oOrs3XF^*nH9T4)s3>SNZJC!F'.ZG5Gm?6RR>*X95d>bc4TF^i9_e4d&C1^5MN\=1gMb+Y$6OVLId.om>
%rEt*&-2O]&*#IT"?^:>/Ejo?M4)"n@ir9bi3o+s],NjTpnG_uKVsA!jIG>VXN?W%HM>hVep\/a8%c.&4$qr_Q!CJn\oA++]Hf"u%
%4-a[em`5+[nS0WD].2"]*0lSS0=AS;=-Au$Ib,P"k9V=7gE4a),_[e_FT^_(hrnMNr<o``W_n7[f@U6L;)n7UAt35e5Ma(Y2>V*#
%[aBBsX4$F;#T&>,e%[C**cDGU:.VudjdS,;1[0/`p-06QN@&V5JV^9aX'`9$31/YVZiAm)4b#:pa@,,,CEpc;;<o:`+pP5HCd"KZ
%*to<.,UR!&s.]XUKc%uT\?#Xn%f5a'Z&^q&rARY3/?ddn&0_)Bj^eBP3aD)P^u,9^7ug\VEr;8r$Sn(K7T9-__^Xucro:bu2#]EU
%K22B?qELMe/+<Zn<'np'f.-HL*KIP>s)-Dg5oD;"ojGRMrf4=R^]3,jJY5\Hn7)Cen^;iHZQRighn(:BU9ui_/F'qBnb+#ZRl`5%
%]uqV3[,#Of/EjXt,mlrKp=_ZDIh94HcI2R(q/7DROm?:0HgPQb]@gu4r7e&4O\u/H.=BaYPo$/'NB7Ytb]ums0^h@Kl4P![%O?mj
%%XsN#CE9P])RXao?0QHHmA7R4eS_^aI'/!$OUl\dra5]YC"@WMcB@)0^MAf5GdI!CNK5P,O3`CL-mp%]#gnWXX^oNki3ZeUe@J6'
%;Nplao$*u`lde9=[:Hc?:Gup3.URCsD'pk$mW5__IS!S0FY[)[q<T4olr6aN[3r^-`!dt5-f<Y&?7W>G#?bc;>9eRIct$^4dj<;`
%?j9-/c?o+%;>0N%)#TmdYAk72(8to('g?>c9VkdJgU>@$pjo@TH;u9;S54Ie(;W9.X;.FIfBHE9S+QUJP3dSo7kNk^h(9L(AS6"g
%B1J%kg4.X,C+re<q<1kN5O'?H^\otUVn-oFn^abReWQiT(>j#ETMQ)XS6"b5`CCQuQ-P_7:7YFllYBM"Ik[1)o%C[_5&q'!$pn"J
%G#%)KIWDL@D*"05:UPAO<G@Rod/!J)eV15R3>@,4G68o8jD?k?$C/V<Q-MhF5_3RNdqq%Y\=A[K)RoL]2#jS`>Mq+Sn3OJ]d3<W8
%A+H7&\)59$fG>E.b=O]c?t<VKqk[W4c51G*CNi<jngha(fsE4s]Y*n*C,1:om!=,H7Dq*QmYm>O%@g;%o?h^6gk-di6&\RsE(Z;[
%@0BXFEI_m6YkS9(r40=^dleGQ.A_q"2<D[/+qOD:+52#WDFoB@.ub@bOF2i:_Z8mjA_?+H2Z3mlQN*_)BTSFsdu1_\TT-i$dGOYN
%dGopOO!;;OZNu50f1qeG?G%*!oW,fQ*^GB`ioXN80&LEOF4>Qt4l6/r0=BD(YKduGDEAcE^R_%j6Q1GF.oD5Mm/5Ib^4%n&#eqNQ
%qP2o#F5Rl!rXKj@o^3frlC1Cj,B5%rpq]EJJCn\5kP!SVp<KeT_g4E=9tlXV=SjDrCqo'U-dUNE-)abYXZG!)]uKpff^>r!R:E!m
%^%uq4WR*QR7OJP>UeR0]:p/4LP3(Hm=0;XlD?JT(mAT_6TM;iMCkY[\[F*74e3."KfV[,Ek,VC37dB("[D1YN3cm!Fh"(c@c,_5k
%g)H0_ImpKOPH-S\?+cheBN(6`Y#Mu\Crk52o3Q^A[09\PfF!:FUXnsV5dAj(><.bU*e\@X#)$sj`(>SnX4eQ?TG+SPD",jlc=HEe
%&:K5d05Z<&*lLLc?jYJsdV*U%XY6b(i`i-YeSE7S4T_a(7\+FfF(j&QC@,,%K?mYHGK"R9Bt_<-WAe9^Wq@":F"30>0-Cr^=GV?P
%'?usc]%:i4Q<hc>FOQ1dflgp.<&fkR9>)YSAPr'l[8ZB$CA.(2eq[1c0/'`Ya'5=eD_(W&imp:LY=V]SfWb2J&]JUXG*UAE8,'V.
%EJC/9D:A2--t*1>n2$dMGJUYCQn#Ib'^+Y*V92IV`=*D9br-tDPlVO@%:9E?H>g7l_eV%'>G7?8p(\d<aW0W3emS<ug-s(fP[Cg&
%h!r<E5uce$&T[V%c8T:_\fY45!oUVO+M*?*jA:J,m+&:kVqrUfjJ25`_9]A(fODe[)mE1]D.%*B=5'2NjLUc\3DT^3Lsaj`&i&+K
%4f[P8efpkC6CWI+g0YlhXCF)1Af[YK0^BRX`E<H"#+d^G3]1A#Do5p,c8!kZ>4'pR,O2e6T(<CRU_?H<7#.aa]aBWHKr>2m5>+=9
%/#_Q6*9IG$%-:ctQS;,%@6>#OaT9P<kJRT4+KC&JZa\Bi+1_6=j*m0VpYT<iCs[%Om(RNM_DSe!7NZ/!Oq(d"3`B]m]#5(1Sa;qd
%.;&,oZ[ZtXPSHPAQ]u&MP-g#?!P/id:CpDi;NJ0cD<?ItR9(@E*k5C^Gf(fZaaSFL\+h1q8a*\jF9tKHXY(X")!iE'OLb%1e954]
%8DT&oeaO$!At?,d((m*s#XX&RD.:Yp41-EL";#?tg_Ugb:?GmhZOWH7keS#%+7jC861]Ao#ajO%V-Dp5;(:#<j)110k+_EJm>0u1
%+0Bj+bIbi\rbZaep:[/g0GY,VKL,BOM*/RB#a!'W7:C]'dW]GV4m7$.?/PJ+2GX7Q9/!UfS+tTXHZ/&qrB]8J<6Md-^@,*hrfil6
%03*<1521Fa(#&'J8n5>ZrV=,)kNH_t/))U,(4R'rDXr-YGDB^dHcAOKFLe+$D!&@1*V/m>\$Ynm['7(1hGs5J@K&Z!4^1r&2m/eE
%Ou,BjFCXRD?$P1R88Xn[?=&mtMqTQW28<8][+e3NP$5NA*2F?oJ(@Pd(Fb\AVj8qnY#A!EP*F,'IpT"<[Vn#P^NQ)d7QJpY>4rs8
%Zn3qI4_t9R(DkRmrLVb@k16GRHqb7<>eX_8.N?i`Ns)[k-YU-J&SJQ#\SaX]X[=P@?-n^fDQVaeNOjD$acOj0L9U0TF5st4]<JN-
%;p/2Pp160?X*'ZP&Is_OC<c@.7bFApmGC_.(EnF6rR$*1>*<f#1("NgB\]0<YQ9CE:"Q$/GJSp7VX?Opf=.ZoK:]3iXY1LY%he-"
%[4\U][FL@)NTo]n]44!K;!msO.W$+P^-Tjh3:'W/e!b!L/#P[c8u:/)?Ke&gMKW24)tZSQh/2&4;$,?QqRKK2Qd;m6XkC1aF5P/W
%d*oNchk$k8lhigS8dP!uLkEPmCfg)[^NZgm_=RW;Wr:M[\Z;Rb6!J[@Tn=9(d`OD<I;rA%ct`I*P&GpW4YA?\rtrGETKtZgXmM9i
%:rZq*PW"b\Hl"oD2Li?K;SP7&*-A2[d6e/(8r%'6jAZ>eeX0+tQG*qdkj=R5C0k3N&%Xj/2I!>t?b(e9d_`6#B@_2BK(ilD;E;1d
%`J:X[kKloIGNLfi*>imlDpZ1qmmNV:<O:doCO,sT2]MC4.H=X3WTS;G_1QKHgJ[kEb]F(9CCu<WTB]S@gStuJkXiIr(HUbgm\c<Z
%)>&B?;"@'NV\d"s6hR]h.W(s_#JJpmfFK"pilJY-isn[pbVSUGF=fZ0_1S&?VCu;J(01JA]ma5PKFXGA?Y=+LXg#2S8\^QL[R16N
%0)jS3g4d=.n$8:@m\")t]Yf1n?'_re#(82$hj$Ea_1Ne9I=*WEO0_-)P'qV']QjiiCU:I3GmbS`8GZ79mfX/)\rrt/\nCn".%t/n
%=)&g19s[-XeTp&G=gT!&.NPlOe_TmjRcS]g/P%R/ei.7dh3g<,bPXI<D`5_ACMgh^=`3).fq;^GJoB$.li#<`%]X@&b55N=E%Vld
%mrr3e-(ltW.m..tP,?V!mqT-&RA5CPA;XO9T_eQ@b9Gt<lHF;-clFs*#$+i1>dKIZ@G#u-TLO6Bm<3E/%!n$+%@U2':Ysctb@`im
%8jAe\`@i2fO]FEDb%35XaiL+C9b_M>1D?"TmWV9+DEN^Pg7(g90AeA=YDs=Gk/j<"f5&30C\)C0$qDB_^Coq.\9_&K^\3NG]/;?9
%GuI`4pO3<r[iq$_2mfer\"rT<Tb7!65rqX:ZLHI63oKb,FAgpZ&,Z2p\gVrK6[l_p8f-+..Gq<]`pRorjlTDelt]n<9)[h&IpGc?
%m9[qG^\78u4Yk1Q<GINmmQYC=rIK(h[^6Y?CK^Kk@rI)"H7]"MM?T$FrngMJ]4pk\f[lbDn!gqCOC')'l1a@Vf(Z5'Ym4KZ]NS1M
%^>>*GN$g^Jf;H'I><(,"I]^Chlp&WiaR@I(o(ME[.I>Xoq=&4c+QV-h;a11Y5!h!t1,%O6*mOt>XZn]r=&uqW_7qIje(!1N!GYRO
%@``0S]GOR.>H-E7juWIschirE4gh:1Hj9VNbs*b^.W8s.^]#S8EcpL@>kl":ZuE0je<r,RB^;eEbN7`,ZZAgNfD8Z$/XU.hLY?pM
%C"@0?aD#*Qc4S>t9M4o"kH8oR\T:hWbn6mR.W":JKu/$4E05Nmd:+3s8_7B/.NM;%H!6b+F-IS)=0;>4b;]#_<auUn[W^+eF,)I$
%f2]Q9UZq]sg@IEeJQ#!HmOXuVR!!aJR9MaYil99cOhe';61su+oP1BTb'b7q%BA7@KF^+DHHCpP.[;Wqc[:A>2NGZf`VANSW"M#P
%T85dWQY^*WQeC&+GL1MGH*JU8IFX*\mH2*p_?\o!MhA0-A]-mBM]$`cG41K^o*q-Z$O?rO$Q512PJhWh#TcsW]al-JT_D[\aF3M\
%d<5d9'PrPkYX*'=5ndspP`F(-_?U7(,S[qbO$&+*HA5I`G?:]/ZY\1e-V!:B1#&f5[A,XcVks)`Nn'm_InJHmDP<:(k6o7QE.O0F
%4^tD:h%pq$=3e9Ps.delj46B`Rr\3pc8u!9(JT>?+)6Y1l-EgkY3"H,`>LE(At(KfK'P$&L-O&6C&AKXk:]\`p:@fUCj*U3/2;R3
%O*InFf\Z&H.J`:GRf0.),O!n+Oi7h`BmdZ?(OpXPL#iXT?8&2G5Cg$*;3PIElMR.m].5!<=R[G0`;FfX]sa,Zrt'e;OS4=(`9_oB
%Pg_$k;V>NFreKHrqJ4C/]L8"YHmj1mk!;'-LTM)(o"aphV?X47s)ZIK,b[:jZtt'8,51K)\%j@ebqT1o?kbq,c6e>8@(cGB=U_$#
%n;i8I/#'B::rH+NQuI*']kr`r=Y=!B[CjX\[prnhnK(;uM=f/^Q\OZ39YU-TT3S^`p"X.`ScPA3%qIgE9:XqP#g:j8\e'8h!pc8H
%7B-d9h/0UdRn_e>7,Et(@CS\&CB3d[&(dd7[N0N@WSu;rBETY(QH*7a&pQnOUKX[gk%<4Lo;f"/M6-0;IRgRkJP2HNFbPqS@o97K
%^4)'J+M\hf*NtDuK/q0DiN,gVpMA;R4qoT*oFQh($CB1=Xa?=GPiGRq[;LRFH2"j*@V>Y;:.?nV\a*)qloZd_,G%!c>YF"*g35Wo
%Rh>*q55"&oY'6+Q\5FZ,/1Mt-GAm@tcur<tcR)HDf_sl+f&u.HT$FXr))`d\?AkLt^J^5$$b?-GJiu+%d__`e7/LsA+^2''W@t:m
%c"l@F*jVf8N__3G5CYeddG<\c5?IN9--u":G=hc1qm%_RB'/g,et-8V^?j>lA?A"-#*RcbY-NIg+,%a.B0L<7\hACkF@tuPq=Y>8
%jM2f6RYaupVIT':.!/.s`7Vn>A4a2OdoC'_G[EI)B:lTtiTEY?AUe?!JMPLp?fulU-AJcrX_q7"]e3sc-AF5s7iQ?.bcf"a0\uCD
%i;=Y6<S>*3oWt6R[,\VY=3P_L(2c_I$g9a`S_8q#?D!"Cb3b\%WJR.f4h*d<N23^B6[:j046k&4@6'RQ-=UCr#dZ0\O%Q2SG+N`Z
%NJ4UE6o0Nb3lY-,,4Ve$J;GQ"F=P'2`k_sT6j]E?W*9bIaadmi[g\UQ>QNs:qRZ!`:jEjn)<-pYlf(D)@:(SEPgGugC.b,qKF:b:
%nHT>>C+-hY%DPh/cs_OY8([k<g`N>8Gc$/.MpP%<V^K=]p0h;6$^_&!ptQBk!+GSMkk_lKF2Mt`q,$lRkTEc)kbm,G9n"=ne!1`X
%5>+tb*1*V\_[e#a`'g6V'4R.=RqMKSB6[tG,/p#`MQ@t^GQb>-"$Tgfp*7b-`,k>YkHjtJn/cQ!b@-.p/u^YM;cA<3,dZ8n&kr8]
%#8).90J;#fq/A6`LLdV^Q7Pb%$XHp[m9<iZdaX9BbG,[*)pCCDcIbA0\:1%P1<O_qBL)c2!P9)X+MUU0l1a_pfS4e#o5aI8r'#WH
%I?:YYcO)cM]b`chrYe!OTR=uDC[`h&)p>-bT.6s\>btpi'*VAsoXqO@a7bp`fuRk[.mrG4<tHGL`F&[7,[q+tetH.VNcn_eY1Daq
%Ei%->pk>>Zb7iWA92tHr9"s7#,Z6DEN]&Kl3:)iPJp\FC0g7l>a8e?6XJ9(nA&kXnL0uBp/j"hF2E`EU;34!W#V7dIh&Xgp]t$Bm
%R`FD,_25pRqAhrWER3/8Ihd&@e))(>G'N+4l"lm-7qn)*)EAR/Nhf\-[JA$C'JFDu?U"qYSfI*N?=1:XnPT2*`gBIE7R'P`q>LKW
%*gQWT=`02D]Pd98H(Vg-h"'UUGK2E6%0PiE5hrm#lVMa@bU_]$-gZjH7#:mH.cE<`_<PYt7h\YZ*&1akGooO$YiS,=DCCN7pZ6,k
%2m,QN%-;0*k:3>6*]b7/UP6c*k\L;?Xn/Aai9\?MHlPm<kj8%65E%?:N#Z/\_a=XS-CfA"^3dhJntBZDrk5kP`bDAI(\#G[ZRoC?
%E0?&ZLNuro&SQt(HEj4H(=,=>D]GEi2Ic.ZCk;Mgh]AGM&(\sBY2_9?Lf#/1B!5]Xp!HIajiPm&f[15A\#gcWg:;QiH(8<p]Ko83
%QpO#s5sHTopASBG2^9RA'@WVO*g6#A#0"VOWT9YWO.B"h=$9'lmd?fF(1MB3fl,E"VVhC\Q%_S-HsgHDkfn-cXLt*`U#5aY6<P`3
%?q2CtH-5Ss)+f]cVN)uI`CN45Ph3aXR6Ulep+r_D:9_[A+*g7g(pIFAOoFG#V;ZGAgF!Aq1Vu%pDafGHL1DM&h&)haM6n+U&\@u'
%N8G`e6)AoN_f+FgYqR>.20S)Om7>MEkB&qr@q`H13/ee1ArL5)MNgg.niFL])T%k[Jm?o:1t:H&3\Pbaa/"M9@TgV\9Zm(Rm?17!
%ogMUap*YV&VV<LD/PbAqa5/1"HOk6eHVbU?E#!EYUnV_"ZT+\5ad;5G)sD)h,5,L4G%u1;'uM,I..1Vqn86+7GfX<CmR.69MA5#E
%.J,M!-e7As*^3V)oYO2qdSh8KZTXt"Z^e\seupT"44>jr@`b4pHn8R+T,'/:/inUpji[dIkb9lscpjTl%UF/\SKM:Zb+W$ubb0$_
%"ini\Es<)tTQBS?a3107cCbiW"in`Y$QTp;kX)TZLWlHMcCbiW"in`YMp>fGE^e$kTo73hUR(]M3HWXdFFbKr&T[*01[$qS:k]#t
%8#3hDquS$2Y9sN<4;6p+e..9r-+%"#U]q!?+#RQ)#C9ZL:6^ZH,KKN=hsYf,gMf7ap@Os%%2DMW^3/XKMMtJkM^P-imuK9BZgX>f
%&]nFcipd.6M-YDo(XgtZif(Q70lN)DIK'Z7XtMDA%a9=m?fm;(-'n?daE&)IV`6,HKAr-T&aX!^3YWhOa/MEQIhHL8`sDn]1t^g?
%DI[m)5)V<M8o;Al*i=]""UU'>KOhQR@$"e0'3jnP)qi[Ja_n@(?=5(5-bG)ur%TiE#[/>b,W$\hfFWo'/1NlBB]B1UoAqbj.nuWK
%1"]JGQR>!J]g8PTb30RWA2:-^(a5.9!dZRNS@.EfIi^$sZu$=;80s"[`##BciA^s72sYUMliLXR60cDX2c_TD&X"_P(7:3(f,^Y^
%`6RCilj\c%O.QXmVL(>E>4BPILJOocRKPEOC122mr5j4LMIuY_%??"#T?!9>IfDb+pj=.,EJWR7QPa.C@@`,0Qod%lnN.\OD_iBQ
%_J_)^SsM3(N2biGbj5&#%nq:9lehE1FnJ.-"ab0,dOmcNr=Y^u/I1F]7<QF-Lgi>#o+=d-4RdI-m1""#L#%W02[3._f:@QI6[*$`
%d*"!C]3+Mm".hu%p=[9<05"flWa)VGo%f6-aVRID#u,CYG[1-.d?g+6gV4:h+@-;jhRGb1J.'n4?pWL#h>j0dg_\,*fkL>i@XiUY
%\jMjQTp/5=k>6&S39bEk)+.`5':odn8B$CeO+$GWGiJVn0nLeQJK5=uh?Y;O+G)!oSd)cMHmB7="4)&K@XB";VKCSPpL;%eA`/ds
%%s,K"MjW!j*gtC=FDk@<d!5,-ACe>p8&h5Wq-]ji(WRclI1YJ%))=fYSQX7^%.B;bN.F3\Qq-<9?igp.A8,3oL>sG>*fu+7[RUOF
%*:EUAN8]CG2#el3O)bjfJqjiUp;im3*qJoW:!X-b:/Gt+!%#YmhokaEbH4-=*bpeU(IqUl*&3?,b@-^_#.e@*)&he[PrTZKLDe76
%Eu6iV2Na"n6^s]9qUk&A=2'W\=#]X)YXGS*\oDd6n\+I7XH8W3Ll"YG&Mf%F#DbWc?+:P)iq.9IdMJoRGiYCp-C)@N&4<Cho@YcJ
%,AoWQG^hn^J=f&L9O7RD\A@Wp9d1YhiaDX>ieELjNR!<;+/(_j5+EJAk@VY,3Zi7hCr,*$iLEuoK0,Q!4riZorf"?YkJQui?q8f;
%,4a^jY69ZeCNB5i+SR+%!(P+doABC6jGT!L<C"4Y#N^l_Neo$P%:C4`575;<,"ZG+2`a;oV_;jl`.%>'N6n_:7m[^R-hpi&Tl,+[
%+7DS4UTTJ'nRH-N>t*Jl^)6Wr&^SjC!67VXE:/jZ@p"+\?go/Ti^4k-JHLKW*6WqM`;%CBFY<I6'_00,pn>fN5I!tDLQ@.D-I3.,
%(ZV<[5[_L^g,Pl::?"-=lt=CL(hC<h5N<j'lVLf3W4-ZKT/bN_I`4L4_d)q!0f/%$WMo"bZG(i=!!F3T;@d866O(taB7)o:CQ]R7
%^F#A2qJ-]]W=M3,a[h\pQ6qcW9)=r@7On$cM2YEtB+c)]OM;S")<g#F231N>%S4O5WIlF]r5\<+m5ot\b#<XBa"T=bNq0G`ZZV!s
%KgQ;-`'65l<&fW;M']_;Vo$FI>C&"^>S^1i>rf`#\8\uCa](6]qZBj9YuBToknpFoS+m\k(e21E+"37ir;dP+jjiliISC9ua5R;L
%6"`F@f0=jW0nocJ3pXf4'4^8\\,JmP8%`*".;Y9IX21uR7D6tSX?7RJni0)5U,o%rja6<?QuLW0>:\!!fsgKgO+?bflA#Nu1ZpP@
%e-<ZY&UgVeV8Aj&$\p6Q._Bd$/![es]LZV+?7o.aQWlp'%=^QqQA*i:iKGnUDn\mlNn0Y+ifq!oad_X_M's0aR[:Z!Wh-l0cJ2)l
%XP)l5G0<"oS:?5<]?NQ.A_9_B*gagIod.4e)^ce])Uk:b."@!-@q:>MDFtE]'Zt/PKDKYoK!N[T*37s/.:?eXkJEn+A2bno*AXSm
%^9IEKTbWl%Vqp3!-+gi^Tn>t6hg83<G3Q4.olJcYQ&%_MV<-&igRYg+l%fb[eAJY5'p;4Wb!rLTJ(D*,1i@[I-\-^+\Tke(?d%AN
%-e#I?m:`ob</d.1hU>P0&=p&f5"1\X>k2_ij,-d$NuV_1%1]rABs=MAhnC$R4I++hW3W+%3DO<b/(EtI\[)j;Qf3(g2PZmZ%\-E^
%o\f!#^`"fp;T2o.2`0Z3j@XGYMIBsLQ/pqNiD/R5-A/4h=2Z?DqM$RG([6Vm]nfqKp!K+dU<3n_?XJ'N"lWJQ=@aN9B-_FgI9qUE
%p#G%-WN87-n+^@G]8g'FcKj_c6oJ=%5Kqd5FA?<hQ]>QlEnPP#91qr@RkA@uoM0dsflTLfMOXDY5FX8fdXIA4F?sS+htTUGkm"m6
%15ThYQkF\gCc]n,=>&D0YOr1SF?tAA7/tKNbbbcjV$i=N)(1n+829bUp.QTu/h!&=ls5=mZg!'D/(OGCR8"JS,pltGQq\B]9BU%^
%PKKa1;GPWg44.lUi+T&\B@@$,29HAHF>dE$=4-i/UL_i-@r.=]FHaXFGW&hYN/aB&(NbWL(^!!'2I0-3*Cb3H1n-*GQS.pTY*$'T
%Jo^)[k>r._9c):[]AX4`@[(]?TNo&/2'5?0V@-:9,46sObbjtT"#!F0]g<BiNgL#Yn-b$."V$em(E2*1PN!qIkQ]sca):rEDNHO2
%DY-=XNr^)RG>HF_GiDZWgtNBY%bE<[=0F5[]9lR2\ff"O*lS[Q%B*Gj&5O9=n+la+/:)$XF_DHQ@4!k)<*e^P!ijF4'qlX[9%mZi
%4=6X(<hK&)R#"<O,HskF4d8L<1\Oo,CCqT^/Y`7>UH"i*\'3Yfd89AVgprXh;<VnrGf0jt'4'fSma=GFgj/3e%SEOd_!B\4L$j\!
%:f*Rl+Ds1f_f5B+GC:OOTL*kM@43kQg^Tq;=Aam,bM39`^;[ZG,'%*Q/hr$oF*0II4H%c6d9n=8U-t;*JR"ea=Kr\do]]mL0;#(q
%O$3-a-e\+,Lh>&;N0d'o9'i`W<^I:%GS!CC\p]4;dc(Fm!Hu\sV`1isPcqr)VVb4)9Y;MO?,XDn\E50%fVSO?.N/Y:r^fOG@J9`R
%1e-st`o2"1$[ig7UAZiX56GtAh-NFST1D2AeTU?GKq,mae4GU]ae";+D?cYkPZZ*TZ9PVfZ^0iKXSo40\4__QXa)ZD8S>;MTf?an
%T="iPXMSAu'oL.l7LW8mlb,d-:g`s(klP[?"LZ8_%o$X)7uiOoR;t0qN6SCp<\V0).ZkmS;Vi7EWh'()75i<@rPV6;(j&tVq\fF!
%!8>c/eZ*=\]!0UdpnCO]<!IY6L/)98]\t0J=8t!#Yb;^JJh++;2=AIWm,EdS/0Z;;0oT&i/oKM1nLE=NR?-AM_lsJlUK#AT5+a7!
%;Vi\i3OA]dc:71KDM>\g^@B<E\F\3s%B+8*@\?//p<s.&6Cs(W)&Y37<h>26$gUf6K&7T&cGm#M%bRr/9I04L?t*u3GHS0BZ+X:!
%BNIqOZ1_7@TT`cA%IPTEIX@/L98FO2[d5Etd69l0'84r`a=]3,Bl<;f>(FRc@X;cZk#Y$K0a23C%8:4DhG,/W`\b0u**O=uJD&eg
%0;PrK(u^(OP*kC_^1*YU(e(rP@bC*gmE2>MXB<K(,UVq$KBe:Jd[9#CL1En_s-M'40RSoHF5Ms-_Rtb7d&Tn2Ea6(l?@$$Zim2Qa
%/<L=N;<."poWdT)`6(6+Y.X2_0TT\5*7s@KXJ`%,kqIfrD"hHgo5JIQ5/i"5.HGm5L5NWoXQRD[Y%1-Z.73Na#)ENYr3#?UNPP):
%*gAbR[aL^T.=)6m/`cV2_LFIBMq-S`V"GHFO)O4Z=&(@%1X>.-qPM=4j@N']GN<jM4J1IkCfAK^/c%*4FkC:nF8st-5Ip8/]Z!n4
%/\L(J+rsNd:V4;uW&RlTPX>\@9!?8O*ZFY#@?V4nWaUOo7+G`#^(:MAVPYZfSa#m;59nHBnG:JT\$Jt>52:O1&fs@-Rc<<(r\Q`A
%$HrB(VJ"2hQ,g*S]^U#1a@[t*[*Z3Q]@fF#TnCY@1?Npc&mijfpW]=b=.Td?[,&8r:PB:IgAJX+l.OOSc0TlXB=8EDKtE]?TU,S#
%O1k#%^im`icXZM-7.g)+[+*tNh(^Vj.5DE<5,FHiA2<%jU9i?b8(<!.79ukfjOI95DM.A$:c;+FMV76!.E'1>iZX/WMDmN%.We;"
%rVk*(TiL()<[Ic]4JPqhfnh21dc\oPq\&$_]&+ATZmp1`5e@j_Zmm7MD'@E=)E'*_5eVe6\+bJ^=nHnR'rNq5qNcko*fN^2)]5F5
%Xhc#4WIa$l;,_LR'4=`.ij8ncaWK.bhH7&YoN.LNZE&Mr0HZ5#53CKT;i9Tt8*fC:\(PZ+"rfWCWVCH"\"s163/h8G(FO7HF1W,J
%UaE*\*:ms*iu`o2HL\/>UY`Du/AQ6GRZIX8Nu]5Q0sU>h#$EOs^:3*VGiXYJ^,K^nm_@M%<dk8#GruR8.8@rSITE@o;[RdZ3(=s:
%Aa1];@onM<\)%6j6'(!FGM*R>dGl<Qs0>i-Z8-k6j%,m#e4/;SdbKRN,R`&THo4i3VZI?Qk?t5.X63pJ3=*rJRu3"@O.hP[VXtoJ
%WkU"6YDe_RkiMOn;`TIeV3g#2W]-^??e^(F5@.uTCSf#=Cg\!Ki3!.POeK*I[`T0Q)P"ta^U*-nb98SuYb',o(lLpUlUr$(eII9Q
%5Zb[YOp)\AU]PT;_qlPnQN\3b_bAGR7`YW>@Ea-[J7JA<LT%-fVH_'`!fWTN33\9C(f#gcW#(aM)D;IPD@YTt/=TIX$rp.XM"A[5
%!fWTN(u%Li]7#U_!Bdp``:\g3*_`:V?YDm:M&,1l_@&:l;*OiniF$M?]V9efMJW<eU3m&]&gpSA%k0N=!o?>&nccs;r!SDQKiH6a
%E)F?BqNYP*jmu6Hf(F>(4PDT^c_/cqZ*'^gJMik)Tn;V,%@tTu;I.$;N#bU]D(&H:DnKc<\97bEZgK112ABcZNW1n9N4OIXhM)r`
%Y2=P9<BlF;T0Q\sk`A4fibk9tIaJM75D!Ru\piXZqlBPse9W18Y$Z95'@5_X\#s*!dcSUE>96P:!_BE(IaJOt2cetjoo$!<2ai,V
%BZ31U=ZM>MIR0CiDH/o>`mEplrM$@hNLZ7lPZp-<"f`a2qF0^I.)dN0f.X_8hf/8`_K19`X2d/6>sE6\roDC&lgaf:qF1,kS22pJ
%?,,U'I^-CoN4OJc<W+*t+,?f\(S./W`*J=)f.[%O&lp*[014@aM[m8:pL,CFf.Vf&Yc<04B;H&>F.QHDRm^Psk_h&Hk9%C?T*O,!
%<W,Cg`tp8p_<iPU*oHa<%mj:2Z0Ur!;W7plF2Y6I(G"3_m(.Yn<W2\@j4<mEF5):G]+M?s"scYCWUjO96c7LJMlu>(^,B;Rn\fJ'
%H@/($6XMKa4hgHI@<beeiTp#n@S?T*Ds4Cj2cM6?OK*b\SuWIgqXl4?LfODj1*;:RlSfS$Md=pf>0W`t2L\pr@9rt8ortVXL"5i8
%3q%3e\pcrY\DF;Alg_qNXU!D:)a>2]H4amU#2C(,Q1G\eeM$(>kl^8J/Oie6$h;"C?.U_Xk:,$k-R*Wa\pi&kA,^lo,NgMMWh9#k
%\2ZKE_0,_9q^oJu)m6>NFB-(!m)fmZFV?3:LQ!8o:tI@(0heBq<5[\\qF)ohhE/I!lhUdX;Q/jsF>G[E?,,Slp1;j1h:W48lPCQP
%gn.k6>$\m.N&d:-O`sAaeFe`ck)&Sl==5IN:0kVJi?2`PN`4Q5?T?PgHU`4D=uYHpK?8fJO-iPC=3Gmh]2AbY7qN/u#2]7*(-U7]
%/Y<O]I7gC@pXjgt?Af7)$(*'tUd.qW)?kjkhAQ4WWE*]Af?ZZ>oA.rL/_TuC!V0fMC'P\D51SNLj_:Q^8j=lPVWPr&;fe"Hn#>*r
%kLSY8qN&>"\oN83Gkpm[P`!H+]N"f6>*_d9B00"jq,*H$cg2sW]RTi)Q+p\`Um$,l?+N!nD6fJNrJtaYWq63>>ta"bFT&`#PC>)h
%B;E0+e\(POH0ReDI(X`iT$GlhoLHT_PPuP5cJ%Z/1#MC]1frBo\T-Hn4^"2uS2gra_0HhP46Mnn?M7.fNpToB>@.?DHV5s7VJf4B
%XHiX*qXe7k@.sOL4Z-g6O#,8XC3j6nB2>*`Dg#.tGUd+$QYgHWIrJ%og=oZmnhMfAe6WFI[-?Tn^1\q=0C<j(TsU=ng:l*j&s02T
%i:;$sZBdA"N8BWfBD$8Yh*,.KFB=o%pT7Gb^KFfAk;K0bp>NGZHEA5Z]-kYVS`rZ)))>8lCqTG5io6DLHnXSS:FX@V4HkZSjqF'V
%PO^*/XOe44AE24C4@T/HAA2?!X0=E^qM9C[cDK_glKbFG`n<^oZ+>%C>.i%?I7_]M==92^HN=(K8M+fDo;SSagi7)Nb!+4!RcL[(
%nEWhaiFeU\\aj5blDB7lPssW(1\*ju?7C8$nhR<8Blg,@C?%2ud\W[YA<B)`[,gT.gH,/Zoa_u9;Z:G]LL7)<p30T$1:]OH("d#N
%rTUYs5ebm?VrPJ9r@Gfm(YN/^1J@4=cn6`>XKaA`8*C_h?U(u`fCu,Dmq0,:Fnk:SDo*$r2OipA3UcqiY$cZp;>?h?;cppZJ<-fK
%QJA*smCTD.rlooKrIJWjDd3-p'A<3?O_e=70'.</(0m4dnnoV?8..XBA!<PYEs1CR"X;G;(.ga>o?-OIB92t0/q\(e;;J`SOh[K*
%\pZf:Z:JB"/:=]f[-cR*j(#k=/](T4(1BobA8=t:o$C/J754Q'Q&OVIc,lU7X8/NK09pp58^K]83XrhVOo]U\;Z=,kU?)n-jc9TB
%@b`R&j=@:;bAWBNX3t`[qfHM?-YDf'S;AS/OSu/CD9bHI=M@N:NK)=;kHrn/r.0!&>J$`V\_?/jrX15X8_/)1]9I]B/FI&t]i&H\
%Ip\VI5><q#]<,`V&h5*!4eF8+ZEaVHAqU$S.aJU?o8P"[QhT[bTC-8s_(boeW3"bN$JDoOMG!oE9L#qn:No^e;JIA!-cu'ZC\daB
%jeMTu3W"H9Dff4,#GnPKjdZ9-ZbH8`olu1EWUR*,>K8+\V9Io$c#;K15>RcNq9/H5k537%ZOVq(A*\0unu"HC"@FV:IE8\RChuY=
%L&#P&q^ZaEfWK/D0+/ko7Xf!"s&ZCgb%Bf"Eg:rPhn$HQrX_[cDp0"iL"A\;F*/^kG0so.TA<kW52TY\DdL1bPmVGJSJ4GpEG$#e
%qOdT!?bI?_E_&JlSeZo>YaPK$@qP8*9O0U*([7)GF8f)4I5&@DB^;eLXZc@UCo:?;fdm'U5!%>fYI@;a=>ojcl0Y3c\[,rgp>+#"
%WHPU(rR*23Idd=45i0KcJCCW+bV?!)A^01*AXEY+Km4sbS+991&1Ae$Qo^eW(YU;glu;BXUQu'FagsBk(I@,@D8KYH(M0=8!*A""
%/f(X/p42oZa;<G@^iF*-6(C[[Bj]_Fbh\u%B.k@$;=@)T4$-3S=oQ<I#"!3WjK-l+_\rC2!`GMX/YlTe_X!]4CTs8LgA)8"7S/(n
%"O%tM>S<.)Xb*p$YhG?<GpM&iHL;'6jQem6`-k*dMB)N\ZY^pmRNhW,hE/@)3e)Qnn%::/T*18?+$trgR4W.GlqikAgK$%Uq3is#
%<k`I\lfR.g;s6O^55`skm0W9T\74,9[&FhH8^ma@8'>#\lHPKb+sLj'YVh-W"OShmo4uZN&@@@@Z&@s=dFZ?H@:l9jo0U;p1A7j8
%C<QsQRTeV$Q!Vmu*>i@i\KImc6il[KPtGc"$`Q%\kC$Xkgmi90/k?3h):)G1(*2a%-&1Es$B`Epm)m"8GkOlJLlNAt#Qs)1;:t?_
%'*shX%VMn>>n?(qkM2smS/3I/0aE&_]gT-8;E[#ArFr;#E=#Ieq1>h-F@CFdJuP%3qg<#9T#g[UD3t/CkBuR-].^j^X3IKJcM]:q
%jQ:C=LZs?[e6i>g)[p62oAIB[cQhfTc:r^n&NhY2kaNbq;f_#!G;2m#];%pLl!/IjKeju*Y4V-X*#.1Q;6VIAi4c<WZ[1VAfO\2N
%6K.@oOX%^>`lT=OdHX(rYV7;p@&*5?oN:*0&fm(L"r4.\=+!OE63/ZAJV0ubaVR<qdN]B-6p_"sjB]X:8N$*.MLtQqmCeDZ.*_`&
%6jIDqYntCD][Np\5=)(Zg4^IS&_[9?rQ$T,`gt"V,!G(FR*Wd>6R!O2MktE[O^ij-0p[r_3sTe46Fr8u+Y)\@Fur6j8*V9[mlT@Q
%B,dpRs67f]%+Rd3#NKlmCc5f6&JX3;9DXiXMU@,j%XqC>K!l=P^LoLTc*L)uF]$gOnTGM6W-iZ*CHZ=,1!`<i%`JOAr>9/lX7.a#
%C%lRhVKNIXSp'o5\(s_F>rd&b;u0P-/c?q-6m,@-b58`094MrRP7Jn"#U8rh=?_g7L,c@35Q\c#)1*7LLr\&BZ+N3e16g-GG\AYf
%`95[eF4esmNXC]OKD)mZqBW?ZLT$s0TOah\5ikZ6/>.n5Ls"I<c6JHA3Uo]]jb@I/&WB@#Q0[AY$8G454(so<WFYIF;<<4SpK*(f
%#-QW\HsBuhIZ]gtK,KY-?VAPjhFeV(N(_YUrnViiY=T4`$?bBD.YjS+;4Z0WGd3,q1&f]\MXdmormWlnk[/g`C1s']WACTUInEN.
%pP72_j5uh@bR2gP)_8+_.i>FCoX"-V<rCoKIW9i+R(@3OYKdZAB9]6\rHJ7i0m.Q[]B-#L"'ZK9+\#D\q-ckmTsY;uGb!rgL1Bf+
%e(JYbcR<R"A&m)1.mH7qS\EDcBqsjW%$Z.JjClanb1q:ID@"R/Zq8dr!&:!8W6WT:]bC;ola1t^&)L1Ke@I4`3hF2>riXHab77u6
%F*&+1I`@P8qF.u_[HAVj=/>."O"F'h.H`N[_?lLc\(.:Hr&FX7]gtICEdkU+\p1X2:8EmB/+%T)r;DdEdT5N!/lLKLGH\Nj:7%30
%q;0:2?fWkk/<l^=2%UeC-m^B*GPa.YGTs9V<)7U.mQ:(lL&Iups+j`Z8o_T9KR^;8Q1)o`0DVK]SU:)]]BS//-@o1/5h!p2?Uq[!
%8o6TETRZq<.\A>C'FJ-q@!C3'E5$_,W8;Gu?D\6Q.-_Opppf!DY9<L4.=9CI`TO*T\+6EOIVnOZ21Fb/Q!7J'dZ2$rZe=X12g/MK
%T>+X_?:&W!Xh9+\^Ij3<hTqMa206KS\T?@G/WX]QD*QeJo]=8>rMA*t]Gm9fc/mO:4@LoJ%sMb1c0(a,WEm(%]!3-BTeq8gc+Ih&
%5H"[e13J,;@?ELZrW+*e%d5$fNX,>:mlJb@h?>"&/n_,TD..4^7K.$S:_$El]$T(=_fFmpqrfr)n7bD&J%/]fcX+*F;5g%SX7T<\
%okO<Z(X0_a.gZH,&;ZNKBL0qh]`W1;S/3'"h$(?5\EHU(e@>Gm?;)K>-!]m6CV)d\.*:.4Z^+,iHtV9JhCJO"g3QUTY$9ZY?=A+#
%Nlhqn_bG_'M\;r#H^0/_Si?/;SP9hLJ$*BA=.8"Og\(GYMpT9\4o881X)o!=mB<(kG<uU>H=qHhTsB*4/gBJfG@'J+<'jnq%m("(
%pG6@&G@g'UD>pa3KPB+CdP>>ZR6U/jC[I>Za4j*/R8'b.nlu!sI+<IUQJ/b#AaQ,GSS#;(?#+PGbK9\57:C]',(rj2^=8<Kchda[
%`O4m'<Sb)_bIB@BmoGeSPa^_f<I.g7]8!FEG3dbPceEr0cF10ec-g(k=(1A@^UJ?0Qq2/_)&n:Xjb@p\GI8G`Eut(Lprk>O.FN(F
%n@JLYg,aMlo\P'ohd-J(isntF]0GV\b_nkGK%/5f`cZ%<>*A*M\Ffc@mFDpnaR>DMMrNZAjUH9Kjf[B@-`ah(5kjtQ[O"5XT<3U8
%i0EnG^@SX.Z85#B`F%B/a2RcNlI4%uil*5>ld%G&ZEOF,\sAWKgVr/KdQN^6?G6q'h%T&3jnnPqS]7lB-f9]Gmd>@[/`2iPV)u[5
%$n:(hQgSBk,31NRPuFj;([#r_=3eFD:$`o'AU_#)(N*g)P53K<TBs`hA:Co(:S]?_o:mU\,!?g3mu7H"LnR%$[hE->';?.p$&!g_
%L^,:9@KSq<%T:uPed60p@1^5<I=Vr)bQSB-aNq.2&:-O$)GCr-W@cIkSm/fl*?km[)qU5NJVG=&p@kUi+W*S<<NA4_mHeERBL;,"
%R&YK@/B0uIat#PHpPX_!X_%=IakdX7:_?eQ#6A$fN]&W<iWf'R4tJ3Zhj=+T3F%X:4*%&pBGn=-bXjIUbVG5l=N4o_#ciHc`sKrB
%nfi%?_^0IDppQJaV"rPI.4<,(fO&d$SG5(=F0u8>0uqkS]=I.(-C:4&fp?oWL:!i:.%G._HR3,/mVJ5nYPQ<sDa0J0ZBoY)jP1Vk
%%m-u0%qTgY=ukEls84>B,\^)RNLPD1pc]/1?\#g(8J5V&>5lu.b(HkFdb=6:)8AdZ07#c<fZ!-qL![g<6T4,pidLdjBq`UdAi`uo
%Q\NuKV;[tci/*Z7\'9i3-Z0`5rE]%X?0oi(M.]PpR,e#R>]=>:'hF>d1>H(ZZBG,Gk<SVEKg-/icX%0fh9E=kfp=J)3s"rj3$Q^j
%k&Z<N%%qTC^P20XeWoTEkJHXFikc08SG0m\q14.#liJj,0LIDL[OV-V8r-pnf-@Kt3%0"c;4tRm-.389mR/=^q1qT*Y5\pA[B-GN
%]-pMEl`qi!XFLnGMnZc^]Wd=SBoTi<g?]9][>_c.KlX-im[)b<#*Deo(DdNn,6i6TG!EJEXSWm9Mi\FQ@NdfDoY,G"'1(*Lim.Yn
%jS`@H[DuMVf%1Lp29/hsARIpsOE9p*8%\X^/lC.t5ogO(,'Fd#f8\/+*IY@Vk?gHeD3!6Pn)0ls/r)H8$=Qj&-j&c6e*$G_0(,H1
%=mJIo-_C:NfEP+fmirC/Vh;/oC)>oPd7b"h__"%K@9p7<GSdjHDAUaXd;@DIc19dhcE/d%WUtQ+ge2.d:Z3Q306$&6SEgG;(>2,.
%KL"PE3ECZ[+$_"PkO:?Z5cB'em%VlHn$q5_;\"eH\r>KFN&c,sbVtHll01KT:c],)#H>9"pC"6YkNA-RO[m:,F6t@C*12-<T>g\0
%6q'03E^eYK\3uA2NTWcTi-'uo$Zo#`j*L^hNQ-*EbV8F%/:pl6\>hX&acpPr9ac)52kj5iA6!6U+/nL9DXCKf0sFI;[p*<"X5fLY
%[e-0OiSVho-t%'-UNjUj'VgYXAUc;md"9P'*st2\dJ6KF>Tl&AZ#VSIIsF=N!YG9ul^M$#"^l5C]Zu!<9jQk)mr=Qk:_ketgu2\+
%h.:\GcANGr0meTg!+FsEOrJ!4Li;5c=?4\i%D*u#blaU>qn#o:`p_qLN_V#!BjhU+r)kHEl2D=)3dV7YYWFH"BHFtEg'sb+drPiF
%H("Tn"o`g8]2^dB)`2n/R@hUG]=3:e\<i+_<l=;rcLnuVe/md[$h$RLA@l_R>=#\SmE5I;K_krdl1$l#R3$X'=-D<F,&LSe/Jkju
%AlnsGhT`shf&]rm(JP[t^0c+qY.s8HLZA&,*V0%OP1Ob8.qAe0</KdZoQ+Zm7c'Q2M#im@CRQI*\qu[=4*;'OfP_'FXmX*!)OmeI
%6@6n_:X[bO=2.OZDdDeDOj1P>Y:Qgqg!7#i^\<<i5Q#:@]t&O'DXP0oceKXnr,p'6C@!PMPZE_)LZ:A,n9G?q]qFlgDZASL>X&nW
%e9Kps>kaIpJWKJ2o%hNVMK7J,r:sWu(t6Ye(WC-4F_U14TXW#6$'\cT,IR/Aatsp3[S@kSMq^lT/'E`Tn0mu;jjqP+qeIDCr-jF1
%<Be.u3sTQ11jOnMG73jeG[c;Sd:,g"5@D:a_DRmM!G;OSMl/0gdh824J/)>dXC8un4S9*gq+%p=*4psX9`8RI%0[/]50`)AjZdXo
%3>t0_O^2;3=:'+^V0KfI4M9";&@+;[jO].Q5OcQ*$c2K^/)f_u?X)Uj^V_Vo]j8aaQGYgkp*J.3h<2mY.SEMn^+A+pD#Y@=\kbOs
%E7QsD6TX_$-tet9k&TYM]t!idF'a7>=(WVg?D[BLS#&@$[qf3-kK4mZ*ONSiMYB3?\SdProYU5q^/?es/dpAd6D4Sq,ASlWQ2eVM
%'.\`bp1='!fQ[u]q@`$LJR$^9]bWHOT=/NR+,t=&mohdr-gCXVniuo!7G!a#%KAsj*J!876tWXRR89+fM=a_qX52V-W-1CoNCs*:
%j>)7'NlkH#43?S0D7>\PO@_u=Ua6&f_kl?+RFkG)8oBc@DuPm_,o1gf:FG41.46"o5;JWl::66l$&Qo\2#Nj@jad9fPCWXpe<3>D
%qqk<B"o:2S.&N689hS8sMO$%lh+E,@b`ERiK`ORX)Z`44:"D]ke79:YPMqQ&1F:^JQ7:$7/-=:AROT99QUX^nIprs\6\o<;2:0&_
%<E<Cm@b<\6[s0E%7u/eqSU>#$im1Y#PB9S:B$OF.P<pf0-]Kh%`X*QPU!m%Q#maD\=/KEQALXq%^S5Q^6HTS_%9Z(35W%.%O:=eO
%?k$ML/UO]+0UN5A6.I6GI]9@tSYiC=,/b`?2gJI=AE@pPctFY(Yn1BD2M9Ai[<%3Tl/(k7bg^LD)@8?_^b!I#X0F51$XpOi&=`"i
%_[Jg5L$>Zd>I,&*#=DSVGH.ej6rj'.:l%]a`1jTD8>hp$?pHcWUR"?89G!mA`)\JGKcgugFAl,V<]1uNmE$Y7!mu+FHmu$u3Q"bV
%U^(?XL-d&PCj<2I[W8VXk=)^Gm(o*QE.nA3ehkp04ngdRliBLePEJZ6R4_E[.Zt$E&h[QQrD8lQZQq^Qm?s'#,/FkWF-7a3/mT7p
%\3W:JRTR'$7\c=h>r%ok65h=o$3s%\[nJue,>?ZG8uenoOqVE,3LcU.SWKU_+[e,/_hGmrQ(0/TSlPp2Y[uPs0bqt&IV7_@8Mb)L
%L1O5<XhtRgS.#bOC_[IRhf?kMWH*"aIpn,ea;G1*KPrNf<Xmb/K:%lu!Fj_#,=[l;,Q]b>%GMXR:,8n'j6k#-@:q8s;mfUA!ahr!
%>R7GGEn"n=+d,+l3[8ZL<=R_G!g7'siB6B2dVOo[9\lL(FWn'0+K!D\/X$:^\l.4<;(][rIGl=LQnG?r:0gm0PHl<2V>I8sL@%=k
%@Vf%!`)^&:Z=SseA6Wl"A3)6k<Xc].MFtW^/5&`a+>V[R"sCNeOi8"_q9aga?pJ4<l3<S/W^R4cZ?.QKF>@D>6AWn7F[fOE9Hq?,
%U>;'4N72X-&t;3_V@0(j2D%iC>JZIS.RYgf8IFOVd@DkF.jh1?el=j4S6hT$TEe.LCaOK<Mc-,i8g?ru2A7p5Cp;c59;AU_6<1*;
%edfuqAVt"mV4U<R6osk/nK*dt_^-Qj5emX?b24M):s(_Nkn`#pEX%^A_UoXNN!j#t;GFYD*QXRq7(_$$fkM5<EGZAda$4WQP01MF
%<L_uT<cj"nP%8jV]%];6)f,Kd0q.Gp/s-@(DMn3:neO3g7iMLIXD?\;,VW5pgL:8?U+k,\fZXb7?Nb/MC5ULC;T_hL1hLd5j0U#K
%D;)E[$\0)*V6EtSFC(V`ku8mkFnV@.0kFn%"<p]dM(0G@N.HN/ap=,HNCm\df4d_b_uMq*+f7lNQR'c2Sd7kG%Fu93$g2C1@-aZp
%^f1aEY\]5?A/gEnOr<Z/<]/#3aJi/:0FbIRp1@2k&G6RCM,&k_l5p#$)p`%(6E"e^S//D,0'a'82dS6VM6^/mMff54&s3`WCshd/
%W0"[q6Y*W7b=M_$d&:nMit)o.T'q2Z.u)\<fbp9A'M9X^&+"*mXXK2Y/R#0j0FDV+WLjH+&H\C3U4qu&+lL-DC4i>o&Z.<\%m&<$
%Ke`H+=gSD6bRaf\5q1F8,Xe^;gfX8bb*G`?Z$R5m`0)]qmPIc##XgWHW<Pm.^Jeu:(L%L%a'e)WJXDnB\;2H+A0rut;&BV,P+D51
%<2*?K&Ag2RMV33R:.;!S3"aH,fP3;XB*^k\Aaia#L(M3/(dp7jes@pDjV8:Im7V'6LhRF65QhWfV?m7.71)m`=@\)u&cbTj2Dt6a
%&HKY]igs1Z-+!tKMFGWVO^od&JZ'L.HkE)UZ58iCkf0uhXOG!Z`F9D#U@YYJ#dM]4L!hQXoP?F(S!mN6?4A/&U>;g^<NBpDO\<,f
%Z`*:E=d"gS#Y\`V&XZ/%V]%Jo%%DF#CruiGXO+*Yh%k5P!>%%T"=RM\K!RiU4hsaZSN,/_E<6J$Ah"ZM_d]N0B01"b+=fm:DX%St
%9BHSMC<13GVCCb'lr#AWC0`iYMc!Fi_XKm372R:h"GR_`.97k>"UO'h(.T*p&=q83I;p+34:">BNQF1JA5\.35j2jhA1:t<ErKX>
%aaOOlW'V"36AQ'S]VpnKLqJPf5c'bJl=[ni5WTi("q6MW1mKMTVMU(iBXP9W\nti$.cE>Ylr'%1HmVd,-8ND*'%Ek'lThI0S>AcV
%fSW@$d7#BIej>K"&tZ?K13(IdLpBF%27?Dn[R<r1-i4Z\jn9,Y_9unP&RA:2*@!8e@!f]O:Xi^mVW%jU48&orMJ@`t`TFuV(na!!
%/&E6Jc4FQF0&'nt)Zo6'Fk-+AP3F-53`='Ng%_#X353Q-=u':se3<q(.]#FOn7;"EOQe3130ThT7$-\UQEhe<5gGk)q\`3?ku6'0
%9qWthM:O+LB3uQ4&heeQ#.+2KSKcp`B:/%bD(?#l6t'S[+&EV93%(IJSVn36n:UD59[."JM!:WQ!j`[c#3DuZkVF(+g&W].'7s1D
%"Ir#_@$5c5b%V$62R=Z&bE*<&Zr:SHBH#SR/jY'-/"qe'0S=;UVGS%3-DM!'p1-gNlJ5i4C&0@eS(OT!UGiA&.mU$V$prVk1uX"!
%i#2]Rlugqm&7N8r+CYgB>GeunX4c5?=f`rbp6JFsAY7!Q@(PdT6O8W3$/&a\?S\(j]au=IKGk7"%ZKn'i0".p$;(G7a9Z(DP<1AJ
%k6.!H=sittOTdM+j?OFE&.s=cJ1]:_I81:OLen4%!s0a%#u_MY!]mV<.a(MF.eWkkR!_8m8o^qP_+aQS9hI>Z&L*>p=K3nFX1/uM
%r"XGf;"\rSE2%.j7+EPF#gg3%(o7SPgBMB;fJ5@:BejbMU^W8YSag*QfV/cZMP<p"N7rk",(i&:p-a-ZdJ6p@bi3'#9Td-Q^h!pJ
%e$]r&i[i*70`]ZZVFZk7Yu[*d/5<RkcZD30M??jV9G[mE<#u2KlmO[f#oD(K=SiSt+?+-m5'?geUC2OiD[N9-DD%O^U2*G[UYu:d
%<Fba#8NlsZ%\>As@P!UKAV?J;cEr!7(J50sXKf)<*$6<i7Y!dt09u0@W+%9Bm[tfD>_#+gC@j:d,Pu>.?PbaY'iX&&0H:f3/pAWr
%juX5[=Y_p`A0bau/.-UFfr3$n)J%u=6dH`XZI=ifat@.j8r!sVVA,qsX=jX=%@;<R=,+[o3cq:96kt\q*g0)BMDKDud$<`Sb#p6S
%m&<^e';@SA,(uUb2f/1.K/#h*&@)FEOQJNo/BE#rF`sl4['Ct^+UcdfMID6Z+b9DWaol$%G^@+RaO$<Y7m5C:"GX=Y,!`Cb$:1Mh
%MOuU6SO:_V*?!'m:!SWM&>mi0#^g:T__&5n'R&3/[R21CK-/R<N.T/mWe#`+!t^I&X\l4n5TK+u0[pgK_KS_;E5CK"eZ&7n?8DAJ
%c';.#12p-k`Cs/3Y((D9Z>$f[\ic]TX(!S@-SotLAq:m<YfZ\p&Mjd3VPZsb/OQ_3\5Uo9lJFY*YGr5oBsLG*0MRZq?Nlh70N$Xp
%Lh)C5hBjR>;H1)5"F?f`l'-;D#1[AF"Ht]A"]%,@-?g7fXiOZ`4tTF)(fh')TaEV'HH_5=@!Fr]cj!fo;$N';-kD!`<<i?GJ]VG@
%Be+N&V,KB-N5n'.FIF-2I`P*#inTmApn:-)ocC7B(:!,_RPn4TQtmP$.5=sJ8[?Xgaf\F-NWXVNREfLmgPrh>0eM5bH51U`nMeen
%.POEnN`SAY+H^8(Z>`MIr3AR"@)s7<p')'qk;jYtDZJba<i3M18?kmH&>m*K1RX.VK.qQE6h!0qItn]7Y^SRM-JF!sK\^\.8-[3N
%S!sSukQJXM3e25(e1CY'9XY_'-F#X3U'^m('lJa;Ll$lj@CF$\j;[GYEMXF#C*!Y,#6]iS-Wh+u,:la39d1.$GpDhd)Bc=2$#4T+
%?t3Hm9JfbdB\8#%ZaKl]abjItWtN/iA&br,WSHOt-pe3GAEMkSCDB%^pr+m-GCV[);iCamE:*lED5C/IY[_PQ7(:gV))JaAlJ,U!
%r.6Oj0gu$$?_5HU%!L=fR+hV(9M8,Aju.U).nh@j83`n7_m\CM7H`W3'dtd;U)91=>7dX\e8stn`!&*U=Y#(W:Hues2DrZ@\I?ZM
%,ad>.0.a[rBPr0?LRHmV"-&"@TQQ7#"J./0^sUF9G@kb<b[<.Hbhf3N`okb+7Yi@2<C@i<")na9:5Qrp[fJhF07erf=E.G+?*gMf
%X]0liKcUa=ciV-?\-3`7b4'VudY-?l9'WkQ69KAOZneT$Fpr8a*lVW-]*.5_gBb*pIKejlKikoJ,D2I9_@HGkdq`e6*_9=Jn/GF4
%e9k7s\=-3RJk6e!5fis]_?Z>mJ<6<VF@;2r;cK<rP5/[R%Ym?8*Nq&I^ir0\.$?$dP&03q!etM=(s/M70*p!#MD^m%>0%(s1M2Uh
%J9le)&1IrQ*/tXI45,t90h\Ia?sOAd`PNT[Z,UMClt2WV-j$Yi-Ma%K$OHE?]E#4Ih5/d-f,b2Y;<`95`[D>+7UkMR%V,_S`d5`u
%Z1,mUk$Z>j;NVi_7>-g5e/8#j(8d`SZ782.N*mLa0LE&`7@)*andH42A7N.*DFp#1Ag#c#R%^hf+GS!iKN+/0J6a9p!*q8DM73Lg
%A(*@"hZ*plKf37@:_M5gM2in*Wf!iW5Uk4d1$j?[e9OufSSRj9&,c73_>;S*VXitjq+COI-,qT7Yn6%hH3\VJMkSbV$pnr!(pY<n
%P.7h6Zq]<E6BDf.mo4`\N`mbpFKT2BRP$C4ZMPb$)qhA5>]#g$8rG#,S\bb"S0sSA(_TgS3:)7\Q8P\;48-fUK<`lmp`a*u5e,6-
%9O1qW0TKI6G[RJ'#sGPl%:M@A8^h))&_knMAA/Hn5B`B%8-f54[3e/s4.Y7J33<T-5CsO)Jg92?S82()7RW)d\/'JQGZ,).YVb*R
%+`*aMXEe#)c%&r[rV1JV"nrgV^WJ6)X\=YEJi^bZS)5j_'#g9_DpQcb6N/8>P/d]nGT25g*e+=LLcU,=Q.u'\rQaC=#F__J!&M-)
%D:O:EL0d&sBM=fHi2666*.I=kR-*<:Vc"[k!:#;>C$6%t2j;cAFgk9h8@D""P"^Sh5ZL[P#)Fj09Ug8_Vp`q_!e+c1151:cL3BEB
%^`Jc?3r#C8VaY,Ih+$5Y!?@E%Zd$L?(J!B%mFQT5%[nP+,c9f--uGr`DMsL))06=AVMG5)SdtP>JXO`p+rtAI]DJDhM@?C['0K@g
%#S<3EdgDtqY*u?#iZ:a9V-"0L7\>.&82OFHeECJ5h[a[c?A>[h>u^'"_KdFh.;JJT13k8q4l%57R/;g,l3(R@DUb[GS?9)NcrO[T
%MJBH_9@W/36tP_H/+bN:Q+>/<6B;\9.\p%;mou?(8Dt@fVY1j!S8X'0VG0Jp>1`h;2,j69,alb*K[9lV7?P&'&9JV5+RI[KNE<pa
%FF*=bdnl&c_DIZd?;i$l30[EXlkufpEJWm'^J1@a1"DP>+QukmM1H4GZRA`W_B]YCJ/a#^AL`Ycn4KL:LlqJ?Q45GhK\/2p:[fO"
%qLGRH3!S(=W,63S>Dg3IPMHlrjU_Du,WMY8oOT`2MORMR?_WGkVo:5mC*^XP(d+7BR8U8*?1PDoX*tiYe%2P;&@fl#],6;H&:RhK
%N@EgkE*E[HTW,e&-,ldXM@c1+8$4EI0V-lkgm/#/TlKN7a:*Td(=aJ)/HrZE15"=Z"K%[T:5[b'5hbjnggMT@=p289=$`R-*#P&[
%n=W"QV-Jgl9=Z`k\]>Q<^q#^5=HO'OU=++YGq1!GM2<<h.00/l$B)#r`fs+oXu-A:)BQl".=bO3F.ir.F(,[T(AAE=T3Z3%2*/2n
%.S`\MU)FSPZE%2EVZ9-:fW=>>$,W'0`%FaaUe=C[i2$`F'NMdU;*hk"HPP]A;\d:9M7"KBT#0:Yo_:BGkK62CYq$K<(c9m+mktSd
%Lgl.bRpD.:XY_3P&$ATFD6b?6.;Z[9$Yj<U-D#CZqmom<2^U#o>-b@[G%6+X*^[iK9E<)8^Y"eX5Zl/4=/*fW/<`)KfTccY'Uq+7
%=Y#)!S*?4smO&6!/peDQ]qhGCnuiToJV+i7V+;u:WhT"h.hQ\m"A3ZO9DYV_d-ECd;@Es47MpmM\[mVAgtFK=c@]Y47k2:_D_rNP
%\F#5-+Vg8VPsr`eg?:l]!g23l0$FG2e<<3p/1:fJeGNi^M9ga(r_HbUd]9p]>k\X&5P4"<ahS.E8;Z?QBfJA.#*M9(A/8Ed?T:>H
%gW$Xb+TFW/O"-Ih5-s+H.=DmP`F:u26/bf[]I=laf(;%-W!orj0SC)>K(MDTUYt?8I>C<#a3`,IpsnJ+&;7:54l-nse;OYY@TSWW
%bNn>W/bR<Jr6>s0*hCaD1h47d:0OFgKnkXicU#0iphkL(@q7`)Tq?-VOT7G5K#/Ak(\/O\`u>>+EQ($MjlQCqc'M4S7eQSfgZSQY
%[bIQn-$P)5pO(l4lg<;FM>pleJN4)ZjB8)FHq@t=$A<gNXcN"c4pDDlO08Xj\''_l^<CgN=D#2G47A@%!^PmDB<j?f_^bfn?Z?$g
%q"2Ws!AN9)!`!oAOE4\GK-5#cV@SHqR1=+XZHLiQM.Dt([M>:iA="+Pkh:VJfnILUdtEojJ>IS.CmPpD;oJ^C$*p'5O5=j$f,4UY
%dp-=[N>pZEE2U;Z;qt12]*S!?_0hS.K!drkAA@_ALg>1k45Y`ZI>/>&qYV?p\2.8+(X5s#>;XnK:RS?1,D%Ulg0hnP)s_kfc&nWn
%-/sXFf3*[KGN#Tk!s+t]_QMW#Lc[[^cd<GM^(r!#?!\@rN#WT\'Ni=@AC's@&Xu\(9.PDYD9!nq`bYB]Z:k"Zb`=0q-*pm-brD<Y
%e9b6LZ^&Z:>H@@e961$i>3rk>lHXQ%m6]?,lWS%0?2;chq78pWWHmmX'\5XZ_(R^IF0b2ZB1*l1^12ZlEPB^t5](j0-\:qsSWilB
%SWikn3[Y<0gO934'n$'0==iXrqXrs?7(9@&SWiiU2QLm3!t\PfE)&:ojdg>Q,he5TSWaeNF)iGI3OuA5:3+GElC>f][J"c=I[QQI
%g07o%2*#AVLL?OW?=JqJZkX^OZdr0C:!VIF%K";E$1US/*7BKUZ8A8/KdO1`'UfSpA!YbF58Q+n:$@-L?!nFB#bQ0,49RMb%)X-C
%L/s"Yaiq=qTk=%--pm^@3MK(P^d=>2['3A[J=KXF]pSECb/A_"*,7h+fqf%`*^4;=6MSL:HCRqXN6H^a<?Yb-&PlD_PIU:[$<9Ko
%:doDE(<e"#?7o4`Li+>.'jBEsWXq3ERp;mYr4^R:.TAn]F<P&`ggA28a42dW.74i41/smP2Y:RBl^i\'g^*scqnIs[bE3b,J/6W%
%8FCSQ90j+;D-9dkW_n#)]t+Q,#=(@uqXcuHF#Nf:"k5ZXs1-fieYV!&d!sUae_gl'eQC2DE+D<WF*u9#aWBEO`:aI1Ub/nr>Tg14
%1bo'qE=\\Jq71Qj;WrNaYCp#I&HmTjmr*kk#9]oX+\5qt55<]!hkOL8\mpX;HZdF\:u;/06:M+uc%EJa;]WBqLcf0,bBYKNjMK3"
%5rU^\,Qj3,H;'[CcX"/2q2EqUTXVI'lSr@CiU1_$gD.HA=.r,i*UTj4BFoQ_'TAo^ntsbPYnZUE4R^#1QbaZblAVf1g)hBs[XB:2
%f3"!Dp"an0SR!=G\II#/H'"_>"<ptJRD*oGqVinGoI>25*(.bqT"aYK4:bfZfLR5*;-UP&/"$r9f>L'n^">&K,()Gm%(Gq_Fl4&K
%2UdBA4lBL]BEmn2Ru/9%&A1^Tnl\^%):FWUFM3<Y3pa=[%17EC#S$F/Rk\<oK`EYa*,#WG>I!.+L3dj4L'utVBF?Anp'=h0(W(eU
%Q_Ag5k^#HMs"\*UA%!9io]>\mLOfCbbe"HN"T7\p-X8Th^5(R4a;1bTbD1TKS(E%sEXGE)I-4Tq":T(M98!hLiuWF/MC^+V7aX:e
%5(jE"gE(J6&-+_Y-!U`A7H#u:cUHDM,,PoS4p5u@KjVY["FRRS*l<\_JI,]`kJ9q9_O!!S&)fhCn]H:^7+o8$#^m6LP)Z,Z="'WE
%+#%'r.uXfU*Au?5F-G`kq[i8M)(H`1p1om/27S@#G<?WVGkdE_6JscK7ZdqLmYc$-TEf,5iE.)F]nU%i,N<*t$NX@aHJ=,RCg8h;
%$cq+<3#76D`kgb'Gd(^nOUD2"[uDl?f;KC'%;"b)7cefK:f#c0aDrFTbkF*L5[(jb;TOf@37cg2g$2]WEL55?Nn)SuCh+&C/u[ks
%!-C_=!)IVXo31*T*Jqr9opXgb/+_6/Z;WW,Mb8),0A24JSAcMSZF;NY/m6ksA#N:)p>7&Ba>1!?L_WM7,@`6.SIn>#3I+)cBT\KT
%>o[81Xa7u=,N\!a:Kq<!N8p`#eh^:<goY5a*b)UMiD;);oo/7*goY5!-?C:&89cf"[?hTrBQY<R*n$N]E;,UMCd*_d[rN\\P-"GI
%RbY'=AiO.e'-YuJCBMIDJ%TtUoW7j\<[?7d$gHJnWP`;V_J!>HH1'6>;@7HRSo6,b)3hO3n\K/$c6F<@7b;[e/nAhMKm@GjWD@(E
%p5"MXRl-O4[X(,K30)gaoiW^Ua.Bp9>RUYD>otUQS\/6ZN7FcKc7/A^H"h_>4h5qEmmF/IQ\[6WJ-35e@`2qj/)#b6l^rkW_QlSF
%c#>^&['j^klg-uiGsHHimC4S3nXPOo4&QndI*s%B^YdK=?c]eBZ%OG?)W+8%rrXt$O1u2e%M7&_kguE,P;#JqORH]"8d,jO)K]El
%+CYeZ+gmGmK)-Zo4bt(DaIt+?*R.<2RE16WrNDEH=jZpcknuQ<W(p-LeY`9_mopJJngNo5k$Si?A01]H-1T'U./$BR*rMg/Mgn$_
%@UqmeA[\m\odi&Do8UXU^*oul#^"aaJht"04Q(=r9Zk9?a`rkV(8+F%OJ/-lfr8A^lT8QCOZGYl<_10i/4cQiXl<h&N<E:51,n?T
%qk9.boGB5VU0SWF7_u-[R#?^dBn0T'-]?7+ND,M%pdUFf%mHmB;S9`3Ao-,:\AMiqQ5j$2Z2!:g/]]MY*:`/.KAh2rqF*DWEmj"B
%i:]@h&UdJ+k?[k0FD)`d^_)_-l#;f!?"8q3\mcu#f&A&S!]g]-B!<@9&L`4!K0Bl8RnPPOM#;c'flhsWa\B]ee;daO]#5jPSSO(Q
%"V$/B+PJV@7'`LGg=f.S)*pLc11Q2R^d:B6.8tlX>dl[eACnZ,OGr>Ff.EkOh&ZiX["F\jP!p?bo;jTi&;B[_D0#nIp-CVG`2,#Z
%p_>.QEIAt+@*sl4BrAIFSqC]`Ln:BH@^R-'\*eXmJ.-N1Y1lWg_)[3g(>NDU0HT5ANWYEaY6jb`9bJ:0\)pZs.16Gs&O5tV]H3PL
%e9<7tn+(O=XWR:DW'1d:L$Vi<EHkCE*ipY2aiGi-88k)[Of^>C,S5I,kd7'aZ3arbN2(D5ToYPN&ei1N7@JVP$":I7>mlW(-AfC$
%<ON68OaTc)i^+M+W5/0!j1V+1rQmgO42pIVnrX;3HUZ("T@,I1?P_hf9m]H@F1A.A/7aKr6S^^Y\)LAtoW_j5nsn#5j"K&H2&7ik
%Ak,1Meg10^kfX#>Rt>=p<\*7,N_r<Gq]5h"%_<'mHuLh<r:XmU6qbmTG+h^l2KDP'LRF!jT8TD>OmOMNEWTtT*l0\mh;b(%S2sns
%JUD,j6bKI^<EQu*Vqsbu^$nWCfI9jpbK1\8Op@d=V\NEIcL.<'3X',m2tu+Fklb)8Lhqjm%dpSeI"6Q'"(H^:&MYh?-8!Z44\>=^
%(a9^S=iYrhS"%iGiN+j0aJh!O,Pkg<3b>&ukm]`Pru/FP^A;KkgdgsGpGqkNPCnl4FZad3`ZAG^6>#\8Q]bT4>pT%pS"hnSYNT8P
%Al6'Mm3gp3nM+WD2<%c#__#(=\V^hH0;O:=.i>V&`BJ>.:nntgn)i#V,L$?>=(iZdFEFWQjfO<paYB^dM^PIqOj@7F-DV_q\(a.U
%H'km*[!7Q%]gNjFha<R;5q+;i!i(sH_\eni5rc,`:NTi;(+7'bPX53:m=jp]%LJPhQ/ib`_FVL>W'48.WH[1S`"b+JVfE""GU[U)
%QJc?)>+YL:j:a#c+L,-VVfC@r(l[ae-j#fjfI0\@ccsR]jXcdg)3!0M0R\Xu*rsBL&NZs@;fib/5T+kt!T&9]F@us=UA2"/DX`F;
%lpZ-e4R4I@,-2Y:\k'TIhlgK?Eppg`F8;9?RfN?BHmM>%?A3#K2G;aA@6\(2HC"[KdFHf46hF4h\XI%NO24m:`bPAC4uRXcfC-B_
%KXj*r,nNeqX:V9(GuTBd]W!*.3JI6[<Yc,-".;,UOOhbJ7`HSdDdcQcnacD+^-LcBgQZ('k="7g+kC*BM@\U?a)S6)[["pBX0(RD
%a4K]b,sdTUa;aC\R7Cd&>W\s"=hPC#-H_&ETCKG)Tl..61g=(eo.Pu_-?X<2#SqIH$hQ&]EW'$Y9(CEJDf;c)I2H7bYm7g8.q@.S
%og'A<9sIV:"NBNP4Wmp_:1Yioor"Hu8g%"7&F#Wenp;tH(:T!)e>3_H^%p84Ma!<(k&5sDqsap_JiR%r*_9'h@^^ZI,C=<c-g(+?
%Xc#,m74r\8esgiWKb*"#H+LpH$$)W?="T(NeJ05Po>ga=Et1DNDl;9DLiSl,L0OJYkS?P,eHI>*_DJC:R_(5H,g!/u5WX(JE>'Xa
%T(6EK`*eXC<tI$unefK>If."n^DVcR-bR"TJ!&U)f=Yb9+[ek06AH1a(FatQ1@j^6Z)`#rTs/lG(>\U'lX!uMUuCqd/;ki))L='[
%BloaOZ^sVu/A56'XE+*c*#tRA2k*sIBu-"+#M:m1O.>=2W<50@GVo(@0V,u"`_Q(Mg#2CC]Oe_ehJe!M<q0nEFWZuD(5fZZARu)N
%geCa7i^-dd^Z*7J7&(miJCP"El0jbrZQ_6s`Lq.\,ORjZU'-iCNB$2n4U^n/^80Y^Ou/l\^9!du>?=cDIFE""7NA,$6-+uN7W-Os
%:Yoom%ch8/pKt#HXjpW28U*Q;*iAPfeWCL9(@<YR@YdDB])EsuKmG.G90To`BI7a/+*>bGP+OrAUu!BF*Ct4-"pBs@L%ZKie`:sM
%7&+J6884?uq>2FAckWDjX3*.)f3\*B[2Z!1%UM\nAh(eu!F/R8Y?GJC?pAq7J1[gobsYA]+]6?N[P1L4quCgn5U>CqfiOPM)"OFE
%.6h,UjTc>dBW(dD]C.pM`tegZ/7r=b0HZE$5*ofI:26d!A")n][Z\7NacGTeVCebr5pBug8WZ$X\LBfg>.7+cgE+oq6#L=jY2*:o
%8J&OMI$,V]'S_qW\X0%($1^d\oIp(.e%XH\5tD#5>*0pId*[aSGp/Ir"g\=TiR#)@&nIF@X%Er%5Q*0"aFC]&a:2eZ97S9c"@uon
%JESj6)+]o9IdWFB^s)a[>1m8!q12OY++;9B@Nl7Sq4VtUOWWo2O<6mW]MZH6Ha`+5quESsY)j_Fh([C9@Y*1-U;,d0N-edOO(g5h
%,sS7>dB!&0.Z^p38+)(q*X,.";(tY(#UL#G_-Vj*e^EK9LoAasX)c38\!,2#ZAjYc-X.7T5apFnIPe3VAWmYq+l0R7>eqb.bW7W+
%=gZB'/p=#a"@A`d7c$^^d[fa79^Tbhit\G7,1@c/;u;ml>9$)J:9uM=BWQlEYdBUaBmA+uZG78kBr.XHR!fB$eWF/$fSWs?]KpTk
%7,P*Hce:uZ>jG,/WD1PIbAj.0.+6I;@-lUY]NDqGjtpLJo8PcSlKG(EHS"4l+aVkqa^i>[__e_6@dHK"g)&RB(tqP=e>@+d1/S(`
%RLNoB<,n5MUWS*(O=D[hOmJ<5a0K2ph\7=fm00gjRr<%ATB20mE_t&VZDt31?Q('5'eY_Zq/&e%CI-Y%:5mSEEJfQ%C9O0hbog*N
%p[d,:8lMNFI0aHS^AJU51,OgY@:#L@7@uR(L(=)K\ZJ'6ST=K2UDK%D/?Ih5A2@9pZUGMcF/;1N"0I8>bs2_KH=SDA\BcrN_*m:Y
%C5dG@#]7V2/heaq6tWqDOFId/.2Xm4*q>cg_BHM,c,7+:Gq@msqH4:8NJKnJCTDGYDq;/nXs6h7gA^p<D:&rL:\lpL1hhE0\4)%U
%a*p>$iB9<",'6Il#5Xm&8,+MGP[/8s7@HE%Cq;`"&'_$T]426-]9R#.2VO+O[G5FOnj.(kDB"h0VN56t)4nH75J8uT/c'"IiTf=M
%3rP-`jqd25LRfC=W'<0#I.0ai\U)Um6'<Q4F"Z-W[8scI&C%0(qeQE>Th/=V@c,h)$pU7_O:4DulT#"1bJA(%N(DT4gD/%[i_U,:
%)?",mTko.Jmn\Ut?o>3Z5_AGX+^2Oh;,?AiLU@_Mpc`Cg(B#M_(:'ru,O-i"mrK;/d:=Hk)BjpQUVFjS3QQ$E3^O.6o5Pq68GW$]
%YfW8[^5+E/[30I0?Z4&I:+6Pt>Fe%])EK(VY'[F;<SLkCif:S<n]>NYqfE^Aahs?nh!ESsoqp6G:1jXq8=c7$&Wc6]HoIbPO_fbD
%3D7sKGL,6X(:S#g:r^5#q7e%Fpan$u>^-$Ol3M`Dep_rV8V(rjW_"I;']s.:j1S]B"97n&iDiXSl#M&\:#:mC>ANdf+n]$&[kg\C
%R_3L;=A(EZ6.V43SHH88gMf>X?':Q3P`;7bH(.fD>=_nZM8b@bK&nrCg/']lCIR*Be<d;#nfq5so51b@F%+q_NNfM*BU:5)"sk&G
%*G2si+Rcg`QN`5P`%H0ca?'fC\^p2Y%[7\g6@<=EOd@=Ha8jA/$n.J&LuU6,)SGf%n3e9]H[@]_D3+9t/F+Ptj/42);q![&?khc*
%H&oE!8g*@-af,p3_%k..BFW4_"kpRR/8k"M0(;1';8TqAORt.>CrZ%h2qbf>-uRJFTK_/;H5B+51VDH*>pu49Ft[eOij(0)!hgLp
%^YB48L)1eIW^P.D\dFT1L4\*rTQ)UpL@oW2_shehIQ*T*+'f?\cId#u4?Wk%c"[bHC'LkPH5KhaFN)-oaG]CnGU(ZW:5RW@nA=Bt
%GeMr0So=/B_slrW4Ug\ia:RG`i:e78kL7CH#JhGc;@qO!ELY$XZ^MI9L)6T7=.Z^IiQD5Qm=MCi<Ha_-GZ;j5m7X7(lQnG*Lt.$7
%c#%!R48.Cn=LsrJL\k^h@2,2(_Al(ZciXZk.ZHf:?\knf$W:Z@?@A'b>ThMH*_5@UVaf69#Lnp,BCjDZcn3!jFQ\r@6U!B6;:+=(
%(Nh5OiF:>Ya4O!pmL/!Qo5tBU]ikrDg5O6]XWoTfaOCQiT8(-%pZH-4RI5<tLp/1GKN^#3<5"uRSc4/:H>B>l8qpY&YQo^2MYE(R
%,qIEr94TZ"U6JrNf:[i!3DIT2\U6E\WC5Aj.=r9&S\_l'3Q8sPeOt9k]Cn9K)4[bDr*I5p1mi9&(ue\;7W!m'LeK870m'!01SMQm
%F,@=%'q7jTfik?l+c#f0,rW4T)4Oj73'Ml:m5=;$HRh"`[*%$+p0N%9Nm6)jDC%48[E9JYqfOcFB(`a+!*kJ:aIDDD=GZ$qqdh<@
%MI4QH6=a*9@4?OB;a`uKTd;C;9^3(RUaUGjX`09$p-Q(;mR9\10sR(@]b&7uonNG,j45QJ-LiSj6Y=[%,rCs)1d!fsr?PP8rX-mR
%Aj:%/6Qdq*"l1Nu8?it?/FN+.UNDt$7CGB[HP3ZFNY7c7,("GM%.!Q(/fh*KS`W6!\Qi2>VGiG>_2sA96JL?k?ujIo!cuHpZaUR7
%97ENsU=JrS,WY/<?AMa%eR"UF;KR#0lof-bTSlEhiBijDE+*1D_j_@3'p_+DaB:Z0Y>pjimc=hB]o]4i_k&=3$gW*GHXZD'07+k(
%0I4832Yt08q"*5;bg=e^p/[F>estE\_@9$t?c_2B^niSH&D:9fZM_SLfmsP:YO[<QaDR^p@(.0G%-`![R];(/0]D\0CtnXV.@l2a
%pDs/c]k]^R.i_WlL4YQ]qZa99&GIB&aji2d*-4OIJ<ZV5]5eCIo3oLih.`V9@C(gY7Wl7/,pL4=Y8)^]/;*g6Ka7aO0l3u_`,+Rj
%Y)%tgPc<B,+C(fOQr?B_;A1@g:O7@(@ZTM=i;d$`*;ikTQbA6B8?m'o?IQdS<:2V\o46r7#+sAGUHFH>PWi!`b/G]_Ajrhe6(KLI
%/M-Q=-BeO/-4\n`K4ZLjHAQ<\3+f+r$6SAi;lq(c<"%1?8(gB;lcY0i`pos*@B2enrMF)]6$-UrB:=SgaR%G"`-pr^&t_Vs!u'B0
%gb"NtEGW2t]<W8k8gIqKgsa!YKh?N/XX"Q$<kj=`r7O@;oE)W"&b<e%cQlA4?`l]GECIAe2(aoPoEYL`Oq1,KB%S2$'D%_HoNYUW
%]5\uJ`n:_5Zqao;^T!,+5aU1-m"Y!sU#f4L&>b>l?:)m:ZA6?-Rt'V2*%a>3'@XSAg-hp;G9%GC9^G:mguoL2mGBRS@%H'RaVA?F
%SI48c%eomgBG7-rZjRc";1[1<QbYK!?,n]%q$D]TN/hKo,%9;m:[c?fTS+)mMnYHtkG0mgq]NH%2]RS&ORts-!\>;_?3J(5;.c,f
%>)mJX]rKD7d=;,:!RY\Q@@P/Xg'k?MbP=drAkPmcD(EIrlhS&-]\ZcLM4;P?)S2FS;GNP5.l3>WfEk^rLf*<)Ti$RCLgRJ1$dn-N
%UnH+c%fL%6N(K@D7@5b!6J0\HqV4o1a("gH>NdWsd!'L=q')'*/f3>r%,#9)=TO+cqr8249pJ%/iA9cp=2fPrr@TYlWb<4Q,=5QV
%(^p\Gp$H),LPTV!c:=uD65S5ml$InEG:O_bDte+/Y!$s-*V'8kIFIKWr&K[i&ik-Q::%e'WIe:9HQfs[2lm[J1Y\op&rH5\DG>3a
%;KPecDKcd-?E3UL.8X`d9(&;+'-le9qiLh$NhPbik3_&[S\Clp&?H/j:k4X`Ap:bChPE7YE@gB\%ca!UDonTY7D-mB\L#jG,5N:a
%`7.iZN-ILSatY&#;PpHYH]i9=f!LOR&>isMO96X65PTSH3;RTdXh3mCLrTfCbX9*3KNECA%c#T@8rVV&%SVdkAJ*tYii+An&^9NC
%;a]3:bGH''beCLr&+(J3PF%+Of??"4Zs!6uK,[SG=jiYI7+4U-SO0M]foU0^l<S9DSt`X&j/u<>`R0"Uc?l=6-4SX>)QJ!%Yd)E=
%)Z[rfJ!7U"r%-Uq]dV7cgki(;kUs[=M!Uf9Hp%c8'W,Ug1O[B%EK<Aq>DSKfphi]_Ye8ILKS;mD=IIg2J'l@ELHHn%L95!%lWrZ*
%5/bRAGMT8l[VO8+`.l#0G[$ff/Rp3LEX_QXps=Q?>ebHs(!\Ir;jjo9$tT^N;R3uh=XhI!d]A[l,0R&%>VBek$Ef^P(F@[+0e+L$
%bA&?+QW3[Al_W6uP*@2.9$-ahQda8&p6Fs?R$<d",u%"Roo^Yu,^UseV'LCZ92LebUpVVm?A_H+Gti%S,D/qfVBC47-AN^j8X!&8
%]qe6!:5qt?an:f4UuZi)Lq-iX8L^WFQ;&fr?IG^89J:*Y8u@qd;d)RB@8fdmQT4OOdE=Qf(XYma$4<-,.4o)`PSP#I/ZE&S5UY)T
%&`[Y,AZKkU,0HdI<%l4f<#8NdP`k;XD+[+eZ9!+\2h''@kI#"Yqd7(^n,MP-IfF?dp"TMl`:%cVo3`MpiqW1SS'**p6WYNUWi2@W
%GENtsK3'?cbgUg@UEdZt+]aq\aB#gA8mD%2N;l5`8/t/bM5g,_?pI[_Sd8fT]:;Ir6ut_OeK",USJ%8+Bl$VKODH+gOI`mT&@7I&
%6(ECjYc3^',.(W#3Xr"UqE9M0FioL+(*MCNrAA-*gI48\;&?QKPahj87)gh"Ck:99LMAIl]mVrB'k)HJ7kXj"-3?:Y&7D=S`A98V
%)0;Y(p(ITpRQccga@R`?!YLL(B4bbTl'uu07!LOOag\Q:?HBCtnQm2,b_mR-`^:/K2HY6NqooKqQRCGh2HQU'f2,+QUT;A<W$^*%
%p'*;[?O3^3"/4r\CUTF`ilgU?=^>Zaf[5GHITABXfG/:-?j\`2JP#o(K/uip'A)O0CfZ,i_,iJ6Qe#2,0'TNW7(gGA)cB0#G2?l9
%mrn]EnrD,f9aUZ'4shm8a*B/aKgUB[k-$^uCub2tR?i\k6kNAaNcf-<gT@D]r[>ZN2Cl)sl=BnOQ@-]f<6VDOg.=Vi3'pHE*TuDA
%!:T?UX:B(@gMrb^/nbo=_R91@TUc,1JW,%f!r\il#\;`Z)WP^DJ;f$AD\8K`dZO/+&&P?/M.cmRKXY,.Ompk@-I3Qlr36hi'+e5i
%60uO8+np-gp:>#`3CblO/O;>&YOH,ohI+pT$[<F$Im&?]@DEil(0,rgh79,=4c=Y`+R6A[K5B%KId8O:I(Id1Ei7,T5O-;#B'IW[
%AX-AXCJTr%<FLCN30W>e36f<7A6sT^l/6$`*s1d&Dm+=hHt><F$71*Dc9hK800V+fSC;9bRk7@LKM`oH>V>rbVMN@+r:o[3Zn71P
%&7]\Rk.2d%M(,qRT0dk.o2`,W9fhN[[=$hQ/-%?79XpO./pbiHQ^@11ha?)pHK=S\HgYK^0psQ$[c;=3@,82%74kWZ#?kWd*YdbG
%bM@%707PG2!53+>U"PAEb%3PMT?fcGb73<MoI:a1J6fWk-$&ghhk#=&Q<Z8Q"-M7s&A6.h9kcI)"Fr94k/i2`'u/1<`lr;@2g+F<
%%#NI%[0<Ml,0I'JjMAf'c.;29+cdf`pZE8m%]epC<_'dQB)"g]@\@m^)'HT#<eU-EWtGSpk-1RJ!UJV3_3.+nQ^#``MI$RG'YT$!
%!p`iRG+YCFN'2P3_f'"qk2q7EHIEqaX\l]RCVI?"Y$L.+!l/;">0g9F/bGRc"kVo7l0VM$$D)Su1+bja9QkGt786Mip=H]4$`<-s
%Cc1CES"IV9W`*M=F)ggui20GAb1rN92hs.IVrRT`S9/)uPF#5%(G^)je%:Rp9!B)j,Fmfq7(@o%Vc^]W==GO$"8X:7'3ArrU2Zl%
%!FW=u^eQUAiL=sqh5iYH>f`&B.l_PY3XZUZ<ra):Vh+Maq,O#VWQ=ZIEfb9\+a9qbR!O&gTY84KM<.$T$k>VuW_0CXLt8/9)VHTA
%W2"urUtTcLq&3J!8^3sN!0MhLF7j-_k$>%X:oY&":n24PHQfa2&7HbJCa)(k$jR`^r/7YdU_ObWk#@pW'k)XNEA^g0NOA`F&*-KN
%8Z2]2pU<i->afW6qo]2$MP-i_9-a[b<#%uk8u,OFFLas=P"5b=6n1GoUj,fM8.2^c>/9WC\i$N&8$2kh`"A#`X[o'SCrZQ^jO*3?
%m+UaO9e>DRq%cDT)=th_U?Ih%Z&#.'[E5Es3YadN&k1UjfP:P7>d+Q%]?k=g_D>BY"FeZVr[<ZTP9Gf!Z:**W650H/?18Os7(,s(
%&KjN"L+EBMRsi@%+A1-gZ7*=kAPq'MTu`rLTdh4D@aqG03[=-kaJ,2qPXPb\/4u_Z+rDn[$s=?7=cXk?/lN6\=VS7nC+Cs`PXUoG
%<P;qj:tej177/T7a<Hs+H3p@?Yacnr$=[Fsc+fMao^T%k72Vk_.)KZqQ8`<qU'4X5%J,EW;=n#H'N$]1qabftr[!5hPRURnjQ"KC
%+?1[^lXjbf/bu#ifglaH)k.47!.bk'Lkn=ud;s;9;PPauZ%.AI"N\BDPfOOdnhj^5@T0W<J`/e<?R2okdu*Z.7YL<9fQF"[];D?`
%BPY0=3=u=/Y%PP!VeQVNM7tUF\^uX7&KsGW-/&D=#fpmgD*(Za"rQrIMi0/IN6=obb5,i;(*t^QY&*3mGtsPqK/+5`=V&O?kbQH[
%ha$DNAlk+6Y&;<dL<TaNCNMI/;nClEZYprJE=9@>6+S)5eQ!$7gi&6K(E2$[Wt(`5SIls`0I$K5r_E]bGjD8TEj=[Z!>=p1I?KG*
%rKse[?44gcaNGlk;qDfB'(Kfi+L,gI(][$)B:I`6f!nlc;1'40b^t6/Y/624QlLpL!N&TS*=3"h.Bq3!fXK)[A`HXY?]u(OT(.$]
%-$dQ.qa(c@c9(LGdm[[869\-lNL(#50Tq6W$T[FRRr<?0lgCqSS7C%hI8S"hXZ*3g;BU."@,8p@Z>Sb3$Om(hU=XIgaSoDdGV;V[
%84N/dF?0mYYN>Pfm]0&q5eo^/n[6"fe$XQ49'@]KR%VU0**hedA?Tc/#hchV]<:8Ro,ca8\o<_u;!W-R+5Qi$X&X3T='j&dZD?Bp
%EliH&O5u:I^l?tSU96#TD7']hX1Xe&eWT[tcg.a*44@?$70Oa]Oe\m]!F]s.6@q%lkZbk!q::+JSaTeY#]?3_JLa&-\,s2Bi_<&N
%/s(25!XuhuJZM9FI]t?"g&lMRh^2EajaYg3LZ<,BWtEBemXQI)?dXK4m1LAdK7Stfp#+et:fS#qX8@/-_;fPgfp[W<0'nIo3c^dX
%+BGQ7!nsi[lG;f.d"<.?o\bFW*Xj;'D*7:_md\_X8+Kl<*^#VK/G*<mj*`6"Sej7$h]/Z$e6n5n6BSASkF`VKGQapH;1mK]KGn)-
%WPJsFC+s7kjb-M@*i;V7$LY6Tg73(=)#W/MHV,flcqoA8^"cGX#%ROi?I`EpcdR?*C+qPdgYQ[!Y]+MO%BbN:?m+KYX2,0JC@DiM
%9+;)&HTeq!:T;.*EVH^Q.e"6o;af#]3-pYZCt$iT@dA]M"]b'%Ri*&0m3p%%6K[G5.RkcmO=`LLECSm:MCmYir\Lbo`b>i.=NO"N
%O_t<+`A9EFp_lDcJ$i@Y7km4=S,NY\aLr9J)G53#7^b!YA6]7X=C[Ia,@CDKNG;K)@]W)0R@*fJYRs&^*5c^5I/G?p>VIXb*9%LO
%g2fi2d&U-\$YKes2VaF5Y[5&ECgmA_]KN?PDKNfgH^W6e,$eOA$IN,`KGP[^5I!WFEQc!/M#ZGV"Z@2qrV@tWI57r*6d?%R3W,eV
%3VPjP(*tYFo6bg\W$r64,qtZ@F!'Oh>cg\kPe,(e..83=pGNERiI$&]bs]O+oCYK6Y7Kp4EZ[qK&"b^5pR>f`hK4Iadd_niStW[`
%b(O]t^7l:gE2me_D&#CXN9RrIY8.QQZ]OlsOt!QYE6$fc#_i:obNPl/rP,G!8B/Eo8%BGa(]Hig<8hgcr5[6f6%M4+c7U75=@on)
%d!Zo@eJa\5dlTZklhajeBW9SWV:#jI21m-ea+5heqK=<aeL"t@;R9]Nd]=6#H3IUhLPqJO\W$R!(b[8;XB(ZZ8(MGIIAUc1^tQN8
%eG@m8-I$jr8SC=RinA.d)Gk+b<if/E@/:5WJc_OCZqFuEcVX>XZ9#n'OKDpVHMP/gZ4uVYKjp#C$2_p'`SW`aU95SnXi,+"3AWc4
%la9bkZ2V&o.d-48]4G^-+C$8r>O$!FF!c)TpT-l?1q;:3d8bf$[XW=B&Q><u=VlUGFnn,^5Mrd]l\bKT.Z!?F8OZoAl[,'n/N)j@
%RNlpV)R)0SJ!3<<i$Q-EXdj!"G/3M9QUS:d[el@CeJ^s]F%Q#[^SNaDMDa-JSfe__<!53fdrGuj2cf!M(1`u%&b.nn>"1Mp<QQJX
%%)mN99<hf*.+UefAP033,$c<+C]<,4f`gGa3P0gWdSVmfm!@'\;1)ieS6ZsKg*/kic7pu@2)$c;/^8Ud9k`)mO_2:gV-2]5_-Dlj
%ICfVqWm"l?5=\#Po]#"uXmTjj]m=QNa%NVUG-ls-C,K,fpUba_aMVqCA#Rr1fs\ObX"JpeC&h-EQVtN$V,T)cZ'9!2kGZD^MFb,Z
%Eh?oOs7c\Ao-VYQ/-EY4YPf)W71@(FJoWM:etF^G2`'P7\/`/g?@0em87^EW5]`os$B1;lO?eT#)4#XJrQ,YYhS&XIK;iDI&t]bO
%]gWbJB[Ffq^&S8YGQA'BOPPAppd@N00\]&mYoAdWT8_3tfg!P!3d^)jo-j.&C3<(@cX$TKh'HeN%%0Tp"FIHu.sBHO0QJTSNQA8*
%?rW[=1W3BAeQ7jY44UQmkR9u#KmPK<5^h1rM!U0>R##THf/N#6M-Ph<@o5`,fW]tO25YS#.C.M!'?3WF7,$mXS4p?DjN@%H`+Idh
%VoIAo%AD$0F49\\Ejhpf0]IV*Wu`U9LI8A)_R1Rj?7Y/Y=f%#F$;qF*/A@^fp!3.!>C!\C;R_L7!i6K!=Gno/%_90\r"#k%M9IYu
%EZT]-_-X<c@!qOJrXqA>>+2gtY3K:M=hb;ef1gB>:MLku^uQ/g_f%[ULYkGLiO?&GGJJo+'uqW+1[0.T@bHNWMLf#<>buFtiHmuA
%DO1CE+jW"fA()l#oba1\,@fs.p\!^O\<I=S4SY[6EbW3"d(sc,U%0l@H'R6YBBIIQ/i*8_9n%p5>*f+1#tPEeLd0m]7C$mOrOU5Y
%$+4EcGI#L:#bRM%Sl\_#l*bTR%Ob4=LGD2TK[4*+V!h0fgGZh;jO/+I/-i,&7Io"]DFJ`"IJpn!UV*Y-eRem[?fL++Lgrp@PM>uk
%b,pOSZut3$Y=Q(Wp7gK/')`*^$Z>L/&oYbJq8%'b[oll8l.-Sl;ZHoHZeNZ7LW._kW=.4qL^]3KZ1%/7Trl2,XROH-b8fctAN!.k
%O"`+LpOe*m>#/f8_U%+n*Sl&?@A81(/qm5b2!)Dse("\7=GKqqR6Ft:b;Cd8r]0GWUL^E0o2-!o6pRAda&!Y3=P)e@:usZZRV+X&
%bK;T[YIQ3H\;n($*,Ne2O$CdM3p$%`8F9j6S#>NeW0C8'M+BV6UU9[V`VCr_&9P54<KrbU,c:6+B+0S%?7N8LgIm(u[U&b\W34Nq
%[BHNX!fF:qj:c9mYXd>ce`l&"E+XoBHIETV2e&CIEtKQ"Hk[1P7-+BZW9lK8FJ#=g0IOkFq<ZUB64$>:G.Z#s9@kDQZ.)IN!DE+A
%?Gchunqpq7F)n:F_/#^<ibohc`(==I(,C?02!]>[:m!&*q"@=C+k56s91C2edI*SM3B*(Rdq$D>m3j!QabY[5hPE%Hp.?D))1jU?
%.;ES%UCSZ[Zq]mD^_DP\SXm<GiHG2UO9cV57]i8o8I2U^R6u&>E=53'OGYga-V;I.RBpXL1^4L31j-12Sk'a$X>#lK1T[3K`!M93
%["c1r7r,3Y9Vt?p[6'49Rl6TtN$Wh`b,=&pM@Fc-(p\D>jaM!*qV[oCqooEt2J)pLI^Y*s=Z$DNYf`:gMjbpCSjB5%O@!-(rai1.
%CY@4BRQeX?b*nGq(Lsjk<m8`h!?8bma&q<8'i$Jh-6E1I][e",R`Sl"HfSdDfe4d(6d5Mi4`B'4oQQ.&h7=dN%j*,p5OFChbb$Kq
%oVka#7+0C)L$,L]XCT*uL,p%jcodp4AOC#5802aJ0CkCOoplH9U=g$1#L@8!"3..Z4G[YOMS]I!l$]23<Ek#D;L%nI[]H4mT^R5)
%GPHC#]M\`Yq7=PornLNMEP1q7]g\GekW9o(0$4Z1f,_R<g((\4%O,UKq[rAqU$_3e10@c8iBSA+-)-Z^$*?/R8k)thi?"hB6eUEd
%9_XCtc>./]gHc?lT*a<X^"f^D(hjSG[BuJ0S'>92cuss4aHNC-"!iK=W9dpI/r+%lZEq$:g.9oMO&.^8`frb\AVZlt@30<o=TX>`
%;ijt%$5T'6#,We,>j#hKYc8@P.bcf7hF#W*_V+XlU9bWadWC#1Fs]tfc>hO[mJ\qDF/ouPH!PkO).<]AG]&(l=QMS&8B&q<D)Vdi
%'1pgC$`!TtOegu`3c<':I9GL\E=6ScBApB),-&L;C8Y1(?6ae4Irr''YPjDX(T9;5nn]T1qJFQ=8mMHokZ?&$2jM=INa#oN>2.JF
%X*3%&qF45pI();.jTE)><gVj4[-Y)nfl9Ygp.0N$b<Z.?JO]4c@]\o>bZ6"qh*fAWim_Jb,>rsYHL.#"s/:56k8]Fka"<sB\b+'b
%]=@??RrbO(W7l7g6KGX.O<(gl7Cb--(<>aD!phspX0(slD<"aQ/R42!QIrE3c)t8[i@=Oe;4aTPQH8K#fltVH4>!5m]PZ^;nL^4O
%%/)MUM<U>fpKY.hgNa0#4<CO<`3iNV\2QD]f2WI.@Og`J[a</+EQ@c'LqU8$UGiI.M[mkc>BY%Al(L`kI23H6p4(J"5Ra'P@kUFJ
%.PUT`H8dT'=W\][O)KpV]j(S/?W9tq)l`YHWV\+Kp3&Dn9h!8EM36ptg>!k#(6Gei,M"-Q=E2cPYA5:6J,M^tg@96*'RP_ipT6EO
%b(1sLLDB>7O*,Qj6sO;8R$0Di<U9:;BPOEE]FaP'JhWTmn&g:pgEm`sIphWpAZ)q3r:3!e'Ap;K>>#sP(#^>367>N6@g_8>Xl!n(
%0dCnmIRb*or6;<S+=8=q%CGYRO,f-6,;jQc^,7TaRBs'npC,Yc=UE@me!fh[T/%u)g#S`?r>HF@W9@N];d<fkj3h1oS5[!Woiu+&
%P$[m\$NbS&BuF:'!eBVi&WfNpbH-,EFZ&2bF?pM6q#ERK&b8IfFaQsorq"KM\;!OM4>aZ+PBl[MaL+S-'-V;da0uknP:[KiE/(&F
%PA/Y_d;q3RPZB\NJl6)`Km"ODDIPj05jVHFqa8k8<Mok%Hl+i>dt"Q,_DlY+Ke/dl@M5[O@NS!O2'AJ4^(5ouEu\f=9Wa')9p&u#
%RhC/2DHa(aU#Gf^[?[gOC,I+e%*qsf25"Ek_d?0H-;-1k=p&:GS!qkGE&uioXbP*o&g6m;c;IrB-oG/qTdVd+?&\\#F-J<kSmT0$
%36]fb0Rqi^f2dZPDc3L4Lio-n8Z-hFa45i<K:fdC[1/tpLgoU;WB'[;j!(<("*N>H-)II_1Ws6tk=[A0(PTFe^90Ch"hT66pj9=5
%+-AEIV$=mI:?R7_;?Q9/C0N)DC_or0<,1]^;JLa#]dT,6jRk/ubu#?1W77K<)=8cnn3+'6QVql-DbOk%,$@c(%;''SYL"H;6mN5"
%$U;*fkVO"\SRu<YBoXH^YtdYMZuEQHVthM^WW9Rtd97aBLdgmB"P%KDc%IlFAGC'$O>LF%2n;<(JE:(m2'B&rYM^=J?pCMq3_DBQ
%KUH[\KH#V2@3HMP<\R&)XF^Xl[@QIDWb_0/Wj#]5k(q))R?luo8L#!3Y%#gcc03J+K5sJ]N_?3<EqSZs[SfUl)PG;dASImViDR4F
%n1CC:+0<%=0i]-7'0gCF8Lm>dU_V)iC;-YPjT]QOppn!\lM-KcFg\e)7a`GoAZ\?kg=Kn;q+cP]Hb"XJU"t'<8H@G(MB"Dt`3Q`l
%1Q4"\bm)aI]lcjaZ-sk:*97n;WVZa;"jCH%;,l6Wo3kU[iAYVfG(f:,9\"`P2$)Wm2<f6>9sIo%Ua%?@Y?#kcFQ=LQ,KVa:dY*>#
%A[7N/#tuQpD,k6t5*.0J&QA:"Ppjr0e?EW'rX!!ia_PY2MEB(^5o#ssN?F)PHLcs!3f0YF^0mW:!X['%^8XkZ8q^bT)BkAAG>oLX
%FS?N77R4q3d[e-6^>/P^jMPkb^6?Io<"bAokD1d(5-`0]Yqs/=N+::BaJ$I3M.B<6WoF[$JlS4KF1<*L1H8SYPQkq,CK*.]l?#i@
%[[O5`D&JSXm<>*I.Lh1XqSI3nN?"''N_1N3G=?hD?3oT>Lg9)eZg##.)4+A,7E2/998YFn:`"e)Brc8>1%]r-3`R;nEAo<J$#+g-
%MFeq]&YY:W0DiPc*n^#Ih@I?on0IU\a;#c<,2LK,BuGnG6P$WOn-;51&I\TJD$+>bQEW0%qo0pWI?hL`OGLcd4[0XcBAVsrZ<oM:
%$VHEV`Zo:c"gJ6-I.\)<h"'"B=Mn'qN*qkuG]Cq-aKU*T'7[6l608Ak0risDLpVH]?@\-c[NNUO)!;sR1)%O1)5&Cpk#JKt:-d)V
%1:P)CbISV$ZSbu6%KeMW35[b8Op')/\?=$%'lH,d=X$.+5ZNNZo_m;PE1GOo7C_(n<;^H@OYJ);pFA#9*>hlMAASQU/]UL<1:7rP
%6YcJ8L+n@ZM4<?;d6]#F:fM?cEN]2Q3cqP]Fu^_'%Xg+/Z]G[83%7mZN!N6[@QW8lK4B_#N_J],mhC_^=<-nN*!C)dq4:bLq5rW!
%JC1Oh-0BH;1kRK9ZtkAaA1LZ_X`)>nPqXGjjCiPJe;*p[S-@bF<pq&d<Q;%pVp?QcOp8g<>GC&pRbhN]jG!f$Fgn,5DFfksDk;Ju
%6NS4W$eaT^?Pfe%*T+:W-Y/^,goddI<eIR/N18;e6)*6fPE]BE+RLYk"(/cZnHQ<bK>#!B69^cohPLslD_(Thf*8nWC@A+%js&DM
%LM\j<c,.AS&_5-Oq&qI.Eg((84/OsoKZG%c"i=+O2#6BlCj5Y=_@]ou-QJ9464Y$dB!uYuM?M;8ho>A56NT<\Q$p7fJOQHKglOdU
%:%RpC@d*6+S86-1@mPnLbSu?j:2<PSodYk0XB$S*M;n6@OQD4%=Le=`m0XJ?1;]^F`irlc/Z`W>Q*J"26s)[/9j?S7>\e*M,(W0t
%q",Ifn%s>Ui!OO5bj^tLq3doSL]Ea;;081Wl9Y7HqcVD$(ZTa#>'gt@/k7FrA>9jrEDW>biX%-:,';4\Hn-&.h/3h:B=<a5CER9K
%h/X=k@PSW7p%3\(;,5NZO1F:!LL$9W&/STO6m$e-faE%@lW*Y0goA/`d>Q2Rpt?Cd?hWMa_8;fFA42X^D\qa6QDja;2_<aqSi'r\
%B2$=eW@DW[8pT*?":)Uune?GYa%KYMIa1m3l7`edoL;)?]b!ZU827'q%f=e&4"`8Z^--%f,Gm38;pBalZgrq/#=L;l&%m>f.H?1J
%($3aRUbO)8qWV/,CXdKTIj&-InJoPVS2'N:+g,J5'eH(09G-pP=66k;Oo#'7^'!'bQ3s[14J6_e_:>Jb/Y]TZdPJ'OG$7gu2D1<5
%lb'bl+>u8c'T:fgH5#+a6*D?8mXlMK8$Mi7>P5k'/Yn4C3tG22_=utoYtjQcNGVRL:i`EsH&:Ln\JXiP_>GL\5JfE-N=pZSHI[+6
%&R\pl7BRau=rLte<^&f_3hYis_oTYd3+.%#2P;>?4tk:Ig%aKHVF<8b3-jC+Y/;I8VXa;A\.@`&i2_;6g?k2gf5*V6,bOWfVf]`s
%J$@RSs$PXefY\C)Lf)l]Mh$["'qa'TDW/6;Fj.[@,t&ufF/iJ>@a1K2P_Z&QPXjRW"+o10:bnnRBf9K[!6^3VQ+BDXX:Bs3Al=Y3
%!&>^Un2]6>>&p1QSp#A^<PAq=n/[NPC$/<J0cd:N%[@;*"V&Yc5T!ACPu/C+J65I;%CtE`hdhZg5)sdW.\]N`-u-PggDmA0cPo2\
%3D(M:S-fgCN:9bkBuu'V4";CP]*Ul[;I/9_X35^T-4A3&TF8.]E?!UH,>BsC\MnNh?(7ng1("^Nm^U\Rdu7"46d_,o'2_8fht+(I
%rnud5=A&KS<)lQ..EM=olRh27mofcR^]IBJ&M:EEgqM9i.=U#^AWe>OD"?>C2)QP=cV6>GRAWG,n8s2WN7NW0>3cC0aImEp]?O7_
%3:8I:\g%$UVki3BGb_)P0r'!FIc'u=AJGCn>IEakY?&nZ8pce7`$E^K';Yl4l`&oR]u_RuXjEUE<=igVg]#n\XLR4McjW_<OA.]N
%d3ln1F`U=WpaRBNGo"5I&Atsl^ugHXk8u0*\6?`7EsY\\-$<Hc5#>0k+nt;glH\]dDkY20L;Uk3Jb\rUOt`reD=\mY"Lg@*9Q_T+
%kn[j]ABf$>\KfP9"hJMfM)67EISL`7$4[NpT-G"O^Vm:q$TX_F(k%iMI1'H0>g>6R::GMO3.0Udf:Xr?l'L'1h.+*1Y.*7%O3HKs
%8"?hF_#*4+DJL0%SE4+UDr"'A@eB1+`('YKU^D&h=#-]_?S5ISr0L#6U95!G1j5.+"@ZXjSj\fEiG#d0EAnhGg$,_%bhD1sA_"8=
%hXd8/.eVFW=FHMH57M]T'])bWBB=-lYs#7Ipa"=0`X_MZ&K)5/ABrA*CCGp3]bL7Lbm\ue@qe.ea#99tU0BDRX/r[oB-XE63c:Nf
%:g0)3ekpM4Pp`7P%ef+PLU9FiE5PAgK)ngL53c"9Vj-hD2)nR7Fi;d5KR]D*oB>T!s7W'*EI,2K.QaZ)p'WsH15PEbSPJrFXq*qK
%ZANH@*t1N&@</d0I2(b#!q<CAHs9EKc(4DD"G]!FgcoE3j'1bG[`WLNRm)<A59C]skO\H:=DZm(mmmlarkHN#V]Bhb-kn3:2lPP7
%FJlZ;J2":h4Cm2N!%ur/0EDg'DE;]!A@[O*.<%_9D@1)WWk=VlS()S^`S/6G[B#5o0im!/<Tt:!&6aVl;YF7\,*+g1-ai5a^\[bC
%2<pZYF9U>@Ae-*."RB]jk2]^ZVbR\U7Y5!56B2>-ouM*qi7($]>b6/mlEJT`]kM[I)TtcJ&cM,E35Z>ZQlRA->[kHCAA;F.9^8gd
%6_iV2(Lq[C171FQWe/>23R.3h)S%Y]gm5cD48Pq\6"+(D6;MfLp#:S]-E0lo#u.[%iT3+=;8Imt8nXYJBH.0?Vh:1.$oKX0X<^'u
%,V[dY5Y]sd>e<_QVpgDa0H@c.eN^g6EPE7,+Bi_!%1EY$W)<pe2R=UNg(h[6R>gBJ=cJ.RQe..#C5^.nO'&%NSGbGVL6eTs""Qmf
%WU<=q)A&UjITV=/4+[UY3=t+!V9<Kpbr+]pBR]lqLB#2ceh)M^%hs_dZ9E9n_R<3;[Eo(JfE98>Kl0.[gVe,PGAAW*(<[F(7FpC]
%7o14f>J&+8W-^ogYZfusferb5]7eu#_204hObCP2kU2'#&R&U_\R[Jo64gN$K^6sVS99JHXsctM18HXdDMO^LG4bc>j>0N.WeUG3
%D"0bI(,m[;<i]g:K]];.,j_7L(DbmdKBfLAIPt*8*0*eWM0k/N9>*RNI/>'^#.jW7,9&9@i&Y8g;ElQKIODGK<t:.D=>b%l)A6=T
%\aUprL*KZ?&t2KE5KjbY&?o7uehjSACR@oabjVEPK#muuo6<7>LN`e-MNG0$TgaNg=cFn'2?F?JCR6@:XE;pM,]oD.@>n#B61K;X
%fooWuEieXPMk!O[8NHT?P.XAf^+9U=C3BM[KJV%]ZcTRW3oh\YOf#>Ent&(gdc/gS*i@jlU)@5]rT#5P?@nejKY*sWbC2mWVYotk
%)8U_kcOP.'[Nr5bKl#2)5/+]a.?#!%)/59p_pLt;Vim4EPRMo[L6XmP0P*HH)Ra@JOM`sgn77a%o,f0!&N:JRH6V(4VhkeTQ;5t4
%S#:m_ECnl1Y>=#d0G'pB3OAd+5L@YS`YOr#Mg;t[b@.Q5OkVgA.Xl^!ZF9\$k7/VuM!2#)[)k0$5R)f<>QBNH0Mh%MK\BC8[iGWY
%eO3Hi$\h7pW8b@Ami<2*@k."U_&En?ARB#H[-A1`EW/r64=rK'%:mf%J2/;f>70P.5q]\k1_n#bllBY&Dcn\PS8"/=V?dcC;*bgO
%6ujO>Sh_iT3PJ;=&5*XDWN3btC3;SQ&lN<dPJa6.X0eESB;H(WkFeb[ZL>T66FU#t<07i\a/3WQkK#@=q(O(Pc5-=DO?Nr&fPkG`
%"alD4J0d]eRr-h1(nL@eigR>16mWo6*`/LjcJ<p#^/CYG?CVM%_1%[M?S%p9s4t.KrU#(os81^Pj59n7oDe^2?iT8,^A[:ls67l0
%n<a1Qf0B;]huE9!Du];[J,VZ^q>TQ,r5X<`f0B<$?iKlsTC;gLf>%7,^])\hs76+qrl78%?QdZ>dJQdiqRce&n%\gNR<Smf~>
%AI9_PrivateDataEnd
